
def AboutWindow (*args):
      '''

'''      
    ...

class AboutWindow:
    def SizeMode (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def _AboutWindow__label (self, text, **kw):
      '''None'''
    ...
    def _AboutWindow__linkActivated (self, label, url):
      '''None'''
    ...
    def _AboutWindow__wrapText (self, text):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _Window__caughtKeys ():
      '''None'''
    ...
    def _Window__caughtKeysSet (self, *args, **kwargs):
      '''None'''
    ...
    def _Window__constrainToScreen (self, position):
      '''None'''
    ...
    def _Window__keyPress (self, widget, event):
      '''None'''
    ...
    def _acceptsClose (self):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _revealDescendant (self, descendant):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def addChild (self, child):
      '''None'''
    ...
    def addChildWindow (self, childWindow, removeOnClose=False):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childWindows (self):
      '''None'''
    ...
    def close (self):
      '''None'''
    ...
    def closedSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getChild (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getFullScreen (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getIcon (self):
      '''None'''
    ...
    def getPosition (self):
      '''None'''
    ...
    def getResizeable (self):
      '''None'''
    ...
    def getSizeMode (self):
      '''None'''
    ...
    def getTitle (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def preCloseSignal (self):
      '''None'''
    ...
    def removeChild (self, child):
      '''None'''
    ...
    def resizeToFitChild (self, shrink=True, expand=True):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setChild (self, child):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setFullScreen (self, fullScreen):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setIcon (self, imageOrImageFileName):
      '''None'''
    ...
    def setPosition (self, position, forcePosition=False):
      '''None'''
    ...
    def setResizeable (self, resizeable):
      '''None'''
    ...
    def setSizeMode (self, sizeMode):
      '''None'''
    ...
    def setTitle (self, title):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def AnimationEditor (*args):
      '''

'''      
    ...

class AnimationEditor:
    def Settings (name, script):
      '''None'''
    ...
    def _AnimationEditor__animationGadgetContextMenu (self, *unused):
      '''None'''
    ...
    def _AnimationEditor__editablePlugAdded (self, standardSet, curvePlug):
      '''None'''
    ...
    def _AnimationEditor__editablePlugRemoved (self, standardSet, curvePlug):
      '''None'''
    ...
    def _AnimationEditor__setEditableCurvesExtrapolation (self, unused, direction, mode):
      '''None'''
    ...
    def _AnimationEditor__setSelectedKeysInterpolation (self, unused, mode):
      '''None'''
    ...
    def _AnimationEditor__setSelectedKeysTieMode (self, unused, mode):
      '''None'''
    ...
    def _AnimationEditor__sourceCurvePlug (self, plug):
      '''None'''
    ...
    def _AnimationEditor__updateGadgetSets (self, unused=None):
      '''None'''
    ...
    def _Editor__contextChanged (self, context, key):
      '''None'''
    ...
    def _Editor__enter (self, widget):
      '''None'''
    ...
    def _Editor__leave (self, widget):
      '''None'''
    ...
    def _Editor__namesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Editor__setContextInternal (self, context, callUpdate):
      '''None'''
    ...
    def _NodeSetEditor__dirtyTitle (self):
      '''None'''
    ...
    def _NodeSetEditor__lazyUpdate (self):
      '''None'''
    ...
    def _NodeSetEditor__membersChanged (self, set, member):
      '''None'''
    ...
    def _NodeSetEditor__nameChanged (self, node, oldName):
      '''None'''
    ...
    def _NodeSetEditor__setNodeSetInternal (self, nodeSet, callUpdateFromSet):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _contextChangedConnection (self):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _doPendingUpdate (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _lastAddedNode (self):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _titleFormat (self, _prefix=None, _maxNodes=2, _reverseNodes=False, _ellipsis=True):
      '''None'''
    ...
    def _updateFromContext (self, modifiedItems):
      '''None'''
    ...
    def _updateFromSet (self):
      '''None'''
    ...
    def acquire (node, floating=None):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (name, scriptNode):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getNodeSet (self):
      '''None'''
    ...
    def getTitle (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def instanceCreatedSignal ():
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def nodeSetChangedSignal (self):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def registerType (name, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def scriptNode (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setNodeSet (self, nodeSet):
      '''None'''
    ...
    def setTitle (self, title):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def titleChangedSignal (self):
      '''None'''
    ...
    def types ():
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def AnimationGadget (*args):
      '''
__init__(_object*)

'''      
    ...

class AnimationGadget:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ButtonSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DirtyType (self, *args, **kwargs):
      '''None'''
    ...
    def DragBeginSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DragDropSignal (self, *args, **kwargs):
      '''None'''
    ...
    def EnterLeaveSignal (self, *args, **kwargs):
      '''None'''
    ...
    def IdleSignal (self, *args, **kwargs):
      '''None'''
    ...
    def KeySignal (self, *args, **kwargs):
      '''None'''
    ...
    def Layer (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def RenderReason (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def VisibilityChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _dirty (self, *args, **kwargs):
      '''
_dirty( (Gadget)arg1, (DirtyType)arg2) -> None :

    C++ signature :
        void _dirty(GafferUI::Gadget {lvalue},GafferUI::Gadget::DirtyType)'''
    ...
    def _idleSignalAccessedSignal (self, *args, **kwargs):
      '''
_idleSignalAccessedSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} _idleSignalAccessedSignal()'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (AnimationGadget)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(GafferUI::AnimationGadget,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (AnimationGadget)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(GafferUI::AnimationGadget,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def bound (self, *args, **kwargs):
      '''
bound( (AnimationGadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > bound(GafferUI::AnimationGadget)'''
    ...
    def buttonDoubleClickSignal (self, *args, **kwargs):
      '''
buttonDoubleClickSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonDoubleClickSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonPressSignal (self, *args, **kwargs):
      '''
buttonPressSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonReleaseSignal (self, *args, **kwargs):
      '''
buttonReleaseSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def dragBeginSignal (self, *args, **kwargs):
      '''
dragBeginSignal( (Gadget)arg1) -> DragBeginSignal :

    C++ signature :
        Gaffer::Signals::Signal<boost::intrusive_ptr<IECore::RunTimeTyped> (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<boost::intrusive_ptr<IECore::RunTimeTyped> > > {lvalue} dragBeginSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEndSignal (self, *args, **kwargs):
      '''
dragEndSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEndSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEnterSignal (self, *args, **kwargs):
      '''
dragEnterSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEnterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragLeaveSignal (self, *args, **kwargs):
      '''
dragLeaveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragLeaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragMoveSignal (self, *args, **kwargs):
      '''
dragMoveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dropSignal (self, *args, **kwargs):
      '''
dropSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dropSignal(GafferUI::Gadget {lvalue})'''
    ...
    def editablePlugs (self, *args, **kwargs):
      '''
editablePlugs( (AnimationGadget)arg1) -> object :

    C++ signature :
        Gaffer::StandardSet* editablePlugs(GafferUI::AnimationGadget {lvalue})'''
    ...
    def enabled (self, *args, **kwargs):
      '''
enabled( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool enabled(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def enterSignal (self, *args, **kwargs):
      '''
enterSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} enterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def fullTransform (self, *args, **kwargs):
      '''
fullTransform( (Gadget)arg1 [, (Gadget)arg2]) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> fullTransform(GafferUI::Gadget {lvalue} [,GafferUI::Gadget const*])'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getEnabled (self, *args, **kwargs):
      '''
getEnabled( (Gadget)arg1) -> bool :

    C++ signature :
        bool getEnabled(GafferUI::Gadget {lvalue})'''
    ...
    def getHighlighted (self, *args, **kwargs):
      '''
getHighlighted( (Gadget)arg1) -> bool :

    C++ signature :
        bool getHighlighted(GafferUI::Gadget {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getStyle (self, *args, **kwargs):
      '''
getStyle( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> getStyle(GafferUI::Gadget {lvalue})'''
    ...
    def getToolTip (self, *args, **kwargs):
      '''
getToolTip( (AnimationGadget)arg1, (LineSegment3f)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > getToolTip(GafferUI::AnimationGadget,IECore::LineSegment<Imath_3_1::Vec3<float> >)'''
    ...
    def getTransform (self, *args, **kwargs):
      '''
getTransform( (Gadget)arg1) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> getTransform(GafferUI::Gadget {lvalue})'''
    ...
    def getVisible (self, *args, **kwargs):
      '''
getVisible( (Gadget)arg1) -> bool :

    C++ signature :
        bool getVisible(GafferUI::Gadget {lvalue})'''
    ...
    def idleSignal (self, *args, **kwargs):
      '''
idleSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} idleSignal()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (AnimationGadget)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::AnimationGadget {lvalue},IECore::TypeId)

isInstanceOf( (AnimationGadget)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::AnimationGadget {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keyPressSignal (self, *args, **kwargs):
      '''
keyPressSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keyReleaseSignal (self, *args, **kwargs):
      '''
keyReleaseSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def leaveSignal (self, *args, **kwargs):
      '''
leaveSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} leaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def mouseMoveSignal (self, *args, **kwargs):
      '''
mouseMoveSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} mouseMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def onTimeAxis (self, *args, **kwargs):
      '''
onTimeAxis( (AnimationGadget)arg1, (LineSegment3f)arg2) -> bool :

    C++ signature :
        bool onTimeAxis(GafferUI::AnimationGadget {lvalue},IECore::LineSegment<Imath_3_1::Vec3<float> >)'''
    ...
    def onValueAxis (self, *args, **kwargs):
      '''
onValueAxis( (AnimationGadget)arg1, (LineSegment3f)arg2) -> bool :

    C++ signature :
        bool onValueAxis(GafferUI::AnimationGadget {lvalue},IECore::LineSegment<Imath_3_1::Vec3<float> >)'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def selectedKeys (self, *args, **kwargs):
      '''
selectedKeys( (AnimationGadget)arg1) -> object :

    C++ signature :
        Gaffer::Set* selectedKeys(GafferUI::AnimationGadget {lvalue})'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setContext (self, *args, **kwargs):
      '''
setContext( (AnimationGadget)arg1, (Context)arg2) -> None :

    C++ signature :
        void setContext(GafferUI::AnimationGadget {lvalue},Gaffer::Context*)'''
    ...
    def setEnabled (self, *args, **kwargs):
      '''
setEnabled( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnabled(GafferUI::Gadget {lvalue},bool)'''
    ...
    def setHighlighted (self, *args, **kwargs):
      '''
setHighlighted( (AnimationGadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHighlighted(GafferUI::AnimationGadget {lvalue},bool)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setStyle (self, *args, **kwargs):
      '''
setStyle( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setStyle(GafferUI::Gadget {lvalue},boost::intrusive_ptr<GafferUI::Style const>)'''
    ...
    def setToolTip (self, *args, **kwargs):
      '''
setToolTip( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setToolTip(GafferUI::Gadget {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def setTransform (self, *args, **kwargs):
      '''
setTransform( (Gadget)arg1, (M44f)arg2) -> None :

    C++ signature :
        void setTransform(GafferUI::Gadget {lvalue},Imath_3_1::Matrix44<float>)'''
    ...
    def setVisible (self, *args, **kwargs):
      '''
setVisible( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setVisible(GafferUI::Gadget {lvalue},bool)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def style (self, *args, **kwargs):
      '''
style( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> style(GafferUI::Gadget {lvalue})'''
    ...
    def transformedBound (self, *args, **kwargs):
      '''
transformedBound( (Gadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue})

transformedBound( (Gadget)arg1, (Gadget)arg2) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue},GafferUI::Gadget const*)'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (AnimationGadget)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(GafferUI::AnimationGadget {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (AnimationGadget)arg1) -> str :

    C++ signature :
        char const* typeName(GafferUI::AnimationGadget {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...
    def visibilityChangedSignal (self, *args, **kwargs):
      '''
visibilityChangedSignal( (Gadget)arg1) -> VisibilityChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} visibilityChangedSignal(GafferUI::Gadget {lvalue})'''
    ...
    def visible (self, *args, **kwargs):
      '''
visible( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool visible(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def visiblePlugs (self, *args, **kwargs):
      '''
visiblePlugs( (AnimationGadget)arg1) -> object :

    C++ signature :
        Gaffer::StandardSet* visiblePlugs(GafferUI::AnimationGadget {lvalue})'''
    ...
    def wheelSignal (self, *args, **kwargs):
      '''
wheelSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} wheelSignal(GafferUI::Gadget {lvalue})'''
    ...

def AnimationUI (*args):
      '''

'''      
    ...

def AnnotationsGadget (*args):
      '''

'''      
    ...

class AnnotationsGadget:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ButtonSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DirtyType (self, *args, **kwargs):
      '''None'''
    ...
    def DragBeginSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DragDropSignal (self, *args, **kwargs):
      '''None'''
    ...
    def EnterLeaveSignal (self, *args, **kwargs):
      '''None'''
    ...
    def IdleSignal (self, *args, **kwargs):
      '''None'''
    ...
    def KeySignal (self, *args, **kwargs):
      '''None'''
    ...
    def Layer (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def RenderReason (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def VisibilityChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _dirty (self, *args, **kwargs):
      '''
_dirty( (Gadget)arg1, (DirtyType)arg2) -> None :

    C++ signature :
        void _dirty(GafferUI::Gadget {lvalue},GafferUI::Gadget::DirtyType)'''
    ...
    def _idleSignalAccessedSignal (self, *args, **kwargs):
      '''
_idleSignalAccessedSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} _idleSignalAccessedSignal()'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (AnnotationsGadget)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(GafferUI::AnnotationsGadget,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (AnnotationsGadget)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(GafferUI::AnnotationsGadget,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def bound (self, *args, **kwargs):
      '''
bound( (AnnotationsGadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > bound(GafferUI::AnnotationsGadget)'''
    ...
    def buttonDoubleClickSignal (self, *args, **kwargs):
      '''
buttonDoubleClickSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonDoubleClickSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonPressSignal (self, *args, **kwargs):
      '''
buttonPressSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonReleaseSignal (self, *args, **kwargs):
      '''
buttonReleaseSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def dragBeginSignal (self, *args, **kwargs):
      '''
dragBeginSignal( (Gadget)arg1) -> DragBeginSignal :

    C++ signature :
        Gaffer::Signals::Signal<boost::intrusive_ptr<IECore::RunTimeTyped> (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<boost::intrusive_ptr<IECore::RunTimeTyped> > > {lvalue} dragBeginSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEndSignal (self, *args, **kwargs):
      '''
dragEndSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEndSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEnterSignal (self, *args, **kwargs):
      '''
dragEnterSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEnterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragLeaveSignal (self, *args, **kwargs):
      '''
dragLeaveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragLeaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragMoveSignal (self, *args, **kwargs):
      '''
dragMoveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dropSignal (self, *args, **kwargs):
      '''
dropSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dropSignal(GafferUI::Gadget {lvalue})'''
    ...
    def enabled (self, *args, **kwargs):
      '''
enabled( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool enabled(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def enterSignal (self, *args, **kwargs):
      '''
enterSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} enterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def fullTransform (self, *args, **kwargs):
      '''
fullTransform( (Gadget)arg1 [, (Gadget)arg2]) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> fullTransform(GafferUI::Gadget {lvalue} [,GafferUI::Gadget const*])'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getEnabled (self, *args, **kwargs):
      '''
getEnabled( (Gadget)arg1) -> bool :

    C++ signature :
        bool getEnabled(GafferUI::Gadget {lvalue})'''
    ...
    def getHighlighted (self, *args, **kwargs):
      '''
getHighlighted( (Gadget)arg1) -> bool :

    C++ signature :
        bool getHighlighted(GafferUI::Gadget {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getStyle (self, *args, **kwargs):
      '''
getStyle( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> getStyle(GafferUI::Gadget {lvalue})'''
    ...
    def getToolTip (self, *args, **kwargs):
      '''
getToolTip( (AnnotationsGadget)arg1, (LineSegment3f)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > getToolTip(GafferUI::AnnotationsGadget,IECore::LineSegment<Imath_3_1::Vec3<float> >)'''
    ...
    def getTransform (self, *args, **kwargs):
      '''
getTransform( (Gadget)arg1) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> getTransform(GafferUI::Gadget {lvalue})'''
    ...
    def getVisible (self, *args, **kwargs):
      '''
getVisible( (Gadget)arg1) -> bool :

    C++ signature :
        bool getVisible(GafferUI::Gadget {lvalue})'''
    ...
    def getVisibleAnnotations (self, *args, **kwargs):
      '''
getVisibleAnnotations( (AnnotationsGadget)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > getVisibleAnnotations(GafferUI::AnnotationsGadget {lvalue})'''
    ...
    def idleSignal (self, *args, **kwargs):
      '''
idleSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} idleSignal()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (AnnotationsGadget)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::AnnotationsGadget {lvalue},IECore::TypeId)

isInstanceOf( (AnnotationsGadget)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::AnnotationsGadget {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keyPressSignal (self, *args, **kwargs):
      '''
keyPressSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keyReleaseSignal (self, *args, **kwargs):
      '''
keyReleaseSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def leaveSignal (self, *args, **kwargs):
      '''
leaveSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} leaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def mouseMoveSignal (self, *args, **kwargs):
      '''
mouseMoveSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} mouseMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setEnabled (self, *args, **kwargs):
      '''
setEnabled( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnabled(GafferUI::Gadget {lvalue},bool)'''
    ...
    def setHighlighted (self, *args, **kwargs):
      '''
setHighlighted( (AnnotationsGadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHighlighted(GafferUI::AnnotationsGadget {lvalue},bool)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setStyle (self, *args, **kwargs):
      '''
setStyle( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setStyle(GafferUI::Gadget {lvalue},boost::intrusive_ptr<GafferUI::Style const>)'''
    ...
    def setToolTip (self, *args, **kwargs):
      '''
setToolTip( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setToolTip(GafferUI::Gadget {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def setTransform (self, *args, **kwargs):
      '''
setTransform( (Gadget)arg1, (M44f)arg2) -> None :

    C++ signature :
        void setTransform(GafferUI::Gadget {lvalue},Imath_3_1::Matrix44<float>)'''
    ...
    def setVisible (self, *args, **kwargs):
      '''
setVisible( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setVisible(GafferUI::Gadget {lvalue},bool)'''
    ...
    def setVisibleAnnotations (self, *args, **kwargs):
      '''
setVisibleAnnotations( (AnnotationsGadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setVisibleAnnotations(GafferUI::AnnotationsGadget {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def style (self, *args, **kwargs):
      '''
style( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> style(GafferUI::Gadget {lvalue})'''
    ...
    def transformedBound (self, *args, **kwargs):
      '''
transformedBound( (Gadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue})

transformedBound( (Gadget)arg1, (Gadget)arg2) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue},GafferUI::Gadget const*)'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (AnnotationsGadget)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(GafferUI::AnnotationsGadget {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (AnnotationsGadget)arg1) -> str :

    C++ signature :
        char const* typeName(GafferUI::AnnotationsGadget {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def untemplatedAnnotations (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...
    def visibilityChangedSignal (self, *args, **kwargs):
      '''
visibilityChangedSignal( (Gadget)arg1) -> VisibilityChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} visibilityChangedSignal(GafferUI::Gadget {lvalue})'''
    ...
    def visible (self, *args, **kwargs):
      '''
visible( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool visible(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def wheelSignal (self, *args, **kwargs):
      '''
wheelSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} wheelSignal(GafferUI::Gadget {lvalue})'''
    ...

def AnnotationsUI (*args):
      '''

'''      
    ...

def ApplicationMenu (*args):
      '''

'''      
    ...

def AuxiliaryConnectionsGadget (*args):
      '''

'''      
    ...

class AuxiliaryConnectionsGadget:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ButtonSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DirtyType (self, *args, **kwargs):
      '''None'''
    ...
    def DragBeginSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DragDropSignal (self, *args, **kwargs):
      '''None'''
    ...
    def EnterLeaveSignal (self, *args, **kwargs):
      '''None'''
    ...
    def IdleSignal (self, *args, **kwargs):
      '''None'''
    ...
    def KeySignal (self, *args, **kwargs):
      '''None'''
    ...
    def Layer (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def RenderReason (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def VisibilityChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _dirty (self, *args, **kwargs):
      '''
_dirty( (Gadget)arg1, (DirtyType)arg2) -> None :

    C++ signature :
        void _dirty(GafferUI::Gadget {lvalue},GafferUI::Gadget::DirtyType)'''
    ...
    def _idleSignalAccessedSignal (self, *args, **kwargs):
      '''
_idleSignalAccessedSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} _idleSignalAccessedSignal()'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (AuxiliaryConnectionsGadget)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(GafferUI::AuxiliaryConnectionsGadget,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (AuxiliaryConnectionsGadget)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(GafferUI::AuxiliaryConnectionsGadget,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def bound (self, *args, **kwargs):
      '''
bound( (AuxiliaryConnectionsGadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > bound(GafferUI::AuxiliaryConnectionsGadget)'''
    ...
    def buttonDoubleClickSignal (self, *args, **kwargs):
      '''
buttonDoubleClickSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonDoubleClickSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonPressSignal (self, *args, **kwargs):
      '''
buttonPressSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonReleaseSignal (self, *args, **kwargs):
      '''
buttonReleaseSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def connectionAt (self, *args, **kwargs):
      '''
connectionAt( (AuxiliaryConnectionsGadget)arg1, (LineSegment3f)arg2) -> tuple :

    C++ signature :
        boost::python::tuple connectionAt(GafferUI::AuxiliaryConnectionsGadget {lvalue},IECore::LineSegment<Imath_3_1::Vec3<float> >)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def dragBeginSignal (self, *args, **kwargs):
      '''
dragBeginSignal( (Gadget)arg1) -> DragBeginSignal :

    C++ signature :
        Gaffer::Signals::Signal<boost::intrusive_ptr<IECore::RunTimeTyped> (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<boost::intrusive_ptr<IECore::RunTimeTyped> > > {lvalue} dragBeginSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEndSignal (self, *args, **kwargs):
      '''
dragEndSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEndSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEnterSignal (self, *args, **kwargs):
      '''
dragEnterSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEnterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragLeaveSignal (self, *args, **kwargs):
      '''
dragLeaveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragLeaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragMoveSignal (self, *args, **kwargs):
      '''
dragMoveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dropSignal (self, *args, **kwargs):
      '''
dropSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dropSignal(GafferUI::Gadget {lvalue})'''
    ...
    def enabled (self, *args, **kwargs):
      '''
enabled( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool enabled(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def enterSignal (self, *args, **kwargs):
      '''
enterSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} enterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def fullTransform (self, *args, **kwargs):
      '''
fullTransform( (Gadget)arg1 [, (Gadget)arg2]) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> fullTransform(GafferUI::Gadget {lvalue} [,GafferUI::Gadget const*])'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getEnabled (self, *args, **kwargs):
      '''
getEnabled( (Gadget)arg1) -> bool :

    C++ signature :
        bool getEnabled(GafferUI::Gadget {lvalue})'''
    ...
    def getHighlighted (self, *args, **kwargs):
      '''
getHighlighted( (Gadget)arg1) -> bool :

    C++ signature :
        bool getHighlighted(GafferUI::Gadget {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getStyle (self, *args, **kwargs):
      '''
getStyle( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> getStyle(GafferUI::Gadget {lvalue})'''
    ...
    def getToolTip (self, *args, **kwargs):
      '''
getToolTip( (AuxiliaryConnectionsGadget)arg1, (LineSegment3f)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > getToolTip(GafferUI::AuxiliaryConnectionsGadget,IECore::LineSegment<Imath_3_1::Vec3<float> >)'''
    ...
    def getTransform (self, *args, **kwargs):
      '''
getTransform( (Gadget)arg1) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> getTransform(GafferUI::Gadget {lvalue})'''
    ...
    def getVisible (self, *args, **kwargs):
      '''
getVisible( (Gadget)arg1) -> bool :

    C++ signature :
        bool getVisible(GafferUI::Gadget {lvalue})'''
    ...
    def hasConnection (self, *args, **kwargs):
      '''
hasConnection( (AuxiliaryConnectionsGadget)arg1, (Gadget)arg2, (Gadget)arg3) -> bool :

    C++ signature :
        bool hasConnection(GafferUI::AuxiliaryConnectionsGadget {lvalue},GafferUI::Gadget const*,GafferUI::Gadget const*)

hasConnection( (AuxiliaryConnectionsGadget)arg1, (Node)arg2, (Node)arg3) -> bool :

    C++ signature :
        bool hasConnection(GafferUI::AuxiliaryConnectionsGadget {lvalue},Gaffer::Node const*,Gaffer::Node const*)'''
    ...
    def idleSignal (self, *args, **kwargs):
      '''
idleSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} idleSignal()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (AuxiliaryConnectionsGadget)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::AuxiliaryConnectionsGadget {lvalue},IECore::TypeId)

isInstanceOf( (AuxiliaryConnectionsGadget)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::AuxiliaryConnectionsGadget {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keyPressSignal (self, *args, **kwargs):
      '''
keyPressSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keyReleaseSignal (self, *args, **kwargs):
      '''
keyReleaseSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def leaveSignal (self, *args, **kwargs):
      '''
leaveSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} leaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def mouseMoveSignal (self, *args, **kwargs):
      '''
mouseMoveSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} mouseMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setEnabled (self, *args, **kwargs):
      '''
setEnabled( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnabled(GafferUI::Gadget {lvalue},bool)'''
    ...
    def setHighlighted (self, *args, **kwargs):
      '''
setHighlighted( (AuxiliaryConnectionsGadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHighlighted(GafferUI::AuxiliaryConnectionsGadget {lvalue},bool)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setStyle (self, *args, **kwargs):
      '''
setStyle( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setStyle(GafferUI::Gadget {lvalue},boost::intrusive_ptr<GafferUI::Style const>)'''
    ...
    def setToolTip (self, *args, **kwargs):
      '''
setToolTip( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setToolTip(GafferUI::Gadget {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def setTransform (self, *args, **kwargs):
      '''
setTransform( (Gadget)arg1, (M44f)arg2) -> None :

    C++ signature :
        void setTransform(GafferUI::Gadget {lvalue},Imath_3_1::Matrix44<float>)'''
    ...
    def setVisible (self, *args, **kwargs):
      '''
setVisible( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setVisible(GafferUI::Gadget {lvalue},bool)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def style (self, *args, **kwargs):
      '''
style( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> style(GafferUI::Gadget {lvalue})'''
    ...
    def transformedBound (self, *args, **kwargs):
      '''
transformedBound( (Gadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue})

transformedBound( (Gadget)arg1, (Gadget)arg2) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue},GafferUI::Gadget const*)'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (AuxiliaryConnectionsGadget)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(GafferUI::AuxiliaryConnectionsGadget {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (AuxiliaryConnectionsGadget)arg1) -> str :

    C++ signature :
        char const* typeName(GafferUI::AuxiliaryConnectionsGadget {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...
    def visibilityChangedSignal (self, *args, **kwargs):
      '''
visibilityChangedSignal( (Gadget)arg1) -> VisibilityChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} visibilityChangedSignal(GafferUI::Gadget {lvalue})'''
    ...
    def visible (self, *args, **kwargs):
      '''
visible( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool visible(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def wheelSignal (self, *args, **kwargs):
      '''
wheelSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} wheelSignal(GafferUI::Gadget {lvalue})'''
    ...

def AuxiliaryNodeGadget (*args):
      '''
__init__(_object*, boost::intrusive_ptr<Gaffer::Node>)

'''      
    ...

class AuxiliaryNodeGadget:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ButtonSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DirtyType (self, *args, **kwargs):
      '''None'''
    ...
    def DragBeginSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DragDropSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Edge (self, *args, **kwargs):
      '''None'''
    ...
    def EnterLeaveSignal (self, *args, **kwargs):
      '''None'''
    ...
    def IdleSignal (self, *args, **kwargs):
      '''None'''
    ...
    def KeySignal (self, *args, **kwargs):
      '''None'''
    ...
    def Layer (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def RenderReason (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def VisibilityChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _dirty (self, *args, **kwargs):
      '''
_dirty( (Gadget)arg1, (DirtyType)arg2) -> None :

    C++ signature :
        void _dirty(GafferUI::Gadget {lvalue},GafferUI::Gadget::DirtyType)'''
    ...
    def _idleSignalAccessedSignal (self, *args, **kwargs):
      '''
_idleSignalAccessedSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} _idleSignalAccessedSignal()'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (AuxiliaryNodeGadget)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(GafferUI::AuxiliaryNodeGadget,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (AuxiliaryNodeGadget)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(GafferUI::AuxiliaryNodeGadget,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def bound (self, *args, **kwargs):
      '''
bound( (AuxiliaryNodeGadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > bound(GafferUI::AuxiliaryNodeGadget)'''
    ...
    def buttonDoubleClickSignal (self, *args, **kwargs):
      '''
buttonDoubleClickSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonDoubleClickSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonPressSignal (self, *args, **kwargs):
      '''
buttonPressSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonReleaseSignal (self, *args, **kwargs):
      '''
buttonReleaseSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def connectionTangent (self, *args, **kwargs):
      '''
connectionTangent( (AuxiliaryNodeGadget)arg1, (ConnectionCreator)arg2) -> V3f :

    C++ signature :
        Imath_3_1::Vec3<float> connectionTangent(GafferUI::AuxiliaryNodeGadget {lvalue},GafferUI::ConnectionCreator const*)'''
    ...
    def create (self, *args, **kwargs):
      '''
create( (object)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::NodeGadget> create(boost::intrusive_ptr<Gaffer::Node>)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def dragBeginSignal (self, *args, **kwargs):
      '''
dragBeginSignal( (Gadget)arg1) -> DragBeginSignal :

    C++ signature :
        Gaffer::Signals::Signal<boost::intrusive_ptr<IECore::RunTimeTyped> (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<boost::intrusive_ptr<IECore::RunTimeTyped> > > {lvalue} dragBeginSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEndSignal (self, *args, **kwargs):
      '''
dragEndSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEndSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEnterSignal (self, *args, **kwargs):
      '''
dragEnterSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEnterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragLeaveSignal (self, *args, **kwargs):
      '''
dragLeaveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragLeaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragMoveSignal (self, *args, **kwargs):
      '''
dragMoveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dropSignal (self, *args, **kwargs):
      '''
dropSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dropSignal(GafferUI::Gadget {lvalue})'''
    ...
    def enabled (self, *args, **kwargs):
      '''
enabled( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool enabled(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def enterSignal (self, *args, **kwargs):
      '''
enterSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} enterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def fullTransform (self, *args, **kwargs):
      '''
fullTransform( (Gadget)arg1 [, (Gadget)arg2]) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> fullTransform(GafferUI::Gadget {lvalue} [,GafferUI::Gadget const*])'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getContents (self, *args, **kwargs):
      '''
getContents( (StandardNodeGadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Gadget> getContents(GafferUI::StandardNodeGadget {lvalue})'''
    ...
    def getEdgeGadget (self, *args, **kwargs):
      '''
getEdgeGadget( (StandardNodeGadget)arg1, (Edge)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Gadget> getEdgeGadget(GafferUI::StandardNodeGadget {lvalue},GafferUI::StandardNodeGadget::Edge)'''
    ...
    def getEnabled (self, *args, **kwargs):
      '''
getEnabled( (Gadget)arg1) -> bool :

    C++ signature :
        bool getEnabled(GafferUI::Gadget {lvalue})'''
    ...
    def getHighlighted (self, *args, **kwargs):
      '''
getHighlighted( (Gadget)arg1) -> bool :

    C++ signature :
        bool getHighlighted(GafferUI::Gadget {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getStyle (self, *args, **kwargs):
      '''
getStyle( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> getStyle(GafferUI::Gadget {lvalue})'''
    ...
    def getToolTip (self, *args, **kwargs):
      '''
getToolTip( (AuxiliaryNodeGadget)arg1, (LineSegment3f)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > getToolTip(GafferUI::AuxiliaryNodeGadget,IECore::LineSegment<Imath_3_1::Vec3<float> >)'''
    ...
    def getTransform (self, *args, **kwargs):
      '''
getTransform( (Gadget)arg1) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> getTransform(GafferUI::Gadget {lvalue})'''
    ...
    def getVisible (self, *args, **kwargs):
      '''
getVisible( (Gadget)arg1) -> bool :

    C++ signature :
        bool getVisible(GafferUI::Gadget {lvalue})'''
    ...
    def idleSignal (self, *args, **kwargs):
      '''
idleSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} idleSignal()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (AuxiliaryNodeGadget)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::AuxiliaryNodeGadget {lvalue},IECore::TypeId)

isInstanceOf( (AuxiliaryNodeGadget)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::AuxiliaryNodeGadget {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keyPressSignal (self, *args, **kwargs):
      '''
keyPressSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keyReleaseSignal (self, *args, **kwargs):
      '''
keyReleaseSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def leaveSignal (self, *args, **kwargs):
      '''
leaveSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} leaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def mouseMoveSignal (self, *args, **kwargs):
      '''
mouseMoveSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} mouseMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (NodeGadget)arg1) -> object :

    C++ signature :
        Gaffer::Node* node(GafferUI::NodeGadget {lvalue})'''
    ...
    def nodule (self, *args, **kwargs):
      '''
nodule( (AuxiliaryNodeGadget)arg1, (Plug)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Nodule> nodule(GafferUI::AuxiliaryNodeGadget {lvalue},Gaffer::Plug const*)'''
    ...
    def noduleAddedSignal (self, *args, **kwargs):
      '''
noduleAddedSignal( (NodeGadget)arg1) -> NoduleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::NodeGadget*, GafferUI::Nodule*), Gaffer::Signals::DefaultCombiner<void> > {lvalue} noduleAddedSignal(GafferUI::NodeGadget {lvalue})'''
    ...
    def noduleRemovedSignal (self, *args, **kwargs):
      '''
noduleRemovedSignal( (NodeGadget)arg1) -> NoduleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::NodeGadget*, GafferUI::Nodule*), Gaffer::Signals::DefaultCombiner<void> > {lvalue} noduleRemovedSignal(GafferUI::NodeGadget {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerNodeGadget (self, *args, **kwargs):
      '''
registerNodeGadget( (TypeId)arg1, (object)arg2) -> None :

    C++ signature :
        void registerNodeGadget(IECore::TypeId,boost::python::api::object)

registerNodeGadget( (object)nodeGadgetType, (object)creator [, (TypeId)nodeType=IECore._IECore.TypeId.Invalid]) -> None :

    C++ signature :
        void registerNodeGadget(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,boost::python::api::object [,IECore::TypeId=IECore._IECore.TypeId.Invalid])'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setContents (self, *args, **kwargs):
      '''
setContents( (StandardNodeGadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setContents(GafferUI::StandardNodeGadget {lvalue},boost::intrusive_ptr<GafferUI::Gadget>)'''
    ...
    def setEdgeGadget (self, *args, **kwargs):
      '''
setEdgeGadget( (StandardNodeGadget)arg1, (Edge)arg2, (object)arg3) -> None :

    C++ signature :
        void setEdgeGadget(GafferUI::StandardNodeGadget {lvalue},GafferUI::StandardNodeGadget::Edge,boost::intrusive_ptr<GafferUI::Gadget>)'''
    ...
    def setEnabled (self, *args, **kwargs):
      '''
setEnabled( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnabled(GafferUI::Gadget {lvalue},bool)'''
    ...
    def setHighlighted (self, *args, **kwargs):
      '''
setHighlighted( (AuxiliaryNodeGadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHighlighted(GafferUI::AuxiliaryNodeGadget {lvalue},bool)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setStyle (self, *args, **kwargs):
      '''
setStyle( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setStyle(GafferUI::Gadget {lvalue},boost::intrusive_ptr<GafferUI::Style const>)'''
    ...
    def setToolTip (self, *args, **kwargs):
      '''
setToolTip( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setToolTip(GafferUI::Gadget {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def setTransform (self, *args, **kwargs):
      '''
setTransform( (Gadget)arg1, (M44f)arg2) -> None :

    C++ signature :
        void setTransform(GafferUI::Gadget {lvalue},Imath_3_1::Matrix44<float>)'''
    ...
    def setVisible (self, *args, **kwargs):
      '''
setVisible( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setVisible(GafferUI::Gadget {lvalue},bool)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def style (self, *args, **kwargs):
      '''
style( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> style(GafferUI::Gadget {lvalue})'''
    ...
    def transformedBound (self, *args, **kwargs):
      '''
transformedBound( (Gadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue})

transformedBound( (Gadget)arg1, (Gadget)arg2) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue},GafferUI::Gadget const*)'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (AuxiliaryNodeGadget)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(GafferUI::AuxiliaryNodeGadget {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (AuxiliaryNodeGadget)arg1) -> str :

    C++ signature :
        char const* typeName(GafferUI::AuxiliaryNodeGadget {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...
    def visibilityChangedSignal (self, *args, **kwargs):
      '''
visibilityChangedSignal( (Gadget)arg1) -> VisibilityChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} visibilityChangedSignal(GafferUI::Gadget {lvalue})'''
    ...
    def visible (self, *args, **kwargs):
      '''
visible( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool visible(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def wheelSignal (self, *args, **kwargs):
      '''
wheelSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} wheelSignal(GafferUI::Gadget {lvalue})'''
    ...

def BackdropNodeGadget (*args):
      '''
__init__(_object*, boost::intrusive_ptr<Gaffer::Node>)

'''      
    ...

class BackdropNodeGadget:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ButtonSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DirtyType (self, *args, **kwargs):
      '''None'''
    ...
    def DragBeginSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DragDropSignal (self, *args, **kwargs):
      '''None'''
    ...
    def EnterLeaveSignal (self, *args, **kwargs):
      '''None'''
    ...
    def IdleSignal (self, *args, **kwargs):
      '''None'''
    ...
    def KeySignal (self, *args, **kwargs):
      '''None'''
    ...
    def Layer (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def RenderReason (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def VisibilityChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _dirty (self, *args, **kwargs):
      '''
_dirty( (Gadget)arg1, (DirtyType)arg2) -> None :

    C++ signature :
        void _dirty(GafferUI::Gadget {lvalue},GafferUI::Gadget::DirtyType)'''
    ...
    def _idleSignalAccessedSignal (self, *args, **kwargs):
      '''
_idleSignalAccessedSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} _idleSignalAccessedSignal()'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (BackdropNodeGadget)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(GafferUI::BackdropNodeGadget,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (BackdropNodeGadget)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(GafferUI::BackdropNodeGadget,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def bound (self, *args, **kwargs):
      '''
bound( (BackdropNodeGadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > bound(GafferUI::BackdropNodeGadget)'''
    ...
    def buttonDoubleClickSignal (self, *args, **kwargs):
      '''
buttonDoubleClickSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonDoubleClickSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonPressSignal (self, *args, **kwargs):
      '''
buttonPressSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonReleaseSignal (self, *args, **kwargs):
      '''
buttonReleaseSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def connectionTangent (self, *args, **kwargs):
      '''
connectionTangent( (BackdropNodeGadget)arg1, (ConnectionCreator)arg2) -> V3f :

    C++ signature :
        Imath_3_1::Vec3<float> connectionTangent(GafferUI::BackdropNodeGadget {lvalue},GafferUI::ConnectionCreator const*)'''
    ...
    def create (self, *args, **kwargs):
      '''
create( (object)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::NodeGadget> create(boost::intrusive_ptr<Gaffer::Node>)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def dragBeginSignal (self, *args, **kwargs):
      '''
dragBeginSignal( (Gadget)arg1) -> DragBeginSignal :

    C++ signature :
        Gaffer::Signals::Signal<boost::intrusive_ptr<IECore::RunTimeTyped> (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<boost::intrusive_ptr<IECore::RunTimeTyped> > > {lvalue} dragBeginSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEndSignal (self, *args, **kwargs):
      '''
dragEndSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEndSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEnterSignal (self, *args, **kwargs):
      '''
dragEnterSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEnterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragLeaveSignal (self, *args, **kwargs):
      '''
dragLeaveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragLeaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragMoveSignal (self, *args, **kwargs):
      '''
dragMoveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dropSignal (self, *args, **kwargs):
      '''
dropSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dropSignal(GafferUI::Gadget {lvalue})'''
    ...
    def enabled (self, *args, **kwargs):
      '''
enabled( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool enabled(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def enterSignal (self, *args, **kwargs):
      '''
enterSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} enterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def frame (self, *args, **kwargs):
      '''
frame( (BackdropNodeGadget)arg1, (object)arg2) -> None :

    C++ signature :
        void frame(GafferUI::BackdropNodeGadget {lvalue},boost::python::api::object)'''
    ...
    def framed (self, *args, **kwargs):
      '''
framed( (BackdropNodeGadget)arg1) -> list :

    C++ signature :
        boost::python::list framed(GafferUI::BackdropNodeGadget {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def fullTransform (self, *args, **kwargs):
      '''
fullTransform( (Gadget)arg1 [, (Gadget)arg2]) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> fullTransform(GafferUI::Gadget {lvalue} [,GafferUI::Gadget const*])'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getBound (self, *args, **kwargs):
      '''
getBound( (BackdropNodeGadget)arg1) -> Box2f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec2<float> > getBound(GafferUI::BackdropNodeGadget {lvalue})'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getEnabled (self, *args, **kwargs):
      '''
getEnabled( (Gadget)arg1) -> bool :

    C++ signature :
        bool getEnabled(GafferUI::Gadget {lvalue})'''
    ...
    def getHighlighted (self, *args, **kwargs):
      '''
getHighlighted( (Gadget)arg1) -> bool :

    C++ signature :
        bool getHighlighted(GafferUI::Gadget {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getStyle (self, *args, **kwargs):
      '''
getStyle( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> getStyle(GafferUI::Gadget {lvalue})'''
    ...
    def getToolTip (self, *args, **kwargs):
      '''
getToolTip( (BackdropNodeGadget)arg1, (LineSegment3f)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > getToolTip(GafferUI::BackdropNodeGadget,IECore::LineSegment<Imath_3_1::Vec3<float> >)'''
    ...
    def getTransform (self, *args, **kwargs):
      '''
getTransform( (Gadget)arg1) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> getTransform(GafferUI::Gadget {lvalue})'''
    ...
    def getVisible (self, *args, **kwargs):
      '''
getVisible( (Gadget)arg1) -> bool :

    C++ signature :
        bool getVisible(GafferUI::Gadget {lvalue})'''
    ...
    def idleSignal (self, *args, **kwargs):
      '''
idleSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} idleSignal()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (BackdropNodeGadget)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::BackdropNodeGadget {lvalue},IECore::TypeId)

isInstanceOf( (BackdropNodeGadget)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::BackdropNodeGadget {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keyPressSignal (self, *args, **kwargs):
      '''
keyPressSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keyReleaseSignal (self, *args, **kwargs):
      '''
keyReleaseSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def leaveSignal (self, *args, **kwargs):
      '''
leaveSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} leaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def mouseMoveSignal (self, *args, **kwargs):
      '''
mouseMoveSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} mouseMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (NodeGadget)arg1) -> object :

    C++ signature :
        Gaffer::Node* node(GafferUI::NodeGadget {lvalue})'''
    ...
    def nodule (self, *args, **kwargs):
      '''
nodule( (BackdropNodeGadget)arg1, (Plug)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Nodule> nodule(GafferUI::BackdropNodeGadget {lvalue},Gaffer::Plug const*)'''
    ...
    def noduleAddedSignal (self, *args, **kwargs):
      '''
noduleAddedSignal( (NodeGadget)arg1) -> NoduleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::NodeGadget*, GafferUI::Nodule*), Gaffer::Signals::DefaultCombiner<void> > {lvalue} noduleAddedSignal(GafferUI::NodeGadget {lvalue})'''
    ...
    def noduleRemovedSignal (self, *args, **kwargs):
      '''
noduleRemovedSignal( (NodeGadget)arg1) -> NoduleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::NodeGadget*, GafferUI::Nodule*), Gaffer::Signals::DefaultCombiner<void> > {lvalue} noduleRemovedSignal(GafferUI::NodeGadget {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerNodeGadget (self, *args, **kwargs):
      '''
registerNodeGadget( (TypeId)arg1, (object)arg2) -> None :

    C++ signature :
        void registerNodeGadget(IECore::TypeId,boost::python::api::object)

registerNodeGadget( (object)nodeGadgetType, (object)creator [, (TypeId)nodeType=IECore._IECore.TypeId.Invalid]) -> None :

    C++ signature :
        void registerNodeGadget(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,boost::python::api::object [,IECore::TypeId=IECore._IECore.TypeId.Invalid])'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def setBound (self, *args, **kwargs):
      '''
setBound( (BackdropNodeGadget)arg1, (Box2f)arg2) -> None :

    C++ signature :
        void setBound(GafferUI::BackdropNodeGadget {lvalue},Imath_3_1::Box<Imath_3_1::Vec2<float> >)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setEnabled (self, *args, **kwargs):
      '''
setEnabled( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnabled(GafferUI::Gadget {lvalue},bool)'''
    ...
    def setHighlighted (self, *args, **kwargs):
      '''
setHighlighted( (BackdropNodeGadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHighlighted(GafferUI::BackdropNodeGadget {lvalue},bool)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setStyle (self, *args, **kwargs):
      '''
setStyle( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setStyle(GafferUI::Gadget {lvalue},boost::intrusive_ptr<GafferUI::Style const>)'''
    ...
    def setToolTip (self, *args, **kwargs):
      '''
setToolTip( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setToolTip(GafferUI::Gadget {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def setTransform (self, *args, **kwargs):
      '''
setTransform( (Gadget)arg1, (M44f)arg2) -> None :

    C++ signature :
        void setTransform(GafferUI::Gadget {lvalue},Imath_3_1::Matrix44<float>)'''
    ...
    def setVisible (self, *args, **kwargs):
      '''
setVisible( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setVisible(GafferUI::Gadget {lvalue},bool)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def style (self, *args, **kwargs):
      '''
style( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> style(GafferUI::Gadget {lvalue})'''
    ...
    def transformedBound (self, *args, **kwargs):
      '''
transformedBound( (Gadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue})

transformedBound( (Gadget)arg1, (Gadget)arg2) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue},GafferUI::Gadget const*)'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (BackdropNodeGadget)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(GafferUI::BackdropNodeGadget {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (BackdropNodeGadget)arg1) -> str :

    C++ signature :
        char const* typeName(GafferUI::BackdropNodeGadget {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...
    def visibilityChangedSignal (self, *args, **kwargs):
      '''
visibilityChangedSignal( (Gadget)arg1) -> VisibilityChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} visibilityChangedSignal(GafferUI::Gadget {lvalue})'''
    ...
    def visible (self, *args, **kwargs):
      '''
visible( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool visible(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def wheelSignal (self, *args, **kwargs):
      '''
wheelSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} wheelSignal(GafferUI::Gadget {lvalue})'''
    ...

def BackdropUI (*args):
      '''

'''      
    ...

def BackgroundMethod (*args):
      '''

'''      
    ...

class BackgroundMethod:
    def _BackgroundMethod__CurrentCall (backgroundTask, superceded):
      '''__CurrentCall(backgroundTask, superceded)'''
    ...
    def _BackgroundMethod__plug (widget):
      '''None'''
    ...
    def _BackgroundMethod__visibilityChanged (widget, method, foregroundFunction):
      '''None'''
    ...

def BackgroundTaskDialogue (*args):
      '''

'''      
    ...

class BackgroundTaskDialogue:
    def SizeMode (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def _BackgroundTaskDialogue__backgroundFunction (self, function):
      '''None'''
    ...
    def _BackgroundTaskDialogue__cancel (self):
      '''None'''
    ...
    def _BackgroundTaskDialogue__cancelClicked (self, *unused):
      '''None'''
    ...
    def _BackgroundTaskDialogue__keyPress (self, widget, event):
      '''None'''
    ...
    def _BackgroundTaskDialogue__launchBackgroundTask (self, function):
      '''None'''
    ...
    def _Dialogue__buttonClicked (self, button):
      '''None'''
    ...
    def _Dialogue__close (self, widget):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _Window__caughtKeys ():
      '''None'''
    ...
    def _Window__caughtKeysSet (self, *args, **kwargs):
      '''None'''
    ...
    def _Window__constrainToScreen (self, position):
      '''None'''
    ...
    def _Window__keyPress (self, widget, event):
      '''None'''
    ...
    def _acceptsClose (self):
      '''None'''
    ...
    def _addButton (self, textOrButton):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _getWidget (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _revealDescendant (self, descendant):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _setWidget (self, widget):
      '''None'''
    ...
    def addChild (self, child):
      '''None'''
    ...
    def addChildWindow (self, childWindow, removeOnClose=False):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childWindows (self):
      '''None'''
    ...
    def close (self):
      '''None'''
    ...
    def closedSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getChild (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getFullScreen (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getIcon (self):
      '''None'''
    ...
    def getModal (self):
      '''None'''
    ...
    def getPosition (self):
      '''None'''
    ...
    def getResizeable (self):
      '''None'''
    ...
    def getSizeMode (self):
      '''None'''
    ...
    def getTitle (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def preCloseSignal (self):
      '''None'''
    ...
    def removeChild (self, child):
      '''None'''
    ...
    def resizeToFitChild (self, shrink=True, expand=True):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setChild (self, child):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setFullScreen (self, fullScreen):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setIcon (self, imageOrImageFileName):
      '''None'''
    ...
    def setModal (self, modal, parentWindow=None):
      '''None'''
    ...
    def setPosition (self, position, forcePosition=False):
      '''None'''
    ...
    def setResizeable (self, resizeable):
      '''None'''
    ...
    def setSizeMode (self, sizeMode):
      '''None'''
    ...
    def setTitle (self, title):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def waitForBackgroundTask (self, function, parentWindow=None):
      '''None'''
    ...
    def waitForButton (self, parentWindow=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def Backups (*args):
      '''

'''      
    ...

class Backups:
    def _Backups__plugSet (self, plug):
      '''None'''
    ...
    def _Backups__potentialPaths (self, script):
      '''None'''
    ...
    def _Backups__scriptPath (self, script):
      '''None'''
    ...
    def _Backups__timeout (self):
      '''None'''
    ...
    def acquire (application, createIfNecessary=True):
      '''None'''
    ...
    def backup (self, script):
      '''None'''
    ...
    def backups (self, script):
      '''None'''
    ...
    def recoveryFile (self, script):
      '''None'''
    ...
    def settings (self):
      '''None'''
    ...

def BasicPathFilterWidget (*args):
      '''

'''      
    ...

class BasicPathFilterWidget:
    def _BasicPathFilterWidget__stateChanged (self, checkBox):
      '''None'''
    ...
    def _PathFilterWidget__pathFilterChanged (self, pathFilter):
      '''None'''
    ...
    def _PathFilterWidget__typesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _pathFilterChangedConnection (self):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromPathFilter (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (pathFilter):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def pathFilter (self):
      '''None'''
    ...
    def registerType (pathFilterClass, widgetCreationFunction):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def Bookmarks (*args):
      '''

'''      
    ...

class Bookmarks:
    def _Bookmarks__save (self):
      '''None'''
    ...
    def _Bookmarks__storage (self, category):
      '''None'''
    ...
    def acquire (target, pathType=<class 'Gaffer._Gaffer.FileSystemPath'>, category=None):
      '''None'''
    ...
    def add (self, name, path, persistent=False):
      '''None'''
    ...
    def addRecent (self, path):
      '''None'''
    ...
    def get (self, name, forWidget=None):
      '''None'''
    ...
    def getDefault (self, forWidget=None):
      '''None'''
    ...
    def names (self, persistent=None):
      '''None'''
    ...
    def recents (self):
      '''None'''
    ...
    def remove (self, name):
      '''None'''
    ...
    def removeRecent (self, path):
      '''None'''
    ...
    def setDefault (self, path):
      '''None'''
    ...

def BoolPlugValueWidget (*args):
      '''

'''      
    ...

class BoolPlugValueWidget:
    def MultiplePlugTypesError (self, *args, **kwargs):
      '''None'''
    ...
    def MultiplePlugsError (self, *args, **kwargs):
      '''None'''
    ...
    def MultipleWidgetCreatorsError (self, *args, **kwargs):
      '''None'''
    ...
    def _BoolPlugValueWidget__setPlugValues (self):
      '''None'''
    ...
    def _BoolPlugValueWidget__stateChanged (self, widget):
      '''None'''
    ...
    def _PlugValueWidget__applyPreset (self, presetName, *unused):
      '''None'''
    ...
    def _PlugValueWidget__applyReadOnly (self, readOnly):
      '''None'''
    ...
    def _PlugValueWidget__applyUserDefaults (self):
      '''None'''
    ...
    def _PlugValueWidget__auxiliaryPlugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__buttonPress (self, widget, event, buttonMask):
      '''None'''
    ...
    def _PlugValueWidget__callLegacyUpdateMethods (self):
      '''None'''
    ...
    def _PlugValueWidget__callUpdateFromValues (self):
      '''None'''
    ...
    def _PlugValueWidget__contextChanged (self, context, key):
      '''None'''
    ...
    def _PlugValueWidget__contextMenu (self, *unused):
      '''None'''
    ...
    def _PlugValueWidget__copyValue (self):
      '''None'''
    ...
    def _PlugValueWidget__creator (plug, typeMetadata):
      '''None'''
    ...
    def _PlugValueWidget__defaultContext (graphComponent):
      '''None'''
    ...
    def _PlugValueWidget__dragEnter (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__dragLeave (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__drop (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__editInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__fallbackContext (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__nodeMetadataChanged (self, nodeTypeId, key, node):
      '''None'''
    ...
    def _PlugValueWidget__plugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugInputChanged (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugMetadataChanged (self, plug, key, reason):
      '''None'''
    ...
    def _PlugValueWidget__plugTypesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _PlugValueWidget__popupMenuSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__presetsSubMenu (self):
      '''None'''
    ...
    def _PlugValueWidget__removeInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__setPlugsInternal (self, plugs, callUpdateMethods):
      '''None'''
    ...
    def _PlugValueWidget__setValues (self, values):
      '''None'''
    ...
    def _PlugValueWidget__updateContextConnection (self):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackground (self, plugs, auxiliaryPlugs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPlug (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPostCall (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPreCall (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _addPopupMenu (self, widget=None, buttons=GafferUI._GafferUI.Buttons.Right):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _auxiliaryPlugs (self, plug):
      '''None'''
    ...
    def _blockedUpdateFromValues (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _convertValue (self, value):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _editable (self, canEditAnimation=False):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _plugConnections (self):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _popupMenuDefinition (self):
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _requestUpdateFromValues (self, lazy=True):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromEditable (self):
      '''None'''
    ...
    def _updateFromMetadata (self):
      '''None'''
    ...
    def _updateFromValues (self, values, exception):
      '''None'''
    ...
    def _valuesDependOnContext (self):
      '''None'''
    ...
    def _valuesForUpdate (plugs, auxiliaryPlugs):
      '''None'''
    ...
    def acquire (plug):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def boolWidget (self):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childPlugValueWidget (self, childPlug):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (plugs, typeMetadata='plugValueWidget:type'):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getPlug (self):
      '''None'''
    ...
    def getPlugs (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def hasLabel (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def popupMenuSignal ():
      '''None'''
    ...
    def registerType (plugClassOrTypeId, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setPlug (self, plug):
      '''None'''
    ...
    def setPlugs (self, plugs):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def BoolWidget (*args):
      '''

'''      
    ...

class BoolWidget:
    def DisplayMode (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def State (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def _BoolWidget__stateChanged (self, state):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getDisplayMode (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getErrored (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getImage (self):
      '''None'''
    ...
    def getState (self):
      '''None'''
    ...
    def getText (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setDisplayMode (self, displayMode):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setErrored (self, errored):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setImage (self, image):
      '''None'''
    ...
    def setState (self, state):
      '''None'''
    ...
    def setText (self, text):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def stateChangedSignal (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def BoxIOUI (*args):
      '''

'''      
    ...

def BoxInUI (*args):
      '''

'''      
    ...

def BoxOutUI (*args):
      '''

'''      
    ...

def BoxPlugValueWidget (*args):
      '''

'''      
    ...

class BoxPlugValueWidget:
    def MultiplePlugTypesError (self, *args, **kwargs):
      '''None'''
    ...
    def MultiplePlugsError (self, *args, **kwargs):
      '''None'''
    ...
    def MultipleWidgetCreatorsError (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__applyPreset (self, presetName, *unused):
      '''None'''
    ...
    def _PlugValueWidget__applyReadOnly (self, readOnly):
      '''None'''
    ...
    def _PlugValueWidget__applyUserDefaults (self):
      '''None'''
    ...
    def _PlugValueWidget__auxiliaryPlugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__buttonPress (self, widget, event, buttonMask):
      '''None'''
    ...
    def _PlugValueWidget__callLegacyUpdateMethods (self):
      '''None'''
    ...
    def _PlugValueWidget__callUpdateFromValues (self):
      '''None'''
    ...
    def _PlugValueWidget__contextChanged (self, context, key):
      '''None'''
    ...
    def _PlugValueWidget__contextMenu (self, *unused):
      '''None'''
    ...
    def _PlugValueWidget__copyValue (self):
      '''None'''
    ...
    def _PlugValueWidget__creator (plug, typeMetadata):
      '''None'''
    ...
    def _PlugValueWidget__defaultContext (graphComponent):
      '''None'''
    ...
    def _PlugValueWidget__dragEnter (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__dragLeave (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__drop (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__editInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__fallbackContext (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__nodeMetadataChanged (self, nodeTypeId, key, node):
      '''None'''
    ...
    def _PlugValueWidget__plugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugInputChanged (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugMetadataChanged (self, plug, key, reason):
      '''None'''
    ...
    def _PlugValueWidget__plugTypesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _PlugValueWidget__popupMenuSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__presetsSubMenu (self):
      '''None'''
    ...
    def _PlugValueWidget__removeInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__setPlugsInternal (self, plugs, callUpdateMethods):
      '''None'''
    ...
    def _PlugValueWidget__setValues (self, values):
      '''None'''
    ...
    def _PlugValueWidget__updateContextConnection (self):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackground (self, plugs, auxiliaryPlugs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPlug (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPostCall (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPreCall (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _addPopupMenu (self, widget=None, buttons=GafferUI._GafferUI.Buttons.Right):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _auxiliaryPlugs (self, plug):
      '''None'''
    ...
    def _blockedUpdateFromValues (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _convertValue (self, value):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _editable (self, canEditAnimation=False):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _plugConnections (self):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _popupMenuDefinition (self):
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _requestUpdateFromValues (self, lazy=True):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromEditable (self):
      '''None'''
    ...
    def _updateFromMetadata (self):
      '''None'''
    ...
    def _updateFromValues (self, values, exception):
      '''None'''
    ...
    def _valuesDependOnContext (self):
      '''None'''
    ...
    def _valuesForUpdate (plugs, auxiliaryPlugs):
      '''None'''
    ...
    def acquire (plug):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childPlugValueWidget (self, childPlug):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (plugs, typeMetadata='plugValueWidget:type'):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getPlug (self):
      '''None'''
    ...
    def getPlugs (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def hasLabel (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def popupMenuSignal ():
      '''None'''
    ...
    def registerType (plugClassOrTypeId, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setPlug (self, plug):
      '''None'''
    ...
    def setPlugs (self, plugs):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def BoxUI (*args):
      '''

'''      
    ...

def BrowserEditor (*args):
      '''

'''      
    ...

class BrowserEditor:
    def FileSequenceMode (browser):
      '''None'''
    ...
    def FileSystemMode (browser):
      '''None'''
    ...
    def Mode (browser, splitPosition=0.5):
      '''None'''
    ...
    def Settings (name, script):
      '''None'''
    ...
    def _BrowserEditor__modeChanged (self, modeMenu):
      '''None'''
    ...
    def _BrowserEditor__modes (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Editor__contextChanged (self, context, key):
      '''None'''
    ...
    def _Editor__enter (self, widget):
      '''None'''
    ...
    def _Editor__leave (self, widget):
      '''None'''
    ...
    def _Editor__namesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Editor__setContextInternal (self, context, callUpdate):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _contextChangedConnection (self):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromContext (self, modifiedItems):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (name, scriptNode):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getTitle (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def instanceCreatedSignal ():
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def pathChooser (self):
      '''None'''
    ...
    def registerMode (label, modeCreator):
      '''None'''
    ...
    def registerType (name, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def scriptNode (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setTitle (self, title):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def titleChangedSignal (self):
      '''None'''
    ...
    def types ():
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def BusyWidget (*args):
      '''

'''      
    ...

class BusyWidget:
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getBusy (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setBusy (self, busy):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def Button (*args):
      '''

'''      
    ...

class Button:
    def _Button__clicked (self, *unusedArgs):
      '''None'''
    ...
    def _Button__enter (self, widget):
      '''None'''
    ...
    def _Button__leave (self, widget):
      '''None'''
    ...
    def _Button__palette (self, *args, **kwargs):
      '''None'''
    ...
    def _Button__updateIcon (self):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def clickedSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHasFrame (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getImage (self):
      '''None'''
    ...
    def getText (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHasFrame (self, hasFrame):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setImage (self, imageOrImageFileName):
      '''None'''
    ...
    def setText (self, text):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def ButtonEvent (*args):
      '''
__init__(_object*, GafferUI::ButtonEvent::Buttons, GafferUI::ButtonEvent::Buttons, IECore::LineSegment<Imath_3_1::Vec3<float> >, float, GafferUI::ModifiableEvent::Modifiers)
__init__(_object*, GafferUI::ButtonEvent::Buttons, GafferUI::ButtonEvent::Buttons, IECore::LineSegment<Imath_3_1::Vec3<float> >, float)
__init__(_object*, GafferUI::ButtonEvent::Buttons, GafferUI::ButtonEvent::Buttons, IECore::LineSegment<Imath_3_1::Vec3<float> >)
__init__(_object*, GafferUI::ButtonEvent::Buttons, GafferUI::ButtonEvent::Buttons)
__init__(_object*)

'''      
    ...

class ButtonEvent:
    def Buttons (self, *args, **kwargs):
      '''None'''
    ...
    def Modifiers (self, *args, **kwargs):
      '''None'''
    ...
    def button (self, *args, **kwargs):
      '''None'''
    ...
    def buttons (self, *args, **kwargs):
      '''None'''
    ...
    def line (self, *args, **kwargs):
      '''None'''
    ...
    def modifiers (self, *args, **kwargs):
      '''None'''
    ...
    def wheelRotation (self, *args, **kwargs):
      '''None'''
    ...

def ButtonPlugValueWidget (*args):
      '''

'''      
    ...

class ButtonPlugValueWidget:
    def MultiplePlugTypesError (self, *args, **kwargs):
      '''None'''
    ...
    def MultiplePlugsError (self, *args, **kwargs):
      '''None'''
    ...
    def MultipleWidgetCreatorsError (self, *args, **kwargs):
      '''None'''
    ...
    def _ButtonPlugValueWidget__clicked (self, widget):
      '''None'''
    ...
    def _ButtonPlugValueWidget__nameChanged (self, plug, oldName):
      '''None'''
    ...
    def _ButtonPlugValueWidget__plugMetadataChanged (self, plug, key, reason):
      '''None'''
    ...
    def _ButtonPlugValueWidget__updateLabel (self):
      '''None'''
    ...
    def _PlugValueWidget__applyPreset (self, presetName, *unused):
      '''None'''
    ...
    def _PlugValueWidget__applyReadOnly (self, readOnly):
      '''None'''
    ...
    def _PlugValueWidget__applyUserDefaults (self):
      '''None'''
    ...
    def _PlugValueWidget__auxiliaryPlugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__buttonPress (self, widget, event, buttonMask):
      '''None'''
    ...
    def _PlugValueWidget__callLegacyUpdateMethods (self):
      '''None'''
    ...
    def _PlugValueWidget__callUpdateFromValues (self):
      '''None'''
    ...
    def _PlugValueWidget__contextChanged (self, context, key):
      '''None'''
    ...
    def _PlugValueWidget__contextMenu (self, *unused):
      '''None'''
    ...
    def _PlugValueWidget__copyValue (self):
      '''None'''
    ...
    def _PlugValueWidget__creator (plug, typeMetadata):
      '''None'''
    ...
    def _PlugValueWidget__defaultContext (graphComponent):
      '''None'''
    ...
    def _PlugValueWidget__dragEnter (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__dragLeave (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__drop (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__editInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__fallbackContext (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__nodeMetadataChanged (self, nodeTypeId, key, node):
      '''None'''
    ...
    def _PlugValueWidget__plugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugInputChanged (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugMetadataChanged (self, plug, key, reason):
      '''None'''
    ...
    def _PlugValueWidget__plugTypesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _PlugValueWidget__popupMenuSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__presetsSubMenu (self):
      '''None'''
    ...
    def _PlugValueWidget__removeInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__setPlugsInternal (self, plugs, callUpdateMethods):
      '''None'''
    ...
    def _PlugValueWidget__setValues (self, values):
      '''None'''
    ...
    def _PlugValueWidget__updateContextConnection (self):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackground (self, plugs, auxiliaryPlugs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPlug (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPostCall (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPreCall (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _addPopupMenu (self, widget=None, buttons=GafferUI._GafferUI.Buttons.Right):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _auxiliaryPlugs (self, plug):
      '''None'''
    ...
    def _blockedUpdateFromValues (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _convertValue (self, value):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _editable (self, canEditAnimation=False):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _plugConnections (self):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _popupMenuDefinition (self):
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _requestUpdateFromValues (self, lazy=True):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromEditable (self):
      '''None'''
    ...
    def _updateFromMetadata (self):
      '''None'''
    ...
    def _updateFromValues (self, values, exception):
      '''None'''
    ...
    def _valuesDependOnContext (self):
      '''None'''
    ...
    def _valuesForUpdate (plugs, auxiliaryPlugs):
      '''None'''
    ...
    def acquire (plug):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childPlugValueWidget (self, childPlug):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (plugs, typeMetadata='plugValueWidget:type'):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getPlug (self):
      '''None'''
    ...
    def getPlugs (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def hasLabel (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def popupMenuSignal ():
      '''None'''
    ...
    def registerType (plugClassOrTypeId, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setPlug (self, plug):
      '''None'''
    ...
    def setPlugs (self, plugs):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def CheckBox (*args):
      '''

'''      
    ...

class CheckBox:
    def DisplayMode (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def State (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def _BoolWidget__stateChanged (self, state):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getDisplayMode (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getErrored (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getImage (self):
      '''None'''
    ...
    def getState (self):
      '''None'''
    ...
    def getText (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setDisplayMode (self, displayMode):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setErrored (self, errored):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setImage (self, image):
      '''None'''
    ...
    def setState (self, state):
      '''None'''
    ...
    def setText (self, text):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def stateChangedSignal (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def CodeWidget (*args):
      '''

'''      
    ...

class CodeWidget:
    def Completer ():
      '''None'''
    ...
    def Highlighter ():
      '''None'''
    ...
    def PythonCompleter (namespace, includeGraphComponentAttributes=True):
      '''None'''
    ...
    def PythonHighlighter ():
      '''None'''
    ...
    def Role (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def WrapMode (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def _CodeWidget__commentPress (self):
      '''None'''
    ...
    def _CodeWidget__completionPress (self):
      '''None'''
    ...
    def _CodeWidget__completionsAndLine (self):
      '''None'''
    ...
    def _CodeWidget__indentPress (self, indent):
      '''None'''
    ...
    def _CodeWidget__keyPress (self, widget, event):
      '''None'''
    ...
    def _CodeWidget__returnPress (self):
      '''None'''
    ...
    def _CodeWidget__selectedBlocks (self):
      '''None'''
    ...
    def _CodeWidget__textChanged (self, widget):
      '''None'''
    ...
    def _MultiLineTextWidget__buttonPress (self, widget, event):
      '''None'''
    ...
    def _MultiLineTextWidget__dragEnter (self, widget, event):
      '''None'''
    ...
    def _MultiLineTextWidget__dragLeave (self, widget, event):
      '''None'''
    ...
    def _MultiLineTextWidget__dragMove (self, widget, event):
      '''None'''
    ...
    def _MultiLineTextWidget__drop (self, widget, event):
      '''None'''
    ...
    def _MultiLineTextWidget__dropText (self, dragData):
      '''None'''
    ...
    def _MultiLineTextWidget__keyPress (self, widget, event):
      '''None'''
    ...
    def _MultiLineTextWidget__mouseMove (self, widget, event):
      '''None'''
    ...
    def _MultiLineTextWidget__textChanged (self):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def activatedSignal (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def appendHTML (self, html):
      '''None'''
    ...
    def appendText (self, text):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def cursorBound (self, relativeTo=None):
      '''None'''
    ...
    def cursorPositionAt (self, position):
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def dropTextSignal (self):
      '''None'''
    ...
    def editingFinishedSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getCommentPrefix (self):
      '''None'''
    ...
    def getCompleter (self):
      '''None'''
    ...
    def getCursorPosition (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEditable (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getErrored (self):
      '''None'''
    ...
    def getFixedLineHeight (self):
      '''None'''
    ...
    def getFocussed (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getHighlighter (self):
      '''None'''
    ...
    def getRole (self):
      '''None'''
    ...
    def getText (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def getWrapMode (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def insertText (self, text):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def linkActivatedSignal (self):
      '''None'''
    ...
    def linkAt (self, position):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def selectedText (self):
      '''None'''
    ...
    def setCommentPrefix (self, commentPrefix):
      '''None'''
    ...
    def setCompleter (self, completer):
      '''None'''
    ...
    def setCursorPosition (self, position):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEditable (self, editable):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setErrored (self, errored):
      '''None'''
    ...
    def setFixedLineHeight (self, fixedLineHeight):
      '''None'''
    ...
    def setFocussed (self, focussed):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setHighlighter (self, highlighter):
      '''None'''
    ...
    def setRole (self, role):
      '''None'''
    ...
    def setText (self, text):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def setWrapMode (self, wrapMode):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def textChangedSignal (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def Collapsible (*args):
      '''

'''      
    ...

class Collapsible:
    def _Collapsible__toggled (self, value):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _revealDescendant (self, descendant):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def addChild (self, child):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getChild (self):
      '''None'''
    ...
    def getCollapsed (self):
      '''None'''
    ...
    def getCornerWidget (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getLabel (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def removeChild (self, childOrCornerWidget):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setChild (self, child):
      '''None'''
    ...
    def setCollapsed (self, state):
      '''None'''
    ...
    def setCornerWidget (self, cornerWidget, cornerWidgetExpanded=False):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setLabel (self, label):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def stateChangedSignal (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def CollectUI (*args):
      '''

'''      
    ...

def ColorChooser (*args):
      '''

'''      
    ...

class ColorChooser:
    def ColorChangedReason (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def _ColorChooser__componentValueChanged (self, componentWidget, reason):
      '''None'''
    ...
    def _ColorChooser__initialColorPress (self, button, event):
      '''None'''
    ...
    def _ColorChooser__setColorInternal (self, color, reason):
      '''None'''
    ...
    def _ColorChooser__updateUIFromColor (self):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def changesShouldBeMerged (firstReason, secondReason):
      '''None'''
    ...
    def colorChangedSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getColor (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getErrored (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getInitialColor (self):
      '''None'''
    ...
    def getSwatchesVisible (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setColor (self, color):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setErrored (self, errored):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setInitialColor (self, color):
      '''None'''
    ...
    def setSwatchesVisible (self, visible):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def ColorChooserDialogue (*args):
      '''

'''      
    ...

class ColorChooserDialogue:
    def SizeMode (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def _Dialogue__buttonClicked (self, button):
      '''None'''
    ...
    def _Dialogue__close (self, widget):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _Window__caughtKeys ():
      '''None'''
    ...
    def _Window__caughtKeysSet (self, *args, **kwargs):
      '''None'''
    ...
    def _Window__constrainToScreen (self, position):
      '''None'''
    ...
    def _Window__keyPress (self, widget, event):
      '''None'''
    ...
    def _acceptsClose (self):
      '''None'''
    ...
    def _addButton (self, textOrButton):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _getWidget (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _revealDescendant (self, descendant):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _setWidget (self, widget):
      '''None'''
    ...
    def addChild (self, child):
      '''None'''
    ...
    def addChildWindow (self, childWindow, removeOnClose=False):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childWindows (self):
      '''None'''
    ...
    def close (self):
      '''None'''
    ...
    def closedSignal (self):
      '''None'''
    ...
    def colorChooser (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getChild (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getFullScreen (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getIcon (self):
      '''None'''
    ...
    def getModal (self):
      '''None'''
    ...
    def getPosition (self):
      '''None'''
    ...
    def getResizeable (self):
      '''None'''
    ...
    def getSizeMode (self):
      '''None'''
    ...
    def getTitle (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def preCloseSignal (self):
      '''None'''
    ...
    def removeChild (self, child):
      '''None'''
    ...
    def resizeToFitChild (self, shrink=True, expand=True):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setChild (self, child):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setFullScreen (self, fullScreen):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setIcon (self, imageOrImageFileName):
      '''None'''
    ...
    def setModal (self, modal, parentWindow=None):
      '''None'''
    ...
    def setPosition (self, position, forcePosition=False):
      '''None'''
    ...
    def setResizeable (self, resizeable):
      '''None'''
    ...
    def setSizeMode (self, sizeMode):
      '''None'''
    ...
    def setTitle (self, title):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def waitForButton (self, parentWindow=None):
      '''None'''
    ...
    def waitForColor (self, **kw):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def ColorChooserPlugValueWidget (*args):
      '''

'''      
    ...

class ColorChooserPlugValueWidget:
    def MultiplePlugTypesError (self, *args, **kwargs):
      '''None'''
    ...
    def MultiplePlugsError (self, *args, **kwargs):
      '''None'''
    ...
    def MultipleWidgetCreatorsError (self, *args, **kwargs):
      '''None'''
    ...
    def _ColorChooserPlugValueWidget__allComponentsEditable (self):
      '''None'''
    ...
    def _ColorChooserPlugValueWidget__colorChanged (self, colorChooser, reason):
      '''None'''
    ...
    def _PlugValueWidget__applyPreset (self, presetName, *unused):
      '''None'''
    ...
    def _PlugValueWidget__applyReadOnly (self, readOnly):
      '''None'''
    ...
    def _PlugValueWidget__applyUserDefaults (self):
      '''None'''
    ...
    def _PlugValueWidget__auxiliaryPlugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__buttonPress (self, widget, event, buttonMask):
      '''None'''
    ...
    def _PlugValueWidget__callLegacyUpdateMethods (self):
      '''None'''
    ...
    def _PlugValueWidget__callUpdateFromValues (self):
      '''None'''
    ...
    def _PlugValueWidget__contextChanged (self, context, key):
      '''None'''
    ...
    def _PlugValueWidget__contextMenu (self, *unused):
      '''None'''
    ...
    def _PlugValueWidget__copyValue (self):
      '''None'''
    ...
    def _PlugValueWidget__creator (plug, typeMetadata):
      '''None'''
    ...
    def _PlugValueWidget__defaultContext (graphComponent):
      '''None'''
    ...
    def _PlugValueWidget__dragEnter (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__dragLeave (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__drop (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__editInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__fallbackContext (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__nodeMetadataChanged (self, nodeTypeId, key, node):
      '''None'''
    ...
    def _PlugValueWidget__plugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugInputChanged (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugMetadataChanged (self, plug, key, reason):
      '''None'''
    ...
    def _PlugValueWidget__plugTypesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _PlugValueWidget__popupMenuSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__presetsSubMenu (self):
      '''None'''
    ...
    def _PlugValueWidget__removeInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__setPlugsInternal (self, plugs, callUpdateMethods):
      '''None'''
    ...
    def _PlugValueWidget__setValues (self, values):
      '''None'''
    ...
    def _PlugValueWidget__updateContextConnection (self):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackground (self, plugs, auxiliaryPlugs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPlug (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPostCall (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPreCall (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _addPopupMenu (self, widget=None, buttons=GafferUI._GafferUI.Buttons.Right):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _auxiliaryPlugs (self, plug):
      '''None'''
    ...
    def _blockedUpdateFromValues (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _convertValue (self, value):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _editable (self, canEditAnimation=False):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _plugConnections (self):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _popupMenuDefinition (self):
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _requestUpdateFromValues (self, lazy=True):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromEditable (self):
      '''None'''
    ...
    def _updateFromEnabled (self):
      '''None'''
    ...
    def _updateFromMetadata (self):
      '''None'''
    ...
    def _updateFromValues (self, values, exception):
      '''None'''
    ...
    def _valuesDependOnContext (self):
      '''None'''
    ...
    def _valuesForUpdate (plugs, auxiliaryPlugs):
      '''None'''
    ...
    def acquire (plug):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childPlugValueWidget (self, childPlug):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (plugs, typeMetadata='plugValueWidget:type'):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getPlug (self):
      '''None'''
    ...
    def getPlugs (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def hasLabel (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def popupMenuSignal ():
      '''None'''
    ...
    def registerType (plugClassOrTypeId, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setPlug (self, plug):
      '''None'''
    ...
    def setPlugs (self, plugs):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def ColorPlugValueWidget (*args):
      '''

'''      
    ...

class ColorPlugValueWidget:
    def MultiplePlugTypesError (self, *args, **kwargs):
      '''None'''
    ...
    def MultiplePlugsError (self, *args, **kwargs):
      '''None'''
    ...
    def MultipleWidgetCreatorsError (self, *args, **kwargs):
      '''None'''
    ...
    def _ColorPlugValueWidget__chooserButtonClicked (self, widget):
      '''None'''
    ...
    def _ColorPlugValueWidget__swatchButtonRelease (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__applyPreset (self, presetName, *unused):
      '''None'''
    ...
    def _PlugValueWidget__applyReadOnly (self, readOnly):
      '''None'''
    ...
    def _PlugValueWidget__applyUserDefaults (self):
      '''None'''
    ...
    def _PlugValueWidget__auxiliaryPlugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__buttonPress (self, widget, event, buttonMask):
      '''None'''
    ...
    def _PlugValueWidget__callLegacyUpdateMethods (self):
      '''None'''
    ...
    def _PlugValueWidget__callUpdateFromValues (self):
      '''None'''
    ...
    def _PlugValueWidget__contextChanged (self, context, key):
      '''None'''
    ...
    def _PlugValueWidget__contextMenu (self, *unused):
      '''None'''
    ...
    def _PlugValueWidget__copyValue (self):
      '''None'''
    ...
    def _PlugValueWidget__creator (plug, typeMetadata):
      '''None'''
    ...
    def _PlugValueWidget__defaultContext (graphComponent):
      '''None'''
    ...
    def _PlugValueWidget__dragEnter (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__dragLeave (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__drop (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__editInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__fallbackContext (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__nodeMetadataChanged (self, nodeTypeId, key, node):
      '''None'''
    ...
    def _PlugValueWidget__plugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugInputChanged (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugMetadataChanged (self, plug, key, reason):
      '''None'''
    ...
    def _PlugValueWidget__plugTypesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _PlugValueWidget__popupMenuSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__presetsSubMenu (self):
      '''None'''
    ...
    def _PlugValueWidget__removeInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__setPlugsInternal (self, plugs, callUpdateMethods):
      '''None'''
    ...
    def _PlugValueWidget__setValues (self, values):
      '''None'''
    ...
    def _PlugValueWidget__updateContextConnection (self):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackground (self, plugs, auxiliaryPlugs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPlug (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPostCall (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPreCall (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _addPopupMenu (self, widget=None, buttons=GafferUI._GafferUI.Buttons.Right):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _auxiliaryPlugs (self, plug):
      '''None'''
    ...
    def _blockedUpdateFromValues (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _convertValue (self, value):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _editable (self, canEditAnimation=False):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _plugConnections (self):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _popupMenuDefinition (self):
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _requestUpdateFromValues (self, lazy=True):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromEditable (self):
      '''None'''
    ...
    def _updateFromMetadata (self):
      '''None'''
    ...
    def _updateFromValues (self, values, exception):
      '''None'''
    ...
    def _valuesDependOnContext (self):
      '''None'''
    ...
    def _valuesForUpdate (plugs, auxiliaryPlugs):
      '''None'''
    ...
    def acquire (plug):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childPlugValueWidget (self, childPlug):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (plugs, typeMetadata='plugValueWidget:type'):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getColorChooserVisible (self):
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getPlug (self):
      '''None'''
    ...
    def getPlugs (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def hasLabel (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def popupMenuSignal ():
      '''None'''
    ...
    def registerType (plugClassOrTypeId, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setColorChooserVisible (self, visible):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setPlug (self, plug):
      '''None'''
    ...
    def setPlugs (self, plugs):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def ColorSwatch (*args):
      '''

'''      
    ...

class ColorSwatch:
    def _ColorSwatch__linearBackgroundColor0 (self, *args, **kwargs):
      '''Color3f'''
    ...
    def _ColorSwatch__linearBackgroundColor1 (self, *args, **kwargs):
      '''Color3f'''
    ...
    def _ColorSwatch__updateCheckerColors (self):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getColor (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getErrored (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setColor (self, color):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setErrored (self, errored):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def ColorSwatchPlugValueWidget (*args):
      '''

'''      
    ...

class ColorSwatchPlugValueWidget:
    def MultiplePlugTypesError (self, *args, **kwargs):
      '''None'''
    ...
    def MultiplePlugsError (self, *args, **kwargs):
      '''None'''
    ...
    def MultipleWidgetCreatorsError (self, *args, **kwargs):
      '''None'''
    ...
    def _ColorSwatchPlugValueWidget__buttonPress (self, widget, event):
      '''None'''
    ...
    def _ColorSwatchPlugValueWidget__buttonRelease (self, widget, event):
      '''None'''
    ...
    def _ColorSwatchPlugValueWidget__dragBegin (self, widget, event):
      '''None'''
    ...
    def _ColorSwatchPlugValueWidget__dragEnd (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__applyPreset (self, presetName, *unused):
      '''None'''
    ...
    def _PlugValueWidget__applyReadOnly (self, readOnly):
      '''None'''
    ...
    def _PlugValueWidget__applyUserDefaults (self):
      '''None'''
    ...
    def _PlugValueWidget__auxiliaryPlugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__buttonPress (self, widget, event, buttonMask):
      '''None'''
    ...
    def _PlugValueWidget__callLegacyUpdateMethods (self):
      '''None'''
    ...
    def _PlugValueWidget__callUpdateFromValues (self):
      '''None'''
    ...
    def _PlugValueWidget__contextChanged (self, context, key):
      '''None'''
    ...
    def _PlugValueWidget__contextMenu (self, *unused):
      '''None'''
    ...
    def _PlugValueWidget__copyValue (self):
      '''None'''
    ...
    def _PlugValueWidget__creator (plug, typeMetadata):
      '''None'''
    ...
    def _PlugValueWidget__defaultContext (graphComponent):
      '''None'''
    ...
    def _PlugValueWidget__dragEnter (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__dragLeave (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__drop (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__editInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__fallbackContext (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__nodeMetadataChanged (self, nodeTypeId, key, node):
      '''None'''
    ...
    def _PlugValueWidget__plugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugInputChanged (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugMetadataChanged (self, plug, key, reason):
      '''None'''
    ...
    def _PlugValueWidget__plugTypesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _PlugValueWidget__popupMenuSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__presetsSubMenu (self):
      '''None'''
    ...
    def _PlugValueWidget__removeInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__setPlugsInternal (self, plugs, callUpdateMethods):
      '''None'''
    ...
    def _PlugValueWidget__setValues (self, values):
      '''None'''
    ...
    def _PlugValueWidget__updateContextConnection (self):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackground (self, plugs, auxiliaryPlugs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPlug (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPostCall (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPreCall (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _addPopupMenu (self, widget=None, buttons=GafferUI._GafferUI.Buttons.Right):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _auxiliaryPlugs (self, plug):
      '''None'''
    ...
    def _blockedUpdateFromValues (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _convertValue (self, value):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _editable (self, canEditAnimation=False):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _plugConnections (self):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _popupMenuDefinition (self):
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _requestUpdateFromValues (self, lazy=True):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromEditable (self):
      '''None'''
    ...
    def _updateFromMetadata (self):
      '''None'''
    ...
    def _updateFromValues (self, values, exception):
      '''None'''
    ...
    def _valuesDependOnContext (self):
      '''None'''
    ...
    def _valuesForUpdate (plugs, auxiliaryPlugs):
      '''None'''
    ...
    def acquire (plug):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childPlugValueWidget (self, childPlug):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (plugs, typeMetadata='plugValueWidget:type'):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getPlug (self):
      '''None'''
    ...
    def getPlugs (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def hasLabel (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def popupMenuSignal ():
      '''None'''
    ...
    def registerType (plugClassOrTypeId, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setPlug (self, plug):
      '''None'''
    ...
    def setPlugs (self, plugs):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def CompoundDataPlugValueWidget (*args):
      '''

'''      
    ...

class CompoundDataPlugValueWidget:
    def MultiplePlugTypesError (self, *args, **kwargs):
      '''None'''
    ...
    def MultiplePlugsError (self, *args, **kwargs):
      '''None'''
    ...
    def MultipleWidgetCreatorsError (self, *args, **kwargs):
      '''None'''
    ...
    def _CompoundDataPlugValueWidget__addItem (self, name, value):
      '''None'''
    ...
    def _CompoundDataPlugValueWidget__addMenuDefinition (self):
      '''None'''
    ...
    def _PlugValueWidget__applyPreset (self, presetName, *unused):
      '''None'''
    ...
    def _PlugValueWidget__applyReadOnly (self, readOnly):
      '''None'''
    ...
    def _PlugValueWidget__applyUserDefaults (self):
      '''None'''
    ...
    def _PlugValueWidget__auxiliaryPlugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__buttonPress (self, widget, event, buttonMask):
      '''None'''
    ...
    def _PlugValueWidget__callLegacyUpdateMethods (self):
      '''None'''
    ...
    def _PlugValueWidget__callUpdateFromValues (self):
      '''None'''
    ...
    def _PlugValueWidget__contextChanged (self, context, key):
      '''None'''
    ...
    def _PlugValueWidget__contextMenu (self, *unused):
      '''None'''
    ...
    def _PlugValueWidget__copyValue (self):
      '''None'''
    ...
    def _PlugValueWidget__creator (plug, typeMetadata):
      '''None'''
    ...
    def _PlugValueWidget__defaultContext (graphComponent):
      '''None'''
    ...
    def _PlugValueWidget__dragEnter (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__dragLeave (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__drop (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__editInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__fallbackContext (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__nodeMetadataChanged (self, nodeTypeId, key, node):
      '''None'''
    ...
    def _PlugValueWidget__plugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugInputChanged (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugMetadataChanged (self, plug, key, reason):
      '''None'''
    ...
    def _PlugValueWidget__plugTypesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _PlugValueWidget__popupMenuSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__presetsSubMenu (self):
      '''None'''
    ...
    def _PlugValueWidget__removeInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__setPlugsInternal (self, plugs, callUpdateMethods):
      '''None'''
    ...
    def _PlugValueWidget__setValues (self, values):
      '''None'''
    ...
    def _PlugValueWidget__updateContextConnection (self):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackground (self, plugs, auxiliaryPlugs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPlug (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPostCall (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPreCall (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _addPopupMenu (self, widget=None, buttons=GafferUI._GafferUI.Buttons.Right):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _auxiliaryPlugs (self, plug):
      '''None'''
    ...
    def _blockedUpdateFromValues (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _convertValue (self, value):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _editable (self, canEditAnimation=False):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _plugConnections (self):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _popupMenuDefinition (self):
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _requestUpdateFromValues (self, lazy=True):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromEditable (self):
      '''None'''
    ...
    def _updateFromMetadata (self):
      '''None'''
    ...
    def _updateFromValues (self, values, exception):
      '''None'''
    ...
    def _valuesDependOnContext (self):
      '''None'''
    ...
    def _valuesForUpdate (plugs, auxiliaryPlugs):
      '''None'''
    ...
    def acquire (plug):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childPlugValueWidget (self, childPlug):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (plugs, typeMetadata='plugValueWidget:type'):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getPlug (self):
      '''None'''
    ...
    def getPlugs (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def hasLabel (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def popupMenuSignal ():
      '''None'''
    ...
    def registerType (plugClassOrTypeId, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setPlug (self, plug):
      '''None'''
    ...
    def setPlugs (self, plugs):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def CompoundEditor (*args):
      '''

'''      
    ...

class CompoundEditor:
    def Settings (name, script):
      '''None'''
    ...
    def _CompoundEditor__captureEditorState (self):
      '''None'''
    ...
    def _CompoundEditor__editorAtPath (self, path):
      '''None'''
    ...
    def _CompoundEditor__handlePosition (splitContainer):
      '''None'''
    ...
    def _CompoundEditor__keyPress (unused, event):
      '''None'''
    ...
    def _CompoundEditor__nodeSetMenuSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _CompoundEditor__parentChanged (self, widget):
      '''None'''
    ...
    def _CompoundEditor__pathToEditor (self, editor):
      '''None'''
    ...
    def _CompoundEditor__restoreEditorState (self, editorState):
      '''None'''
    ...
    def _CompoundEditor__serialiseDetachedPanels (self):
      '''None'''
    ...
    def _CompoundEditor__visibilityChanged (self, widget):
      '''None'''
    ...
    def _Editor__contextChanged (self, context, key):
      '''None'''
    ...
    def _Editor__enter (self, widget):
      '''None'''
    ...
    def _Editor__leave (self, widget):
      '''None'''
    ...
    def _Editor__namesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Editor__setContextInternal (self, context, callUpdate):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _contextChangedConnection (self):
      '''None'''
    ...
    def _createDetachedPanel (self, *args, **kwargs):
      '''None'''
    ...
    def _detachedPanels (self):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _removeDetachedPanel (self, panel):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _serializeWindowState (self):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromContext (self, modifiedItems):
      '''None'''
    ...
    def addEditor (self, editor):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (name, scriptNode):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def editor (self, type=<class 'GafferUI.Editor.Editor'>, focussedOnly=False, visibleOnly=False):
      '''None'''
    ...
    def editors (self, type=<class 'GafferUI.Editor.Editor'>):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getTitle (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def instanceCreatedSignal ():
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def nodeSetMenuSignal ():
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def registerType (name, creator):
      '''None'''
    ...
    def restoreWindowState (self):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def scriptNode (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setTitle (self, title):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def titleChangedSignal (self):
      '''None'''
    ...
    def types ():
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def CompoundNodule (*args):
      '''
__init__(_object*, boost::intrusive_ptr<Gaffer::Plug> plug)

'''      
    ...

class CompoundNodule:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ButtonSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DirtyType (self, *args, **kwargs):
      '''None'''
    ...
    def DragBeginSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DragDropSignal (self, *args, **kwargs):
      '''None'''
    ...
    def EnterLeaveSignal (self, *args, **kwargs):
      '''None'''
    ...
    def IdleSignal (self, *args, **kwargs):
      '''None'''
    ...
    def KeySignal (self, *args, **kwargs):
      '''None'''
    ...
    def Layer (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def RenderReason (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def VisibilityChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _dirty (self, *args, **kwargs):
      '''
_dirty( (Gadget)arg1, (DirtyType)arg2) -> None :

    C++ signature :
        void _dirty(GafferUI::Gadget {lvalue},GafferUI::Gadget::DirtyType)'''
    ...
    def _idleSignalAccessedSignal (self, *args, **kwargs):
      '''
_idleSignalAccessedSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} _idleSignalAccessedSignal()'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (CompoundNodule)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(GafferUI::CompoundNodule,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (CompoundNodule)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(GafferUI::CompoundNodule,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def bound (self, *args, **kwargs):
      '''
bound( (CompoundNodule)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > bound(GafferUI::CompoundNodule)'''
    ...
    def buttonDoubleClickSignal (self, *args, **kwargs):
      '''
buttonDoubleClickSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonDoubleClickSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonPressSignal (self, *args, **kwargs):
      '''
buttonPressSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonReleaseSignal (self, *args, **kwargs):
      '''
buttonReleaseSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def canCreateConnection (self, *args, **kwargs):
      '''
canCreateConnection( (CompoundNodule)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool canCreateConnection(GafferUI::CompoundNodule,Gaffer::Plug const*)'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def create (self, *args, **kwargs):
      '''
create( (object)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Nodule> create(boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def createConnection (self, *args, **kwargs):
      '''
createConnection( (CompoundNodule)arg1, (Plug)arg2) -> None :

    C++ signature :
        void createConnection(GafferUI::CompoundNodule {lvalue},Gaffer::Plug*)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def dragBeginSignal (self, *args, **kwargs):
      '''
dragBeginSignal( (Gadget)arg1) -> DragBeginSignal :

    C++ signature :
        Gaffer::Signals::Signal<boost::intrusive_ptr<IECore::RunTimeTyped> (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<boost::intrusive_ptr<IECore::RunTimeTyped> > > {lvalue} dragBeginSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEndSignal (self, *args, **kwargs):
      '''
dragEndSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEndSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEnterSignal (self, *args, **kwargs):
      '''
dragEnterSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEnterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragLeaveSignal (self, *args, **kwargs):
      '''
dragLeaveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragLeaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragMoveSignal (self, *args, **kwargs):
      '''
dragMoveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dropSignal (self, *args, **kwargs):
      '''
dropSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dropSignal(GafferUI::Gadget {lvalue})'''
    ...
    def enabled (self, *args, **kwargs):
      '''
enabled( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool enabled(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def enterSignal (self, *args, **kwargs):
      '''
enterSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} enterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def fullTransform (self, *args, **kwargs):
      '''
fullTransform( (Gadget)arg1 [, (Gadget)arg2]) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> fullTransform(GafferUI::Gadget {lvalue} [,GafferUI::Gadget const*])'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getEnabled (self, *args, **kwargs):
      '''
getEnabled( (Gadget)arg1) -> bool :

    C++ signature :
        bool getEnabled(GafferUI::Gadget {lvalue})'''
    ...
    def getHighlighted (self, *args, **kwargs):
      '''
getHighlighted( (Gadget)arg1) -> bool :

    C++ signature :
        bool getHighlighted(GafferUI::Gadget {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getStyle (self, *args, **kwargs):
      '''
getStyle( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> getStyle(GafferUI::Gadget {lvalue})'''
    ...
    def getToolTip (self, *args, **kwargs):
      '''
getToolTip( (CompoundNodule)arg1, (LineSegment3f)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > getToolTip(GafferUI::CompoundNodule,IECore::LineSegment<Imath_3_1::Vec3<float> >)'''
    ...
    def getTransform (self, *args, **kwargs):
      '''
getTransform( (Gadget)arg1) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> getTransform(GafferUI::Gadget {lvalue})'''
    ...
    def getVisible (self, *args, **kwargs):
      '''
getVisible( (Gadget)arg1) -> bool :

    C++ signature :
        bool getVisible(GafferUI::Gadget {lvalue})'''
    ...
    def idleSignal (self, *args, **kwargs):
      '''
idleSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} idleSignal()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (CompoundNodule)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::CompoundNodule {lvalue},IECore::TypeId)

isInstanceOf( (CompoundNodule)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::CompoundNodule {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keyPressSignal (self, *args, **kwargs):
      '''
keyPressSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keyReleaseSignal (self, *args, **kwargs):
      '''
keyReleaseSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def leaveSignal (self, *args, **kwargs):
      '''
leaveSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} leaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def mouseMoveSignal (self, *args, **kwargs):
      '''
mouseMoveSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} mouseMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plug (self, *args, **kwargs):
      '''
plug( (Nodule)arg1) -> object :

    C++ signature :
        Gaffer::Plug* plug(GafferUI::Nodule {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerNodule (self, *args, **kwargs):
      '''
registerNodule( (object)noduleTypeName, (object)creator [, (TypeId)plugType=IECore._IECore.TypeId.Invalid]) -> None :

    C++ signature :
        void registerNodule(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,boost::python::api::object [,IECore::TypeId=IECore._IECore.TypeId.Invalid])'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setEnabled (self, *args, **kwargs):
      '''
setEnabled( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnabled(GafferUI::Gadget {lvalue},bool)'''
    ...
    def setHighlighted (self, *args, **kwargs):
      '''
setHighlighted( (CompoundNodule)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHighlighted(GafferUI::CompoundNodule {lvalue},bool)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setStyle (self, *args, **kwargs):
      '''
setStyle( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setStyle(GafferUI::Gadget {lvalue},boost::intrusive_ptr<GafferUI::Style const>)'''
    ...
    def setToolTip (self, *args, **kwargs):
      '''
setToolTip( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setToolTip(GafferUI::Gadget {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def setTransform (self, *args, **kwargs):
      '''
setTransform( (Gadget)arg1, (M44f)arg2) -> None :

    C++ signature :
        void setTransform(GafferUI::Gadget {lvalue},Imath_3_1::Matrix44<float>)'''
    ...
    def setVisible (self, *args, **kwargs):
      '''
setVisible( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setVisible(GafferUI::Gadget {lvalue},bool)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def style (self, *args, **kwargs):
      '''
style( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> style(GafferUI::Gadget {lvalue})'''
    ...
    def transformedBound (self, *args, **kwargs):
      '''
transformedBound( (Gadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue})

transformedBound( (Gadget)arg1, (Gadget)arg2) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue},GafferUI::Gadget const*)'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (CompoundNodule)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(GafferUI::CompoundNodule {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (CompoundNodule)arg1) -> str :

    C++ signature :
        char const* typeName(GafferUI::CompoundNodule {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def updateDragEndPoint (self, *args, **kwargs):
      '''
updateDragEndPoint( (CompoundNodule)arg1, (V3f)arg2, (V3f)arg3) -> None :

    C++ signature :
        void updateDragEndPoint(GafferUI::CompoundNodule {lvalue},Imath_3_1::Vec3<float>,Imath_3_1::Vec3<float>)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...
    def visibilityChangedSignal (self, *args, **kwargs):
      '''
visibilityChangedSignal( (Gadget)arg1) -> VisibilityChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} visibilityChangedSignal(GafferUI::Gadget {lvalue})'''
    ...
    def visible (self, *args, **kwargs):
      '''
visible( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool visible(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def wheelSignal (self, *args, **kwargs):
      '''
wheelSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} wheelSignal(GafferUI::Gadget {lvalue})'''
    ...

def CompoundNumericNodule (*args):
      '''
__init__(_object*, boost::intrusive_ptr<Gaffer::Plug> plug)

'''      
    ...

class CompoundNumericNodule:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ButtonSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DirtyType (self, *args, **kwargs):
      '''None'''
    ...
    def DragBeginSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DragDropSignal (self, *args, **kwargs):
      '''None'''
    ...
    def EnterLeaveSignal (self, *args, **kwargs):
      '''None'''
    ...
    def IdleSignal (self, *args, **kwargs):
      '''None'''
    ...
    def KeySignal (self, *args, **kwargs):
      '''None'''
    ...
    def Layer (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def RenderReason (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def VisibilityChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _dirty (self, *args, **kwargs):
      '''
_dirty( (Gadget)arg1, (DirtyType)arg2) -> None :

    C++ signature :
        void _dirty(GafferUI::Gadget {lvalue},GafferUI::Gadget::DirtyType)'''
    ...
    def _idleSignalAccessedSignal (self, *args, **kwargs):
      '''
_idleSignalAccessedSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} _idleSignalAccessedSignal()'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (CompoundNumericNodule)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(GafferUI::CompoundNumericNodule,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (CompoundNumericNodule)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(GafferUI::CompoundNumericNodule,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def bound (self, *args, **kwargs):
      '''
bound( (CompoundNumericNodule)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > bound(GafferUI::CompoundNumericNodule)'''
    ...
    def buttonDoubleClickSignal (self, *args, **kwargs):
      '''
buttonDoubleClickSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonDoubleClickSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonPressSignal (self, *args, **kwargs):
      '''
buttonPressSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonReleaseSignal (self, *args, **kwargs):
      '''
buttonReleaseSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def canCreateConnection (self, *args, **kwargs):
      '''
canCreateConnection( (CompoundNumericNodule)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool canCreateConnection(GafferUI::CompoundNumericNodule,Gaffer::Plug const*)'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def create (self, *args, **kwargs):
      '''
create( (object)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Nodule> create(boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def createConnection (self, *args, **kwargs):
      '''
createConnection( (CompoundNumericNodule)arg1, (Plug)arg2) -> None :

    C++ signature :
        void createConnection(GafferUI::CompoundNumericNodule {lvalue},Gaffer::Plug*)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def dragBeginSignal (self, *args, **kwargs):
      '''
dragBeginSignal( (Gadget)arg1) -> DragBeginSignal :

    C++ signature :
        Gaffer::Signals::Signal<boost::intrusive_ptr<IECore::RunTimeTyped> (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<boost::intrusive_ptr<IECore::RunTimeTyped> > > {lvalue} dragBeginSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEndSignal (self, *args, **kwargs):
      '''
dragEndSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEndSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEnterSignal (self, *args, **kwargs):
      '''
dragEnterSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEnterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragLeaveSignal (self, *args, **kwargs):
      '''
dragLeaveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragLeaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragMoveSignal (self, *args, **kwargs):
      '''
dragMoveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dropSignal (self, *args, **kwargs):
      '''
dropSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dropSignal(GafferUI::Gadget {lvalue})'''
    ...
    def enabled (self, *args, **kwargs):
      '''
enabled( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool enabled(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def enterSignal (self, *args, **kwargs):
      '''
enterSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} enterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def fullTransform (self, *args, **kwargs):
      '''
fullTransform( (Gadget)arg1 [, (Gadget)arg2]) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> fullTransform(GafferUI::Gadget {lvalue} [,GafferUI::Gadget const*])'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getEnabled (self, *args, **kwargs):
      '''
getEnabled( (Gadget)arg1) -> bool :

    C++ signature :
        bool getEnabled(GafferUI::Gadget {lvalue})'''
    ...
    def getHighlighted (self, *args, **kwargs):
      '''
getHighlighted( (Gadget)arg1) -> bool :

    C++ signature :
        bool getHighlighted(GafferUI::Gadget {lvalue})'''
    ...
    def getLabelVisible (self, *args, **kwargs):
      '''
getLabelVisible( (StandardNodule)arg1) -> bool :

    C++ signature :
        bool getLabelVisible(GafferUI::StandardNodule {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getStyle (self, *args, **kwargs):
      '''
getStyle( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> getStyle(GafferUI::Gadget {lvalue})'''
    ...
    def getToolTip (self, *args, **kwargs):
      '''
getToolTip( (CompoundNumericNodule)arg1, (LineSegment3f)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > getToolTip(GafferUI::CompoundNumericNodule,IECore::LineSegment<Imath_3_1::Vec3<float> >)'''
    ...
    def getTransform (self, *args, **kwargs):
      '''
getTransform( (Gadget)arg1) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> getTransform(GafferUI::Gadget {lvalue})'''
    ...
    def getVisible (self, *args, **kwargs):
      '''
getVisible( (Gadget)arg1) -> bool :

    C++ signature :
        bool getVisible(GafferUI::Gadget {lvalue})'''
    ...
    def idleSignal (self, *args, **kwargs):
      '''
idleSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} idleSignal()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (CompoundNumericNodule)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::CompoundNumericNodule {lvalue},IECore::TypeId)

isInstanceOf( (CompoundNumericNodule)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::CompoundNumericNodule {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keyPressSignal (self, *args, **kwargs):
      '''
keyPressSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keyReleaseSignal (self, *args, **kwargs):
      '''
keyReleaseSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def leaveSignal (self, *args, **kwargs):
      '''
leaveSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} leaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def mouseMoveSignal (self, *args, **kwargs):
      '''
mouseMoveSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} mouseMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plug (self, *args, **kwargs):
      '''
plug( (Nodule)arg1) -> object :

    C++ signature :
        Gaffer::Plug* plug(GafferUI::Nodule {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerNodule (self, *args, **kwargs):
      '''
registerNodule( (object)noduleTypeName, (object)creator [, (TypeId)plugType=IECore._IECore.TypeId.Invalid]) -> None :

    C++ signature :
        void registerNodule(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,boost::python::api::object [,IECore::TypeId=IECore._IECore.TypeId.Invalid])'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setEnabled (self, *args, **kwargs):
      '''
setEnabled( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnabled(GafferUI::Gadget {lvalue},bool)'''
    ...
    def setHighlighted (self, *args, **kwargs):
      '''
setHighlighted( (CompoundNumericNodule)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHighlighted(GafferUI::CompoundNumericNodule {lvalue},bool)'''
    ...
    def setLabelVisible (self, *args, **kwargs):
      '''
setLabelVisible( (StandardNodule)arg1, (bool)arg2) -> None :

    C++ signature :
        void setLabelVisible(GafferUI::StandardNodule {lvalue},bool)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setStyle (self, *args, **kwargs):
      '''
setStyle( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setStyle(GafferUI::Gadget {lvalue},boost::intrusive_ptr<GafferUI::Style const>)'''
    ...
    def setToolTip (self, *args, **kwargs):
      '''
setToolTip( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setToolTip(GafferUI::Gadget {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def setTransform (self, *args, **kwargs):
      '''
setTransform( (Gadget)arg1, (M44f)arg2) -> None :

    C++ signature :
        void setTransform(GafferUI::Gadget {lvalue},Imath_3_1::Matrix44<float>)'''
    ...
    def setVisible (self, *args, **kwargs):
      '''
setVisible( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setVisible(GafferUI::Gadget {lvalue},bool)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def style (self, *args, **kwargs):
      '''
style( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> style(GafferUI::Gadget {lvalue})'''
    ...
    def transformedBound (self, *args, **kwargs):
      '''
transformedBound( (Gadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue})

transformedBound( (Gadget)arg1, (Gadget)arg2) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue},GafferUI::Gadget const*)'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (CompoundNumericNodule)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(GafferUI::CompoundNumericNodule {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (CompoundNumericNodule)arg1) -> str :

    C++ signature :
        char const* typeName(GafferUI::CompoundNumericNodule {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def updateDragEndPoint (self, *args, **kwargs):
      '''
updateDragEndPoint( (CompoundNumericNodule)arg1, (V3f)arg2, (V3f)arg3) -> None :

    C++ signature :
        void updateDragEndPoint(GafferUI::CompoundNumericNodule {lvalue},Imath_3_1::Vec3<float>,Imath_3_1::Vec3<float>)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...
    def visibilityChangedSignal (self, *args, **kwargs):
      '''
visibilityChangedSignal( (Gadget)arg1) -> VisibilityChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} visibilityChangedSignal(GafferUI::Gadget {lvalue})'''
    ...
    def visible (self, *args, **kwargs):
      '''
visible( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool visible(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def wheelSignal (self, *args, **kwargs):
      '''
wheelSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} wheelSignal(GafferUI::Gadget {lvalue})'''
    ...

def CompoundNumericNoduleUI (*args):
      '''

'''      
    ...

def CompoundNumericPlugValueWidget (*args):
      '''

'''      
    ...

class CompoundNumericPlugValueWidget:
    def MultiplePlugTypesError (self, *args, **kwargs):
      '''None'''
    ...
    def MultiplePlugsError (self, *args, **kwargs):
      '''None'''
    ...
    def MultipleWidgetCreatorsError (self, *args, **kwargs):
      '''None'''
    ...
    def _CompoundNumericPlugValueWidget__ensureChildPlugValueWidgets (self):
      '''None'''
    ...
    def _CompoundNumericPlugValueWidget__gang (self):
      '''None'''
    ...
    def _CompoundNumericPlugValueWidget__keyPress (self, widget, event):
      '''None'''
    ...
    def _CompoundNumericPlugValueWidget__ungang (self):
      '''None'''
    ...
    def _PlugValueWidget__applyPreset (self, presetName, *unused):
      '''None'''
    ...
    def _PlugValueWidget__applyReadOnly (self, readOnly):
      '''None'''
    ...
    def _PlugValueWidget__applyUserDefaults (self):
      '''None'''
    ...
    def _PlugValueWidget__auxiliaryPlugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__buttonPress (self, widget, event, buttonMask):
      '''None'''
    ...
    def _PlugValueWidget__callLegacyUpdateMethods (self):
      '''None'''
    ...
    def _PlugValueWidget__callUpdateFromValues (self):
      '''None'''
    ...
    def _PlugValueWidget__contextChanged (self, context, key):
      '''None'''
    ...
    def _PlugValueWidget__contextMenu (self, *unused):
      '''None'''
    ...
    def _PlugValueWidget__copyValue (self):
      '''None'''
    ...
    def _PlugValueWidget__creator (plug, typeMetadata):
      '''None'''
    ...
    def _PlugValueWidget__defaultContext (graphComponent):
      '''None'''
    ...
    def _PlugValueWidget__dragEnter (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__dragLeave (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__drop (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__editInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__fallbackContext (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__nodeMetadataChanged (self, nodeTypeId, key, node):
      '''None'''
    ...
    def _PlugValueWidget__plugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugInputChanged (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugMetadataChanged (self, plug, key, reason):
      '''None'''
    ...
    def _PlugValueWidget__plugTypesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _PlugValueWidget__popupMenuSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__presetsSubMenu (self):
      '''None'''
    ...
    def _PlugValueWidget__removeInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__setPlugsInternal (self, plugs, callUpdateMethods):
      '''None'''
    ...
    def _PlugValueWidget__setValues (self, values):
      '''None'''
    ...
    def _PlugValueWidget__updateContextConnection (self):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackground (self, plugs, auxiliaryPlugs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPlug (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPostCall (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPreCall (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _addPopupMenu (self, widget=None, buttons=GafferUI._GafferUI.Buttons.Right):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _auxiliaryPlugs (self, plug):
      '''None'''
    ...
    def _blockedUpdateFromValues (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _convertValue (self, value):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _editable (self, canEditAnimation=False):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _plugConnections (self):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _popupMenu (menuDefinition, plugValueWidget):
      '''None'''
    ...
    def _popupMenuDefinition (self):
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _requestUpdateFromValues (self, lazy=True):
      '''None'''
    ...
    def _row (self):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromEditable (self):
      '''None'''
    ...
    def _updateFromMetadata (self):
      '''None'''
    ...
    def _updateFromValues (self, values, exception):
      '''None'''
    ...
    def _valuesDependOnContext (self):
      '''None'''
    ...
    def _valuesForUpdate (plugs, auxiliaryPlugs):
      '''None'''
    ...
    def acquire (plug):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childPlugValueWidget (self, childPlug):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (plugs, typeMetadata='plugValueWidget:type'):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getPlug (self):
      '''None'''
    ...
    def getPlugs (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def hasLabel (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def popupMenuSignal ():
      '''None'''
    ...
    def registerType (plugClassOrTypeId, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setPlug (self, plug):
      '''None'''
    ...
    def setPlugs (self, plugs):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def CompoundPathFilterWidget (*args):
      '''

'''      
    ...

class CompoundPathFilterWidget:
    def _PathFilterWidget__pathFilterChanged (self, pathFilter):
      '''None'''
    ...
    def _PathFilterWidget__typesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _pathFilterChangedConnection (self):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromPathFilter (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (pathFilter):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def pathFilter (self):
      '''None'''
    ...
    def registerType (pathFilterClass, widgetCreationFunction):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def CompoundPathPreview (*args):
      '''

'''      
    ...

class CompoundPathPreview:
    def _CompoundPathPreview__currentTabChanged (self, tabbedContainer, current):
      '''None'''
    ...
    def _PathPreviewWidget__namesToCreators (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _PathPreviewWidget__pathChanged (self, path):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromPath (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (name, path):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getPath (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def isValid (self):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def registerType (name, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setPath (self, path):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def types ():
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def ComputeNodeUI (*args):
      '''

'''      
    ...

def ConfirmationDialogue (*args):
      '''

'''      
    ...

class ConfirmationDialogue:
    def SizeMode (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def _Dialogue__buttonClicked (self, button):
      '''None'''
    ...
    def _Dialogue__close (self, widget):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _Window__caughtKeys ():
      '''None'''
    ...
    def _Window__caughtKeysSet (self, *args, **kwargs):
      '''None'''
    ...
    def _Window__constrainToScreen (self, position):
      '''None'''
    ...
    def _Window__keyPress (self, widget, event):
      '''None'''
    ...
    def _acceptsClose (self):
      '''None'''
    ...
    def _addButton (self, textOrButton):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _getWidget (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _revealDescendant (self, descendant):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _setWidget (self, widget):
      '''None'''
    ...
    def addChild (self, child):
      '''None'''
    ...
    def addChildWindow (self, childWindow, removeOnClose=False):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childWindows (self):
      '''None'''
    ...
    def close (self):
      '''None'''
    ...
    def closedSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getChild (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getFullScreen (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getIcon (self):
      '''None'''
    ...
    def getModal (self):
      '''None'''
    ...
    def getPosition (self):
      '''None'''
    ...
    def getResizeable (self):
      '''None'''
    ...
    def getSizeMode (self):
      '''None'''
    ...
    def getTitle (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def preCloseSignal (self):
      '''None'''
    ...
    def removeChild (self, child):
      '''None'''
    ...
    def resizeToFitChild (self, shrink=True, expand=True):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setChild (self, child):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setFullScreen (self, fullScreen):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setIcon (self, imageOrImageFileName):
      '''None'''
    ...
    def setModal (self, modal, parentWindow=None):
      '''None'''
    ...
    def setPosition (self, position, forcePosition=False):
      '''None'''
    ...
    def setResizeable (self, resizeable):
      '''None'''
    ...
    def setSizeMode (self, sizeMode):
      '''None'''
    ...
    def setTitle (self, title):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def waitForButton (self, parentWindow=None):
      '''None'''
    ...
    def waitForConfirmation (self, **kw):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def ConnectionCreator (*args):
      '''
__init__(_object*)

'''      
    ...

class ConnectionCreator:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ButtonSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DirtyType (self, *args, **kwargs):
      '''None'''
    ...
    def DragBeginSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DragDropSignal (self, *args, **kwargs):
      '''None'''
    ...
    def EnterLeaveSignal (self, *args, **kwargs):
      '''None'''
    ...
    def IdleSignal (self, *args, **kwargs):
      '''None'''
    ...
    def KeySignal (self, *args, **kwargs):
      '''None'''
    ...
    def Layer (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def RenderReason (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def VisibilityChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _dirty (self, *args, **kwargs):
      '''
_dirty( (Gadget)arg1, (DirtyType)arg2) -> None :

    C++ signature :
        void _dirty(GafferUI::Gadget {lvalue},GafferUI::Gadget::DirtyType)'''
    ...
    def _idleSignalAccessedSignal (self, *args, **kwargs):
      '''
_idleSignalAccessedSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} _idleSignalAccessedSignal()'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (ConnectionCreator)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(GafferUI::ConnectionCreator,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (ConnectionCreator)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(GafferUI::ConnectionCreator,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def bound (self, *args, **kwargs):
      '''
bound( (ConnectionCreator)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > bound(GafferUI::ConnectionCreator)'''
    ...
    def buttonDoubleClickSignal (self, *args, **kwargs):
      '''
buttonDoubleClickSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonDoubleClickSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonPressSignal (self, *args, **kwargs):
      '''
buttonPressSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonReleaseSignal (self, *args, **kwargs):
      '''
buttonReleaseSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def canCreateConnection (self, *args, **kwargs):
      '''
canCreateConnection( (ConnectionCreator)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool canCreateConnection(GafferUI::ConnectionCreator,Gaffer::Plug const*)'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createConnection (self, *args, **kwargs):
      '''
createConnection( (ConnectionCreator)arg1, (Plug)arg2) -> None :

    C++ signature :
        void createConnection(GafferUI::ConnectionCreator {lvalue},Gaffer::Plug*)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def dragBeginSignal (self, *args, **kwargs):
      '''
dragBeginSignal( (Gadget)arg1) -> DragBeginSignal :

    C++ signature :
        Gaffer::Signals::Signal<boost::intrusive_ptr<IECore::RunTimeTyped> (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<boost::intrusive_ptr<IECore::RunTimeTyped> > > {lvalue} dragBeginSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEndSignal (self, *args, **kwargs):
      '''
dragEndSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEndSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEnterSignal (self, *args, **kwargs):
      '''
dragEnterSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEnterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragLeaveSignal (self, *args, **kwargs):
      '''
dragLeaveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragLeaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragMoveSignal (self, *args, **kwargs):
      '''
dragMoveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dropSignal (self, *args, **kwargs):
      '''
dropSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dropSignal(GafferUI::Gadget {lvalue})'''
    ...
    def enabled (self, *args, **kwargs):
      '''
enabled( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool enabled(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def enterSignal (self, *args, **kwargs):
      '''
enterSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} enterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def fullTransform (self, *args, **kwargs):
      '''
fullTransform( (Gadget)arg1 [, (Gadget)arg2]) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> fullTransform(GafferUI::Gadget {lvalue} [,GafferUI::Gadget const*])'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getEnabled (self, *args, **kwargs):
      '''
getEnabled( (Gadget)arg1) -> bool :

    C++ signature :
        bool getEnabled(GafferUI::Gadget {lvalue})'''
    ...
    def getHighlighted (self, *args, **kwargs):
      '''
getHighlighted( (Gadget)arg1) -> bool :

    C++ signature :
        bool getHighlighted(GafferUI::Gadget {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getStyle (self, *args, **kwargs):
      '''
getStyle( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> getStyle(GafferUI::Gadget {lvalue})'''
    ...
    def getToolTip (self, *args, **kwargs):
      '''
getToolTip( (ConnectionCreator)arg1, (LineSegment3f)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > getToolTip(GafferUI::ConnectionCreator,IECore::LineSegment<Imath_3_1::Vec3<float> >)'''
    ...
    def getTransform (self, *args, **kwargs):
      '''
getTransform( (Gadget)arg1) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> getTransform(GafferUI::Gadget {lvalue})'''
    ...
    def getVisible (self, *args, **kwargs):
      '''
getVisible( (Gadget)arg1) -> bool :

    C++ signature :
        bool getVisible(GafferUI::Gadget {lvalue})'''
    ...
    def idleSignal (self, *args, **kwargs):
      '''
idleSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} idleSignal()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (ConnectionCreator)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::ConnectionCreator {lvalue},IECore::TypeId)

isInstanceOf( (ConnectionCreator)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::ConnectionCreator {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keyPressSignal (self, *args, **kwargs):
      '''
keyPressSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keyReleaseSignal (self, *args, **kwargs):
      '''
keyReleaseSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def leaveSignal (self, *args, **kwargs):
      '''
leaveSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} leaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def mouseMoveSignal (self, *args, **kwargs):
      '''
mouseMoveSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} mouseMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setEnabled (self, *args, **kwargs):
      '''
setEnabled( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnabled(GafferUI::Gadget {lvalue},bool)'''
    ...
    def setHighlighted (self, *args, **kwargs):
      '''
setHighlighted( (ConnectionCreator)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHighlighted(GafferUI::ConnectionCreator {lvalue},bool)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setStyle (self, *args, **kwargs):
      '''
setStyle( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setStyle(GafferUI::Gadget {lvalue},boost::intrusive_ptr<GafferUI::Style const>)'''
    ...
    def setToolTip (self, *args, **kwargs):
      '''
setToolTip( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setToolTip(GafferUI::Gadget {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def setTransform (self, *args, **kwargs):
      '''
setTransform( (Gadget)arg1, (M44f)arg2) -> None :

    C++ signature :
        void setTransform(GafferUI::Gadget {lvalue},Imath_3_1::Matrix44<float>)'''
    ...
    def setVisible (self, *args, **kwargs):
      '''
setVisible( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setVisible(GafferUI::Gadget {lvalue},bool)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def style (self, *args, **kwargs):
      '''
style( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> style(GafferUI::Gadget {lvalue})'''
    ...
    def transformedBound (self, *args, **kwargs):
      '''
transformedBound( (Gadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue})

transformedBound( (Gadget)arg1, (Gadget)arg2) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue},GafferUI::Gadget const*)'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (ConnectionCreator)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(GafferUI::ConnectionCreator {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (ConnectionCreator)arg1) -> str :

    C++ signature :
        char const* typeName(GafferUI::ConnectionCreator {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def updateDragEndPoint (self, *args, **kwargs):
      '''
updateDragEndPoint( (ConnectionCreator)arg1, (V3f)arg2, (V3f)arg3) -> None :

    C++ signature :
        void updateDragEndPoint(GafferUI::ConnectionCreator {lvalue},Imath_3_1::Vec3<float>,Imath_3_1::Vec3<float>)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...
    def visibilityChangedSignal (self, *args, **kwargs):
      '''
visibilityChangedSignal( (Gadget)arg1) -> VisibilityChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} visibilityChangedSignal(GafferUI::Gadget {lvalue})'''
    ...
    def visible (self, *args, **kwargs):
      '''
visible( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool visible(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def wheelSignal (self, *args, **kwargs):
      '''
wheelSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} wheelSignal(GafferUI::Gadget {lvalue})'''
    ...

def ConnectionGadget (*args):
      '''

'''      
    ...

class ConnectionGadget:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ButtonSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DirtyType (self, *args, **kwargs):
      '''None'''
    ...
    def DragBeginSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DragDropSignal (self, *args, **kwargs):
      '''None'''
    ...
    def EnterLeaveSignal (self, *args, **kwargs):
      '''None'''
    ...
    def IdleSignal (self, *args, **kwargs):
      '''None'''
    ...
    def KeySignal (self, *args, **kwargs):
      '''None'''
    ...
    def Layer (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def RenderReason (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def VisibilityChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _dirty (self, *args, **kwargs):
      '''
_dirty( (Gadget)arg1, (DirtyType)arg2) -> None :

    C++ signature :
        void _dirty(GafferUI::Gadget {lvalue},GafferUI::Gadget::DirtyType)'''
    ...
    def _idleSignalAccessedSignal (self, *args, **kwargs):
      '''
_idleSignalAccessedSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} _idleSignalAccessedSignal()'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (ConnectionGadget)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(GafferUI::ConnectionGadget,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (ConnectionGadget)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(GafferUI::ConnectionGadget,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def bound (self, *args, **kwargs):
      '''
bound( (ConnectionGadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > bound(GafferUI::ConnectionGadget)'''
    ...
    def buttonDoubleClickSignal (self, *args, **kwargs):
      '''
buttonDoubleClickSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonDoubleClickSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonPressSignal (self, *args, **kwargs):
      '''
buttonPressSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonReleaseSignal (self, *args, **kwargs):
      '''
buttonReleaseSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def canCreateConnection (self, *args, **kwargs):
      '''
canCreateConnection( (ConnectionGadget)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool canCreateConnection(GafferUI::ConnectionGadget,Gaffer::Plug const*)'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def create (self, *args, **kwargs):
      '''
create( (object)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::ConnectionGadget> create(boost::intrusive_ptr<GafferUI::Nodule>,boost::intrusive_ptr<GafferUI::Nodule>)'''
    ...
    def createConnection (self, *args, **kwargs):
      '''
createConnection( (ConnectionGadget)arg1, (Plug)arg2) -> None :

    C++ signature :
        void createConnection(GafferUI::ConnectionGadget {lvalue},Gaffer::Plug*)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def dragBeginSignal (self, *args, **kwargs):
      '''
dragBeginSignal( (Gadget)arg1) -> DragBeginSignal :

    C++ signature :
        Gaffer::Signals::Signal<boost::intrusive_ptr<IECore::RunTimeTyped> (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<boost::intrusive_ptr<IECore::RunTimeTyped> > > {lvalue} dragBeginSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEndSignal (self, *args, **kwargs):
      '''
dragEndSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEndSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEnterSignal (self, *args, **kwargs):
      '''
dragEnterSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEnterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragLeaveSignal (self, *args, **kwargs):
      '''
dragLeaveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragLeaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragMoveSignal (self, *args, **kwargs):
      '''
dragMoveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dropSignal (self, *args, **kwargs):
      '''
dropSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dropSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dstNodule (self, *args, **kwargs):
      '''
dstNodule( (ConnectionGadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Nodule> dstNodule(GafferUI::ConnectionGadget {lvalue})'''
    ...
    def enabled (self, *args, **kwargs):
      '''
enabled( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool enabled(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def enterSignal (self, *args, **kwargs):
      '''
enterSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} enterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def fullTransform (self, *args, **kwargs):
      '''
fullTransform( (Gadget)arg1 [, (Gadget)arg2]) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> fullTransform(GafferUI::Gadget {lvalue} [,GafferUI::Gadget const*])'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getEnabled (self, *args, **kwargs):
      '''
getEnabled( (Gadget)arg1) -> bool :

    C++ signature :
        bool getEnabled(GafferUI::Gadget {lvalue})'''
    ...
    def getHighlighted (self, *args, **kwargs):
      '''
getHighlighted( (Gadget)arg1) -> bool :

    C++ signature :
        bool getHighlighted(GafferUI::Gadget {lvalue})'''
    ...
    def getMinimised (self, *args, **kwargs):
      '''
getMinimised( (ConnectionGadget)arg1) -> bool :

    C++ signature :
        bool getMinimised(GafferUI::ConnectionGadget {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getStyle (self, *args, **kwargs):
      '''
getStyle( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> getStyle(GafferUI::Gadget {lvalue})'''
    ...
    def getToolTip (self, *args, **kwargs):
      '''
getToolTip( (ConnectionGadget)arg1, (LineSegment3f)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > getToolTip(GafferUI::ConnectionGadget,IECore::LineSegment<Imath_3_1::Vec3<float> >)'''
    ...
    def getTransform (self, *args, **kwargs):
      '''
getTransform( (Gadget)arg1) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> getTransform(GafferUI::Gadget {lvalue})'''
    ...
    def getVisible (self, *args, **kwargs):
      '''
getVisible( (Gadget)arg1) -> bool :

    C++ signature :
        bool getVisible(GafferUI::Gadget {lvalue})'''
    ...
    def idleSignal (self, *args, **kwargs):
      '''
idleSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} idleSignal()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (ConnectionGadget)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::ConnectionGadget {lvalue},IECore::TypeId)

isInstanceOf( (ConnectionGadget)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::ConnectionGadget {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keyPressSignal (self, *args, **kwargs):
      '''
keyPressSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keyReleaseSignal (self, *args, **kwargs):
      '''
keyReleaseSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def leaveSignal (self, *args, **kwargs):
      '''
leaveSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} leaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def mouseMoveSignal (self, *args, **kwargs):
      '''
mouseMoveSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} mouseMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerConnectionGadget (self, *args, **kwargs):
      '''
registerConnectionGadget( (TypeId)arg1, (object)arg2) -> None :

    C++ signature :
        void registerConnectionGadget(IECore::TypeId,boost::python::api::object)

registerConnectionGadget( (TypeId)arg1, (object)arg2, (object)arg3) -> None :

    C++ signature :
        void registerConnectionGadget(IECore::TypeId,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,boost::python::api::object)'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setEnabled (self, *args, **kwargs):
      '''
setEnabled( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnabled(GafferUI::Gadget {lvalue},bool)'''
    ...
    def setHighlighted (self, *args, **kwargs):
      '''
setHighlighted( (ConnectionGadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHighlighted(GafferUI::ConnectionGadget {lvalue},bool)'''
    ...
    def setMinimised (self, *args, **kwargs):
      '''
setMinimised( (ConnectionGadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setMinimised(GafferUI::ConnectionGadget {lvalue},bool)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setNodules (self, *args, **kwargs):
      '''
setNodules( (ConnectionGadget)arg1, (object)arg2, (object)arg3) -> None :

    C++ signature :
        void setNodules(GafferUI::ConnectionGadget {lvalue},boost::intrusive_ptr<GafferUI::Nodule>,boost::intrusive_ptr<GafferUI::Nodule>)'''
    ...
    def setStyle (self, *args, **kwargs):
      '''
setStyle( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setStyle(GafferUI::Gadget {lvalue},boost::intrusive_ptr<GafferUI::Style const>)'''
    ...
    def setToolTip (self, *args, **kwargs):
      '''
setToolTip( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setToolTip(GafferUI::Gadget {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def setTransform (self, *args, **kwargs):
      '''
setTransform( (Gadget)arg1, (M44f)arg2) -> None :

    C++ signature :
        void setTransform(GafferUI::Gadget {lvalue},Imath_3_1::Matrix44<float>)'''
    ...
    def setVisible (self, *args, **kwargs):
      '''
setVisible( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setVisible(GafferUI::Gadget {lvalue},bool)'''
    ...
    def srcNodule (self, *args, **kwargs):
      '''
srcNodule( (ConnectionGadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Nodule> srcNodule(GafferUI::ConnectionGadget {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def style (self, *args, **kwargs):
      '''
style( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> style(GafferUI::Gadget {lvalue})'''
    ...
    def transformedBound (self, *args, **kwargs):
      '''
transformedBound( (Gadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue})

transformedBound( (Gadget)arg1, (Gadget)arg2) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue},GafferUI::Gadget const*)'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (ConnectionGadget)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(GafferUI::ConnectionGadget {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (ConnectionGadget)arg1) -> str :

    C++ signature :
        char const* typeName(GafferUI::ConnectionGadget {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def updateDragEndPoint (self, *args, **kwargs):
      '''
updateDragEndPoint( (ConnectionGadget)arg1, (V3f)arg2, (V3f)arg3) -> None :

    C++ signature :
        void updateDragEndPoint(GafferUI::ConnectionGadget {lvalue},Imath_3_1::Vec3<float>,Imath_3_1::Vec3<float>)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...
    def visibilityChangedSignal (self, *args, **kwargs):
      '''
visibilityChangedSignal( (Gadget)arg1) -> VisibilityChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} visibilityChangedSignal(GafferUI::Gadget {lvalue})'''
    ...
    def visible (self, *args, **kwargs):
      '''
visible( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool visible(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def wheelSignal (self, *args, **kwargs):
      '''
wheelSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} wheelSignal(GafferUI::Gadget {lvalue})'''
    ...

def ConnectionPlugValueWidget (*args):
      '''

'''      
    ...

class ConnectionPlugValueWidget:
    def MultiplePlugTypesError (self, *args, **kwargs):
      '''None'''
    ...
    def MultiplePlugsError (self, *args, **kwargs):
      '''None'''
    ...
    def MultipleWidgetCreatorsError (self, *args, **kwargs):
      '''None'''
    ...
    def _ConnectionPlugValueWidget__buttonRelease (self, widget, event):
      '''None'''
    ...
    def _ConnectionPlugValueWidget__labelFormatter (graphComponents):
      '''None'''
    ...
    def _PlugValueWidget__applyPreset (self, presetName, *unused):
      '''None'''
    ...
    def _PlugValueWidget__applyReadOnly (self, readOnly):
      '''None'''
    ...
    def _PlugValueWidget__applyUserDefaults (self):
      '''None'''
    ...
    def _PlugValueWidget__auxiliaryPlugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__buttonPress (self, widget, event, buttonMask):
      '''None'''
    ...
    def _PlugValueWidget__callLegacyUpdateMethods (self):
      '''None'''
    ...
    def _PlugValueWidget__callUpdateFromValues (self):
      '''None'''
    ...
    def _PlugValueWidget__contextChanged (self, context, key):
      '''None'''
    ...
    def _PlugValueWidget__contextMenu (self, *unused):
      '''None'''
    ...
    def _PlugValueWidget__copyValue (self):
      '''None'''
    ...
    def _PlugValueWidget__creator (plug, typeMetadata):
      '''None'''
    ...
    def _PlugValueWidget__defaultContext (graphComponent):
      '''None'''
    ...
    def _PlugValueWidget__dragEnter (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__dragLeave (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__drop (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__editInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__fallbackContext (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__nodeMetadataChanged (self, nodeTypeId, key, node):
      '''None'''
    ...
    def _PlugValueWidget__plugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugInputChanged (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugMetadataChanged (self, plug, key, reason):
      '''None'''
    ...
    def _PlugValueWidget__plugTypesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _PlugValueWidget__popupMenuSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__presetsSubMenu (self):
      '''None'''
    ...
    def _PlugValueWidget__removeInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__setPlugsInternal (self, plugs, callUpdateMethods):
      '''None'''
    ...
    def _PlugValueWidget__setValues (self, values):
      '''None'''
    ...
    def _PlugValueWidget__updateContextConnection (self):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackground (self, plugs, auxiliaryPlugs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPlug (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPostCall (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPreCall (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _addPopupMenu (self, widget=None, buttons=GafferUI._GafferUI.Buttons.Right):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _auxiliaryPlugs (self, plug):
      '''None'''
    ...
    def _blockedUpdateFromValues (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _convertValue (self, value):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _editable (self, canEditAnimation=False):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _plugConnections (self):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _popupMenuDefinition (self):
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _requestUpdateFromValues (self, lazy=True):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromEditable (self):
      '''None'''
    ...
    def _updateFromMetadata (self):
      '''None'''
    ...
    def _updateFromValues (self, values, exception):
      '''None'''
    ...
    def _valuesDependOnContext (self):
      '''None'''
    ...
    def _valuesForUpdate (plugs, auxiliaryPlugs):
      '''None'''
    ...
    def acquire (plug):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childPlugValueWidget (self, childPlug):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (plugs, typeMetadata='plugValueWidget:type'):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getPlug (self):
      '''None'''
    ...
    def getPlugs (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def hasLabel (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def popupMenuSignal ():
      '''None'''
    ...
    def registerType (plugClassOrTypeId, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setPlug (self, plug):
      '''None'''
    ...
    def setPlugs (self, plugs):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def ContainerGadget (*args):
      '''

'''      
    ...

class ContainerGadget:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ButtonSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DirtyType (self, *args, **kwargs):
      '''None'''
    ...
    def DragBeginSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DragDropSignal (self, *args, **kwargs):
      '''None'''
    ...
    def EnterLeaveSignal (self, *args, **kwargs):
      '''None'''
    ...
    def IdleSignal (self, *args, **kwargs):
      '''None'''
    ...
    def KeySignal (self, *args, **kwargs):
      '''None'''
    ...
    def Layer (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def RenderReason (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def VisibilityChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _dirty (self, *args, **kwargs):
      '''
_dirty( (Gadget)arg1, (DirtyType)arg2) -> None :

    C++ signature :
        void _dirty(GafferUI::Gadget {lvalue},GafferUI::Gadget::DirtyType)'''
    ...
    def _idleSignalAccessedSignal (self, *args, **kwargs):
      '''
_idleSignalAccessedSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} _idleSignalAccessedSignal()'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (ContainerGadget)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(GafferUI::ContainerGadget,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (ContainerGadget)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(GafferUI::ContainerGadget,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def bound (self, *args, **kwargs):
      '''
bound( (ContainerGadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > bound(GafferUI::ContainerGadget)'''
    ...
    def buttonDoubleClickSignal (self, *args, **kwargs):
      '''
buttonDoubleClickSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonDoubleClickSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonPressSignal (self, *args, **kwargs):
      '''
buttonPressSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonReleaseSignal (self, *args, **kwargs):
      '''
buttonReleaseSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def dragBeginSignal (self, *args, **kwargs):
      '''
dragBeginSignal( (Gadget)arg1) -> DragBeginSignal :

    C++ signature :
        Gaffer::Signals::Signal<boost::intrusive_ptr<IECore::RunTimeTyped> (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<boost::intrusive_ptr<IECore::RunTimeTyped> > > {lvalue} dragBeginSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEndSignal (self, *args, **kwargs):
      '''
dragEndSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEndSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEnterSignal (self, *args, **kwargs):
      '''
dragEnterSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEnterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragLeaveSignal (self, *args, **kwargs):
      '''
dragLeaveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragLeaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragMoveSignal (self, *args, **kwargs):
      '''
dragMoveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dropSignal (self, *args, **kwargs):
      '''
dropSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dropSignal(GafferUI::Gadget {lvalue})'''
    ...
    def enabled (self, *args, **kwargs):
      '''
enabled( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool enabled(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def enterSignal (self, *args, **kwargs):
      '''
enterSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} enterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def fullTransform (self, *args, **kwargs):
      '''
fullTransform( (Gadget)arg1 [, (Gadget)arg2]) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> fullTransform(GafferUI::Gadget {lvalue} [,GafferUI::Gadget const*])'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getEnabled (self, *args, **kwargs):
      '''
getEnabled( (Gadget)arg1) -> bool :

    C++ signature :
        bool getEnabled(GafferUI::Gadget {lvalue})'''
    ...
    def getHighlighted (self, *args, **kwargs):
      '''
getHighlighted( (Gadget)arg1) -> bool :

    C++ signature :
        bool getHighlighted(GafferUI::Gadget {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getPadding (self, *args, **kwargs):
      '''
getPadding( (ContainerGadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > getPadding(GafferUI::ContainerGadget {lvalue})'''
    ...
    def getStyle (self, *args, **kwargs):
      '''
getStyle( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> getStyle(GafferUI::Gadget {lvalue})'''
    ...
    def getToolTip (self, *args, **kwargs):
      '''
getToolTip( (ContainerGadget)arg1, (LineSegment3f)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > getToolTip(GafferUI::ContainerGadget,IECore::LineSegment<Imath_3_1::Vec3<float> >)'''
    ...
    def getTransform (self, *args, **kwargs):
      '''
getTransform( (Gadget)arg1) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> getTransform(GafferUI::Gadget {lvalue})'''
    ...
    def getVisible (self, *args, **kwargs):
      '''
getVisible( (Gadget)arg1) -> bool :

    C++ signature :
        bool getVisible(GafferUI::Gadget {lvalue})'''
    ...
    def idleSignal (self, *args, **kwargs):
      '''
idleSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} idleSignal()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (ContainerGadget)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::ContainerGadget {lvalue},IECore::TypeId)

isInstanceOf( (ContainerGadget)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::ContainerGadget {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keyPressSignal (self, *args, **kwargs):
      '''
keyPressSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keyReleaseSignal (self, *args, **kwargs):
      '''
keyReleaseSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def leaveSignal (self, *args, **kwargs):
      '''
leaveSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} leaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def mouseMoveSignal (self, *args, **kwargs):
      '''
mouseMoveSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} mouseMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setEnabled (self, *args, **kwargs):
      '''
setEnabled( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnabled(GafferUI::Gadget {lvalue},bool)'''
    ...
    def setHighlighted (self, *args, **kwargs):
      '''
setHighlighted( (ContainerGadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHighlighted(GafferUI::ContainerGadget {lvalue},bool)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setPadding (self, *args, **kwargs):
      '''
setPadding( (ContainerGadget)arg1, (Box3f)arg2) -> None :

    C++ signature :
        void setPadding(GafferUI::ContainerGadget {lvalue},Imath_3_1::Box<Imath_3_1::Vec3<float> >)'''
    ...
    def setStyle (self, *args, **kwargs):
      '''
setStyle( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setStyle(GafferUI::Gadget {lvalue},boost::intrusive_ptr<GafferUI::Style const>)'''
    ...
    def setToolTip (self, *args, **kwargs):
      '''
setToolTip( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setToolTip(GafferUI::Gadget {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def setTransform (self, *args, **kwargs):
      '''
setTransform( (Gadget)arg1, (M44f)arg2) -> None :

    C++ signature :
        void setTransform(GafferUI::Gadget {lvalue},Imath_3_1::Matrix44<float>)'''
    ...
    def setVisible (self, *args, **kwargs):
      '''
setVisible( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setVisible(GafferUI::Gadget {lvalue},bool)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def style (self, *args, **kwargs):
      '''
style( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> style(GafferUI::Gadget {lvalue})'''
    ...
    def transformedBound (self, *args, **kwargs):
      '''
transformedBound( (Gadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue})

transformedBound( (Gadget)arg1, (Gadget)arg2) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue},GafferUI::Gadget const*)'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (ContainerGadget)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(GafferUI::ContainerGadget {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (ContainerGadget)arg1) -> str :

    C++ signature :
        char const* typeName(GafferUI::ContainerGadget {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...
    def visibilityChangedSignal (self, *args, **kwargs):
      '''
visibilityChangedSignal( (Gadget)arg1) -> VisibilityChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} visibilityChangedSignal(GafferUI::Gadget {lvalue})'''
    ...
    def visible (self, *args, **kwargs):
      '''
visible( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool visible(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def wheelSignal (self, *args, **kwargs):
      '''
wheelSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} wheelSignal(GafferUI::Gadget {lvalue})'''
    ...

def ContainerWidget (*args):
      '''

'''      
    ...

class ContainerWidget:
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _revealDescendant (self, descendant):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def addChild (self, child, **kw):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def removeChild (self, child):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def ContextProcessorUI (*args):
      '''

'''      
    ...

def ContextQueryUI (*args):
      '''

'''      
    ...

def ContextVariableTweaksUI (*args):
      '''

'''      
    ...

def ContextVariablesUI (*args):
      '''

'''      
    ...

def DataPathPreview (*args):
      '''

'''      
    ...

class DataPathPreview:
    def _DeferredPathPreview__display (selfWeakRef, o):
      '''None'''
    ...
    def _DeferredPathPreview__displayBusy (selfWeakRef):
      '''None'''
    ...
    def _DeferredPathPreview__load (selfWeakRef):
      '''None'''
    ...
    def _PathPreviewWidget__namesToCreators (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _PathPreviewWidget__pathChanged (self, path):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _deferredUpdate (self, data):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _load (self):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromPath (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (name, path):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getPath (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def isValid (self):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def registerType (name, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setPath (self, path):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def types ():
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def DeferredPathPreview (*args):
      '''

'''      
    ...

class DeferredPathPreview:
    def _DeferredPathPreview__display (selfWeakRef, o):
      '''None'''
    ...
    def _DeferredPathPreview__displayBusy (selfWeakRef):
      '''None'''
    ...
    def _DeferredPathPreview__load (selfWeakRef):
      '''None'''
    ...
    def _PathPreviewWidget__namesToCreators (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _PathPreviewWidget__pathChanged (self, path):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _deferredUpdate (self, loaded):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _load (self):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromPath (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (name, path):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getPath (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def isValid (self):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def registerType (name, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setPath (self, path):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def types ():
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def DeleteContextVariablesUI (*args):
      '''

'''      
    ...

def DependencyNodeUI (*args):
      '''

'''      
    ...

def Dialogue (*args):
      '''

'''      
    ...

class Dialogue:
    def SizeMode (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def _Dialogue__buttonClicked (self, button):
      '''None'''
    ...
    def _Dialogue__close (self, widget):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _Window__caughtKeys ():
      '''None'''
    ...
    def _Window__caughtKeysSet (self, *args, **kwargs):
      '''None'''
    ...
    def _Window__constrainToScreen (self, position):
      '''None'''
    ...
    def _Window__keyPress (self, widget, event):
      '''None'''
    ...
    def _acceptsClose (self):
      '''None'''
    ...
    def _addButton (self, textOrButton):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _getWidget (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _revealDescendant (self, descendant):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _setWidget (self, widget):
      '''None'''
    ...
    def addChild (self, child):
      '''None'''
    ...
    def addChildWindow (self, childWindow, removeOnClose=False):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childWindows (self):
      '''None'''
    ...
    def close (self):
      '''None'''
    ...
    def closedSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getChild (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getFullScreen (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getIcon (self):
      '''None'''
    ...
    def getModal (self):
      '''None'''
    ...
    def getPosition (self):
      '''None'''
    ...
    def getResizeable (self):
      '''None'''
    ...
    def getSizeMode (self):
      '''None'''
    ...
    def getTitle (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def preCloseSignal (self):
      '''None'''
    ...
    def removeChild (self, child):
      '''None'''
    ...
    def resizeToFitChild (self, shrink=True, expand=True):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setChild (self, child):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setFullScreen (self, fullScreen):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setIcon (self, imageOrImageFileName):
      '''None'''
    ...
    def setModal (self, modal, parentWindow=None):
      '''None'''
    ...
    def setPosition (self, position, forcePosition=False):
      '''None'''
    ...
    def setResizeable (self, resizeable):
      '''None'''
    ...
    def setSizeMode (self, sizeMode):
      '''None'''
    ...
    def setTitle (self, title):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def waitForButton (self, parentWindow=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def Divider (*args):
      '''

'''      
    ...

class Divider:
    def Orientation (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getOrientation (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setOrientation (self, orientation):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def DocumentationAlgo (*args):
      '''

'''      
    ...

def DotNodeGadget (*args):
      '''
__init__(_object*, boost::intrusive_ptr<Gaffer::Node>)

'''      
    ...

class DotNodeGadget:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ButtonSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DirtyType (self, *args, **kwargs):
      '''None'''
    ...
    def DragBeginSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DragDropSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Edge (self, *args, **kwargs):
      '''None'''
    ...
    def EnterLeaveSignal (self, *args, **kwargs):
      '''None'''
    ...
    def IdleSignal (self, *args, **kwargs):
      '''None'''
    ...
    def KeySignal (self, *args, **kwargs):
      '''None'''
    ...
    def Layer (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def RenderReason (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def VisibilityChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _dirty (self, *args, **kwargs):
      '''
_dirty( (Gadget)arg1, (DirtyType)arg2) -> None :

    C++ signature :
        void _dirty(GafferUI::Gadget {lvalue},GafferUI::Gadget::DirtyType)'''
    ...
    def _idleSignalAccessedSignal (self, *args, **kwargs):
      '''
_idleSignalAccessedSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} _idleSignalAccessedSignal()'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (DotNodeGadget)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(GafferUI::DotNodeGadget,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (DotNodeGadget)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(GafferUI::DotNodeGadget,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def bound (self, *args, **kwargs):
      '''
bound( (DotNodeGadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > bound(GafferUI::DotNodeGadget)'''
    ...
    def buttonDoubleClickSignal (self, *args, **kwargs):
      '''
buttonDoubleClickSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonDoubleClickSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonPressSignal (self, *args, **kwargs):
      '''
buttonPressSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonReleaseSignal (self, *args, **kwargs):
      '''
buttonReleaseSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def connectionTangent (self, *args, **kwargs):
      '''
connectionTangent( (DotNodeGadget)arg1, (ConnectionCreator)arg2) -> V3f :

    C++ signature :
        Imath_3_1::Vec3<float> connectionTangent(GafferUI::DotNodeGadget {lvalue},GafferUI::ConnectionCreator const*)'''
    ...
    def create (self, *args, **kwargs):
      '''
create( (object)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::NodeGadget> create(boost::intrusive_ptr<Gaffer::Node>)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def dragBeginSignal (self, *args, **kwargs):
      '''
dragBeginSignal( (Gadget)arg1) -> DragBeginSignal :

    C++ signature :
        Gaffer::Signals::Signal<boost::intrusive_ptr<IECore::RunTimeTyped> (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<boost::intrusive_ptr<IECore::RunTimeTyped> > > {lvalue} dragBeginSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEndSignal (self, *args, **kwargs):
      '''
dragEndSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEndSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEnterSignal (self, *args, **kwargs):
      '''
dragEnterSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEnterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragLeaveSignal (self, *args, **kwargs):
      '''
dragLeaveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragLeaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragMoveSignal (self, *args, **kwargs):
      '''
dragMoveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dropSignal (self, *args, **kwargs):
      '''
dropSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dropSignal(GafferUI::Gadget {lvalue})'''
    ...
    def enabled (self, *args, **kwargs):
      '''
enabled( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool enabled(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def enterSignal (self, *args, **kwargs):
      '''
enterSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} enterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def fullTransform (self, *args, **kwargs):
      '''
fullTransform( (Gadget)arg1 [, (Gadget)arg2]) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> fullTransform(GafferUI::Gadget {lvalue} [,GafferUI::Gadget const*])'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getContents (self, *args, **kwargs):
      '''
getContents( (StandardNodeGadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Gadget> getContents(GafferUI::StandardNodeGadget {lvalue})'''
    ...
    def getEdgeGadget (self, *args, **kwargs):
      '''
getEdgeGadget( (StandardNodeGadget)arg1, (Edge)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Gadget> getEdgeGadget(GafferUI::StandardNodeGadget {lvalue},GafferUI::StandardNodeGadget::Edge)'''
    ...
    def getEnabled (self, *args, **kwargs):
      '''
getEnabled( (Gadget)arg1) -> bool :

    C++ signature :
        bool getEnabled(GafferUI::Gadget {lvalue})'''
    ...
    def getHighlighted (self, *args, **kwargs):
      '''
getHighlighted( (Gadget)arg1) -> bool :

    C++ signature :
        bool getHighlighted(GafferUI::Gadget {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getStyle (self, *args, **kwargs):
      '''
getStyle( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> getStyle(GafferUI::Gadget {lvalue})'''
    ...
    def getToolTip (self, *args, **kwargs):
      '''
getToolTip( (DotNodeGadget)arg1, (LineSegment3f)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > getToolTip(GafferUI::DotNodeGadget,IECore::LineSegment<Imath_3_1::Vec3<float> >)'''
    ...
    def getTransform (self, *args, **kwargs):
      '''
getTransform( (Gadget)arg1) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> getTransform(GafferUI::Gadget {lvalue})'''
    ...
    def getVisible (self, *args, **kwargs):
      '''
getVisible( (Gadget)arg1) -> bool :

    C++ signature :
        bool getVisible(GafferUI::Gadget {lvalue})'''
    ...
    def idleSignal (self, *args, **kwargs):
      '''
idleSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} idleSignal()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (DotNodeGadget)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::DotNodeGadget {lvalue},IECore::TypeId)

isInstanceOf( (DotNodeGadget)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::DotNodeGadget {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keyPressSignal (self, *args, **kwargs):
      '''
keyPressSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keyReleaseSignal (self, *args, **kwargs):
      '''
keyReleaseSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def leaveSignal (self, *args, **kwargs):
      '''
leaveSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} leaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def mouseMoveSignal (self, *args, **kwargs):
      '''
mouseMoveSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} mouseMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (NodeGadget)arg1) -> object :

    C++ signature :
        Gaffer::Node* node(GafferUI::NodeGadget {lvalue})'''
    ...
    def nodule (self, *args, **kwargs):
      '''
nodule( (DotNodeGadget)arg1, (Plug)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Nodule> nodule(GafferUI::DotNodeGadget {lvalue},Gaffer::Plug const*)'''
    ...
    def noduleAddedSignal (self, *args, **kwargs):
      '''
noduleAddedSignal( (NodeGadget)arg1) -> NoduleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::NodeGadget*, GafferUI::Nodule*), Gaffer::Signals::DefaultCombiner<void> > {lvalue} noduleAddedSignal(GafferUI::NodeGadget {lvalue})'''
    ...
    def noduleRemovedSignal (self, *args, **kwargs):
      '''
noduleRemovedSignal( (NodeGadget)arg1) -> NoduleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::NodeGadget*, GafferUI::Nodule*), Gaffer::Signals::DefaultCombiner<void> > {lvalue} noduleRemovedSignal(GafferUI::NodeGadget {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerNodeGadget (self, *args, **kwargs):
      '''
registerNodeGadget( (TypeId)arg1, (object)arg2) -> None :

    C++ signature :
        void registerNodeGadget(IECore::TypeId,boost::python::api::object)

registerNodeGadget( (object)nodeGadgetType, (object)creator [, (TypeId)nodeType=IECore._IECore.TypeId.Invalid]) -> None :

    C++ signature :
        void registerNodeGadget(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,boost::python::api::object [,IECore::TypeId=IECore._IECore.TypeId.Invalid])'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setContents (self, *args, **kwargs):
      '''
setContents( (StandardNodeGadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setContents(GafferUI::StandardNodeGadget {lvalue},boost::intrusive_ptr<GafferUI::Gadget>)'''
    ...
    def setEdgeGadget (self, *args, **kwargs):
      '''
setEdgeGadget( (StandardNodeGadget)arg1, (Edge)arg2, (object)arg3) -> None :

    C++ signature :
        void setEdgeGadget(GafferUI::StandardNodeGadget {lvalue},GafferUI::StandardNodeGadget::Edge,boost::intrusive_ptr<GafferUI::Gadget>)'''
    ...
    def setEnabled (self, *args, **kwargs):
      '''
setEnabled( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnabled(GafferUI::Gadget {lvalue},bool)'''
    ...
    def setHighlighted (self, *args, **kwargs):
      '''
setHighlighted( (DotNodeGadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHighlighted(GafferUI::DotNodeGadget {lvalue},bool)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setStyle (self, *args, **kwargs):
      '''
setStyle( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setStyle(GafferUI::Gadget {lvalue},boost::intrusive_ptr<GafferUI::Style const>)'''
    ...
    def setToolTip (self, *args, **kwargs):
      '''
setToolTip( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setToolTip(GafferUI::Gadget {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def setTransform (self, *args, **kwargs):
      '''
setTransform( (Gadget)arg1, (M44f)arg2) -> None :

    C++ signature :
        void setTransform(GafferUI::Gadget {lvalue},Imath_3_1::Matrix44<float>)'''
    ...
    def setVisible (self, *args, **kwargs):
      '''
setVisible( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setVisible(GafferUI::Gadget {lvalue},bool)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def style (self, *args, **kwargs):
      '''
style( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> style(GafferUI::Gadget {lvalue})'''
    ...
    def transformedBound (self, *args, **kwargs):
      '''
transformedBound( (Gadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue})

transformedBound( (Gadget)arg1, (Gadget)arg2) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue},GafferUI::Gadget const*)'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (DotNodeGadget)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(GafferUI::DotNodeGadget {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (DotNodeGadget)arg1) -> str :

    C++ signature :
        char const* typeName(GafferUI::DotNodeGadget {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...
    def visibilityChangedSignal (self, *args, **kwargs):
      '''
visibilityChangedSignal( (Gadget)arg1) -> VisibilityChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} visibilityChangedSignal(GafferUI::Gadget {lvalue})'''
    ...
    def visible (self, *args, **kwargs):
      '''
visible( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool visible(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def wheelSignal (self, *args, **kwargs):
      '''
wheelSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} wheelSignal(GafferUI::Gadget {lvalue})'''
    ...

def DotUI (*args):
      '''

'''      
    ...

def DragDropEvent (*args):
      '''
__init__(_object*, GafferUI::ButtonEvent::Buttons, GafferUI::ButtonEvent::Buttons, IECore::LineSegment<Imath_3_1::Vec3<float> >, GafferUI::ModifiableEvent::Modifiers)
__init__(_object*, GafferUI::ButtonEvent::Buttons, GafferUI::ButtonEvent::Buttons, IECore::LineSegment<Imath_3_1::Vec3<float> >)
__init__(_object*, GafferUI::ButtonEvent::Buttons, GafferUI::ButtonEvent::Buttons)
__init__(_object*)

'''      
    ...

class DragDropEvent:
    def Buttons (self, *args, **kwargs):
      '''None'''
    ...
    def Modifiers (self, *args, **kwargs):
      '''None'''
    ...
    def button (self, *args, **kwargs):
      '''None'''
    ...
    def buttons (self, *args, **kwargs):
      '''None'''
    ...
    def data (self, *args, **kwargs):
      '''None'''
    ...
    def destinationGadget (self, *args, **kwargs):
      '''None'''
    ...
    def dropResult (self, *args, **kwargs):
      '''None'''
    ...
    def line (self, *args, **kwargs):
      '''None'''
    ...
    def modifiers (self, *args, **kwargs):
      '''None'''
    ...
    def sourceGadget (self, *args, **kwargs):
      '''None'''
    ...
    def wheelRotation (self, *args, **kwargs):
      '''None'''
    ...

class Edge:
    def Bottom (self, *args, **kwargs):
      '''An enumeration.'''
    ...
    def Left (self, *args, **kwargs):
      '''An enumeration.'''
    ...
    def Right (self, *args, **kwargs):
      '''An enumeration.'''
    ...
    def Top (self, *args, **kwargs):
      '''An enumeration.'''
    ...
    def name (self, *args, **kwargs):
      '''The name of the Enum member.'''
    ...
    def value (self, *args, **kwargs):
      '''The value of the Enum member.'''
    ...

def EditMenu (*args):
      '''

'''      
    ...

def EditScopeUI (*args):
      '''

'''      
    ...

def Editor (*args):
      '''

'''      
    ...

class Editor:
    def Settings (name, script):
      '''None'''
    ...
    def _Editor__contextChanged (self, context, key):
      '''None'''
    ...
    def _Editor__enter (self, widget):
      '''None'''
    ...
    def _Editor__leave (self, widget):
      '''None'''
    ...
    def _Editor__namesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Editor__setContextInternal (self, context, callUpdate):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _contextChangedConnection (self):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromContext (self, modifiedItems):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (name, scriptNode):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getTitle (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def instanceCreatedSignal ():
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def registerType (name, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def scriptNode (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setTitle (self, title):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def titleChangedSignal (self):
      '''None'''
    ...
    def types ():
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def EditorWidget (*args):
      '''

'''      
    ...

class EditorWidget:
    def Settings (name, script):
      '''None'''
    ...
    def _Editor__contextChanged (self, context, key):
      '''None'''
    ...
    def _Editor__enter (self, widget):
      '''None'''
    ...
    def _Editor__leave (self, widget):
      '''None'''
    ...
    def _Editor__namesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Editor__setContextInternal (self, context, callUpdate):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _contextChangedConnection (self):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromContext (self, modifiedItems):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (name, scriptNode):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getTitle (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def instanceCreatedSignal ():
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def registerType (name, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def scriptNode (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setTitle (self, title):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def titleChangedSignal (self):
      '''None'''
    ...
    def types ():
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def Enums (*args):
      '''

'''      
    ...

def ErrorDialogue (*args):
      '''

'''      
    ...

class ErrorDialogue:
    def ErrorHandler (handleExceptions=True, handleErrorMessages=True, handleWarningMessages=True, parentWindow=None, **kw):
      '''None'''
    ...
    def ExceptionHandler (**kw):
      '''None'''
    ...
    def SizeMode (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def _Dialogue__buttonClicked (self, button):
      '''None'''
    ...
    def _Dialogue__close (self, widget):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _Window__caughtKeys ():
      '''None'''
    ...
    def _Window__caughtKeysSet (self, *args, **kwargs):
      '''None'''
    ...
    def _Window__constrainToScreen (self, position):
      '''None'''
    ...
    def _Window__keyPress (self, widget, event):
      '''None'''
    ...
    def _acceptsClose (self):
      '''None'''
    ...
    def _addButton (self, textOrButton):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _getWidget (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _revealDescendant (self, descendant):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _setWidget (self, widget):
      '''None'''
    ...
    def addChild (self, child):
      '''None'''
    ...
    def addChildWindow (self, childWindow, removeOnClose=False):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childWindows (self):
      '''None'''
    ...
    def close (self):
      '''None'''
    ...
    def closedSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayException (title='Error', messagePrefix=None, withDetails=True, parentWindow=None, exceptionInfo=None):
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getChild (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getFullScreen (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getIcon (self):
      '''None'''
    ...
    def getModal (self):
      '''None'''
    ...
    def getPosition (self):
      '''None'''
    ...
    def getResizeable (self):
      '''None'''
    ...
    def getSizeMode (self):
      '''None'''
    ...
    def getTitle (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def preCloseSignal (self):
      '''None'''
    ...
    def removeChild (self, child):
      '''None'''
    ...
    def resizeToFitChild (self, shrink=True, expand=True):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setChild (self, child):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setFullScreen (self, fullScreen):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setIcon (self, imageOrImageFileName):
      '''None'''
    ...
    def setModal (self, modal, parentWindow=None):
      '''None'''
    ...
    def setPosition (self, position, forcePosition=False):
      '''None'''
    ...
    def setResizeable (self, resizeable):
      '''None'''
    ...
    def setSizeMode (self, sizeMode):
      '''None'''
    ...
    def setTitle (self, title):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def waitForButton (self, parentWindow=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def Event (*args):
      '''
__init__(_object*)

'''      
    ...

class Event:

def EventLoop (*args):
      '''

'''      
    ...

class EventLoop:
    def BlockedUIThreadExecution ():
      '''None'''
    ...
    def _EventLoop__RunStyle (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def _EventLoop__ensureIdleTimer ():
      '''None'''
    ...
    def _EventLoop__idleCallbacks (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _EventLoop__idleTimer (self, *args, **kwargs):
      '''None'''
    ...
    def _EventLoop__mainEventLoop (self, *args, **kwargs):
      '''None'''
    ...
    def _EventLoop__pump (self, thrusts=1):
      '''None'''
    ...
    def _EventLoop__pumpThreadFn (self):
      '''None'''
    ...
    def _EventLoop__qtApplication (self, *args, **kwargs):
      '''None'''
    ...
    def _EventLoop__qtIdleCallback ():
      '''None'''
    ...
    def _gadgetIdleSignalAccessed ():
      '''None'''
    ...
    def addIdleCallback (callback):
      '''None'''
    ...
    def executeOnUIThread (callable, waitForResult=False):
      '''None'''
    ...
    def mainEventLoop ():
      '''None'''
    ...
    def removeIdleCallback (callback):
      '''None'''
    ...
    def running (self):
      '''None'''
    ...
    def start (self):
      '''None'''
    ...
    def stop (self):
      '''None'''
    ...
    def style (self, *args, **kwargs):
      '''None'''
    ...
    def waitForIdle (count=1000):
      '''None'''
    ...

def Examples (*args):
      '''

'''      
    ...

def ExpressionUI (*args):
      '''

'''      
    ...

def FileIconPathColumn (*args):
      '''
__init__(_object*, GafferUI::PathColumn::SizeMode sizeMode=GafferUI._GafferUI.SizeMode.Default)

'''      
    ...

class FileIconPathColumn:
    def ButtonSignal (self, *args, **kwargs):
      '''None'''
    ...
    def CellData (self, *args, **kwargs):
      '''None'''
    ...
    def PathColumnSignal (self, *args, **kwargs):
      '''None'''
    ...
    def SizeMode (self, *args, **kwargs):
      '''None'''
    ...
    def buttonDoubleClickSignal (self, *args, **kwargs):
      '''
buttonDoubleClickSignal( (PathColumn)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (Gaffer::Path&, GafferUI::PathListingWidget&, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonDoubleClickSignal(GafferUI::PathColumn {lvalue})'''
    ...
    def buttonPressSignal (self, *args, **kwargs):
      '''
buttonPressSignal( (PathColumn)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (Gaffer::Path&, GafferUI::PathListingWidget&, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonPressSignal(GafferUI::PathColumn {lvalue})'''
    ...
    def buttonReleaseSignal (self, *args, **kwargs):
      '''
buttonReleaseSignal( (PathColumn)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (Gaffer::Path&, GafferUI::PathListingWidget&, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonReleaseSignal(GafferUI::PathColumn {lvalue})'''
    ...
    def cellData (self, *args, **kwargs):
      '''
cellData( (PathColumn)arg1, (Path)path [, (Canceller)canceller=None]) -> CellData :

    C++ signature :
        GafferUI::PathColumn::CellData cellData(GafferUI::PathColumn {lvalue},Gaffer::Path [,IECore::Canceller const*=None])'''
    ...
    def changedSignal (self, *args, **kwargs):
      '''
changedSignal( (PathColumn)arg1) -> PathColumnSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::PathColumn*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} changedSignal(GafferUI::PathColumn {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getSizeMode (self, *args, **kwargs):
      '''
getSizeMode( (PathColumn)arg1) -> SizeMode :

    C++ signature :
        GafferUI::PathColumn::SizeMode getSizeMode(GafferUI::PathColumn {lvalue})'''
    ...
    def headerData (self, *args, **kwargs):
      '''
headerData( (PathColumn)arg1 [, (Canceller)canceller=None]) -> CellData :

    C++ signature :
        GafferUI::PathColumn::CellData headerData(GafferUI::PathColumn {lvalue} [,IECore::Canceller const*=None])'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def setSizeMode (self, *args, **kwargs):
      '''
setSizeMode( (PathColumn)arg1, (SizeMode)sizeMode) -> None :

    C++ signature :
        void setSizeMode(GafferUI::PathColumn {lvalue},GafferUI::PathColumn::SizeMode)'''
    ...

def FileMenu (*args):
      '''

'''      
    ...

def FileSequencePathFilterWidget (*args):
      '''

'''      
    ...

class FileSequencePathFilterWidget:
    def _FileSequencePathFilterWidget__stateChanged (self, checkBox):
      '''None'''
    ...
    def _PathFilterWidget__pathFilterChanged (self, pathFilter):
      '''None'''
    ...
    def _PathFilterWidget__typesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _pathFilterChangedConnection (self):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromPathFilter (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (pathFilter):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def pathFilter (self):
      '''None'''
    ...
    def registerType (pathFilterClass, widgetCreationFunction):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def FileSystemPathPlugValueWidget (*args):
      '''

'''      
    ...

class FileSystemPathPlugValueWidget:
    def MultiplePlugTypesError (self, *args, **kwargs):
      '''None'''
    ...
    def MultiplePlugsError (self, *args, **kwargs):
      '''None'''
    ...
    def MultipleWidgetCreatorsError (self, *args, **kwargs):
      '''None'''
    ...
    def _FileSystemPathPlugValueWidget__extensions (self):
      '''None'''
    ...
    def _FileSystemPathPlugValueWidget__metadataValue (self, name):
      '''None'''
    ...
    def _PathPlugValueWidget__buttonClicked (self, widget):
      '''None'''
    ...
    def _PathPlugValueWidget__metadataValue (self, name):
      '''None'''
    ...
    def _PathPlugValueWidget__setPlugValue (self, *args):
      '''None'''
    ...
    def _PlugValueWidget__applyPreset (self, presetName, *unused):
      '''None'''
    ...
    def _PlugValueWidget__applyReadOnly (self, readOnly):
      '''None'''
    ...
    def _PlugValueWidget__applyUserDefaults (self):
      '''None'''
    ...
    def _PlugValueWidget__auxiliaryPlugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__buttonPress (self, widget, event, buttonMask):
      '''None'''
    ...
    def _PlugValueWidget__callLegacyUpdateMethods (self):
      '''None'''
    ...
    def _PlugValueWidget__callUpdateFromValues (self):
      '''None'''
    ...
    def _PlugValueWidget__contextChanged (self, context, key):
      '''None'''
    ...
    def _PlugValueWidget__contextMenu (self, *unused):
      '''None'''
    ...
    def _PlugValueWidget__copyValue (self):
      '''None'''
    ...
    def _PlugValueWidget__creator (plug, typeMetadata):
      '''None'''
    ...
    def _PlugValueWidget__defaultContext (graphComponent):
      '''None'''
    ...
    def _PlugValueWidget__dragEnter (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__dragLeave (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__drop (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__editInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__fallbackContext (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__nodeMetadataChanged (self, nodeTypeId, key, node):
      '''None'''
    ...
    def _PlugValueWidget__plugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugInputChanged (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugMetadataChanged (self, plug, key, reason):
      '''None'''
    ...
    def _PlugValueWidget__plugTypesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _PlugValueWidget__popupMenuSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__presetsSubMenu (self):
      '''None'''
    ...
    def _PlugValueWidget__removeInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__setPlugsInternal (self, plugs, callUpdateMethods):
      '''None'''
    ...
    def _PlugValueWidget__setValues (self, values):
      '''None'''
    ...
    def _PlugValueWidget__updateContextConnection (self):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackground (self, plugs, auxiliaryPlugs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPlug (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPostCall (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPreCall (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _addPopupMenu (self, widget=None, buttons=GafferUI._GafferUI.Buttons.Right):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _auxiliaryPlugs (self, plug):
      '''None'''
    ...
    def _blockedUpdateFromValues (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _convertValue (self, value):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _editable (self, canEditAnimation=False):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _pathChooserDialogue (self):
      '''None'''
    ...
    def _plugConnections (self):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _popupMenuDefinition (self):
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _requestUpdateFromValues (self, lazy=True):
      '''None'''
    ...
    def _setPlugFromPath (self, path):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromEditable (self):
      '''None'''
    ...
    def _updateFromMetadata (self):
      '''None'''
    ...
    def _updateFromValues (self, values, exception):
      '''None'''
    ...
    def _valuesDependOnContext (self):
      '''None'''
    ...
    def _valuesForUpdate (plugs, auxiliaryPlugs):
      '''None'''
    ...
    def acquire (plug):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childPlugValueWidget (self, childPlug):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (plugs, typeMetadata='plugValueWidget:type'):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getPlug (self):
      '''None'''
    ...
    def getPlugs (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def hasLabel (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def path (self):
      '''None'''
    ...
    def pathWidget (self):
      '''None'''
    ...
    def popupMenuSignal ():
      '''None'''
    ...
    def registerType (plugClassOrTypeId, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setPlug (self, plug):
      '''None'''
    ...
    def setPlugs (self, plugs):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def FileSystemPathVectorDataPlugValueWidget (*args):
      '''

'''      
    ...

class FileSystemPathVectorDataPlugValueWidget:
    def MultiplePlugTypesError (self, *args, **kwargs):
      '''None'''
    ...
    def MultiplePlugsError (self, *args, **kwargs):
      '''None'''
    ...
    def MultipleWidgetCreatorsError (self, *args, **kwargs):
      '''None'''
    ...
    def _FileSystemPathVectorDataPlugValueWidget__extensions (self):
      '''None'''
    ...
    def _PathVectorDataPlugValueWidget__dataChanged (self, widget):
      '''None'''
    ...
    def _PathVectorDataPlugValueWidget__pathChooserDialogueKeywords (self):
      '''None'''
    ...
    def _PlugValueWidget__applyPreset (self, presetName, *unused):
      '''None'''
    ...
    def _PlugValueWidget__applyReadOnly (self, readOnly):
      '''None'''
    ...
    def _PlugValueWidget__applyUserDefaults (self):
      '''None'''
    ...
    def _PlugValueWidget__auxiliaryPlugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__buttonPress (self, widget, event, buttonMask):
      '''None'''
    ...
    def _PlugValueWidget__callLegacyUpdateMethods (self):
      '''None'''
    ...
    def _PlugValueWidget__callUpdateFromValues (self):
      '''None'''
    ...
    def _PlugValueWidget__contextChanged (self, context, key):
      '''None'''
    ...
    def _PlugValueWidget__contextMenu (self, *unused):
      '''None'''
    ...
    def _PlugValueWidget__copyValue (self):
      '''None'''
    ...
    def _PlugValueWidget__creator (plug, typeMetadata):
      '''None'''
    ...
    def _PlugValueWidget__defaultContext (graphComponent):
      '''None'''
    ...
    def _PlugValueWidget__dragEnter (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__dragLeave (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__drop (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__editInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__fallbackContext (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__nodeMetadataChanged (self, nodeTypeId, key, node):
      '''None'''
    ...
    def _PlugValueWidget__plugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugInputChanged (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugMetadataChanged (self, plug, key, reason):
      '''None'''
    ...
    def _PlugValueWidget__plugTypesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _PlugValueWidget__popupMenuSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__presetsSubMenu (self):
      '''None'''
    ...
    def _PlugValueWidget__removeInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__setPlugsInternal (self, plugs, callUpdateMethods):
      '''None'''
    ...
    def _PlugValueWidget__setValues (self, values):
      '''None'''
    ...
    def _PlugValueWidget__updateContextConnection (self):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackground (self, plugs, auxiliaryPlugs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPlug (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPostCall (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPreCall (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _addPopupMenu (self, widget=None, buttons=GafferUI._GafferUI.Buttons.Right):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _auxiliaryPlugs (self, plug):
      '''None'''
    ...
    def _blockedUpdateFromValues (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _convertValue (self, value):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _editable (self, canEditAnimation=False):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _plugConnections (self):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _popupMenuDefinition (self):
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _requestUpdateFromValues (self, lazy=True):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromEditable (self):
      '''None'''
    ...
    def _updateFromMetadata (self):
      '''None'''
    ...
    def _updateFromValues (self, values, exception):
      '''None'''
    ...
    def _valuesDependOnContext (self):
      '''None'''
    ...
    def _valuesForUpdate (plugs, auxiliaryPlugs):
      '''None'''
    ...
    def acquire (plug):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childPlugValueWidget (self, childPlug):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (plugs, typeMetadata='plugValueWidget:type'):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getPlug (self):
      '''None'''
    ...
    def getPlugs (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def hasLabel (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def path (self):
      '''None'''
    ...
    def popupMenuSignal ():
      '''None'''
    ...
    def registerType (plugClassOrTypeId, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setPlug (self, plug):
      '''None'''
    ...
    def setPlugs (self, plugs):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def Frame (*args):
      '''

'''      
    ...

class Frame:
    def BorderStyle (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _revealDescendant (self, descendant):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def addChild (self, child):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getBorderStyle (self):
      '''None'''
    ...
    def getChild (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def removeChild (self, child):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setBorderStyle (self, borderStyle):
      '''None'''
    ...
    def setChild (self, child):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def GLWidget (*args):
      '''

'''      
    ...

class GLWidget:
    def BufferOptions (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def _GLWidget__draw (self):
      '''None'''
    ...
    def _GLWidget__visibilityChanged (self, widget):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _draw (self):
      '''None'''
    ...
    def _glWidget (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _makeCurrent (self):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _redraw (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _resize (self, size):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def addOverlay (self, overlay):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def removeChild (self, child):
      '''None'''
    ...
    def removeOverlay (self, overlay):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def Gadget (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
__init__(_object*)

'''      
    ...

class Gadget:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ButtonSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DirtyType (self, *args, **kwargs):
      '''None'''
    ...
    def DragBeginSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DragDropSignal (self, *args, **kwargs):
      '''None'''
    ...
    def EnterLeaveSignal (self, *args, **kwargs):
      '''None'''
    ...
    def IdleSignal (self, *args, **kwargs):
      '''None'''
    ...
    def KeySignal (self, *args, **kwargs):
      '''None'''
    ...
    def Layer (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def RenderReason (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def VisibilityChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _dirty (self, *args, **kwargs):
      '''
_dirty( (Gadget)arg1, (DirtyType)arg2) -> None :

    C++ signature :
        void _dirty(GafferUI::Gadget {lvalue},GafferUI::Gadget::DirtyType)'''
    ...
    def _idleSignalAccessedSignal (self, *args, **kwargs):
      '''
_idleSignalAccessedSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} _idleSignalAccessedSignal()'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (Gadget)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(GafferUI::Gadget,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (Gadget)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(GafferUI::Gadget,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def bound (self, *args, **kwargs):
      '''
bound( (Gadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > bound(GafferUI::Gadget)'''
    ...
    def buttonDoubleClickSignal (self, *args, **kwargs):
      '''
buttonDoubleClickSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonDoubleClickSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonPressSignal (self, *args, **kwargs):
      '''
buttonPressSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonReleaseSignal (self, *args, **kwargs):
      '''
buttonReleaseSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def dragBeginSignal (self, *args, **kwargs):
      '''
dragBeginSignal( (Gadget)arg1) -> DragBeginSignal :

    C++ signature :
        Gaffer::Signals::Signal<boost::intrusive_ptr<IECore::RunTimeTyped> (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<boost::intrusive_ptr<IECore::RunTimeTyped> > > {lvalue} dragBeginSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEndSignal (self, *args, **kwargs):
      '''
dragEndSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEndSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEnterSignal (self, *args, **kwargs):
      '''
dragEnterSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEnterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragLeaveSignal (self, *args, **kwargs):
      '''
dragLeaveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragLeaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragMoveSignal (self, *args, **kwargs):
      '''
dragMoveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dropSignal (self, *args, **kwargs):
      '''
dropSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dropSignal(GafferUI::Gadget {lvalue})'''
    ...
    def enabled (self, *args, **kwargs):
      '''
enabled( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool enabled(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def enterSignal (self, *args, **kwargs):
      '''
enterSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} enterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def fullTransform (self, *args, **kwargs):
      '''
fullTransform( (Gadget)arg1 [, (Gadget)arg2]) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> fullTransform(GafferUI::Gadget {lvalue} [,GafferUI::Gadget const*])'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getEnabled (self, *args, **kwargs):
      '''
getEnabled( (Gadget)arg1) -> bool :

    C++ signature :
        bool getEnabled(GafferUI::Gadget {lvalue})'''
    ...
    def getHighlighted (self, *args, **kwargs):
      '''
getHighlighted( (Gadget)arg1) -> bool :

    C++ signature :
        bool getHighlighted(GafferUI::Gadget {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getStyle (self, *args, **kwargs):
      '''
getStyle( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> getStyle(GafferUI::Gadget {lvalue})'''
    ...
    def getToolTip (self, *args, **kwargs):
      '''
getToolTip( (Gadget)arg1, (LineSegment3f)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > getToolTip(GafferUI::Gadget,IECore::LineSegment<Imath_3_1::Vec3<float> >)'''
    ...
    def getTransform (self, *args, **kwargs):
      '''
getTransform( (Gadget)arg1) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> getTransform(GafferUI::Gadget {lvalue})'''
    ...
    def getVisible (self, *args, **kwargs):
      '''
getVisible( (Gadget)arg1) -> bool :

    C++ signature :
        bool getVisible(GafferUI::Gadget {lvalue})'''
    ...
    def idleSignal (self, *args, **kwargs):
      '''
idleSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} idleSignal()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (Gadget)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::Gadget {lvalue},IECore::TypeId)

isInstanceOf( (Gadget)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::Gadget {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keyPressSignal (self, *args, **kwargs):
      '''
keyPressSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keyReleaseSignal (self, *args, **kwargs):
      '''
keyReleaseSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def leaveSignal (self, *args, **kwargs):
      '''
leaveSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} leaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def mouseMoveSignal (self, *args, **kwargs):
      '''
mouseMoveSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} mouseMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setEnabled (self, *args, **kwargs):
      '''
setEnabled( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnabled(GafferUI::Gadget {lvalue},bool)'''
    ...
    def setHighlighted (self, *args, **kwargs):
      '''
setHighlighted( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHighlighted(GafferUI::Gadget {lvalue},bool)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setStyle (self, *args, **kwargs):
      '''
setStyle( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setStyle(GafferUI::Gadget {lvalue},boost::intrusive_ptr<GafferUI::Style const>)'''
    ...
    def setToolTip (self, *args, **kwargs):
      '''
setToolTip( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setToolTip(GafferUI::Gadget {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def setTransform (self, *args, **kwargs):
      '''
setTransform( (Gadget)arg1, (M44f)arg2) -> None :

    C++ signature :
        void setTransform(GafferUI::Gadget {lvalue},Imath_3_1::Matrix44<float>)'''
    ...
    def setVisible (self, *args, **kwargs):
      '''
setVisible( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setVisible(GafferUI::Gadget {lvalue},bool)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def style (self, *args, **kwargs):
      '''
style( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> style(GafferUI::Gadget {lvalue})'''
    ...
    def transformedBound (self, *args, **kwargs):
      '''
transformedBound( (Gadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue})

transformedBound( (Gadget)arg1, (Gadget)arg2) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue},GafferUI::Gadget const*)'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (Gadget)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(GafferUI::Gadget {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (Gadget)arg1) -> str :

    C++ signature :
        char const* typeName(GafferUI::Gadget {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...
    def visibilityChangedSignal (self, *args, **kwargs):
      '''
visibilityChangedSignal( (Gadget)arg1) -> VisibilityChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} visibilityChangedSignal(GafferUI::Gadget {lvalue})'''
    ...
    def visible (self, *args, **kwargs):
      '''
visible( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool visible(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def wheelSignal (self, *args, **kwargs):
      '''
wheelSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} wheelSignal(GafferUI::Gadget {lvalue})'''
    ...

def GadgetWidget (*args):
      '''

'''      
    ...

class GadgetWidget:
    def BufferOptions (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def _GLWidget__draw (self):
      '''None'''
    ...
    def _GLWidget__visibilityChanged (self, widget):
      '''None'''
    ...
    def _GadgetWidget__buttonDoubleClick (self, widget, event):
      '''None'''
    ...
    def _GadgetWidget__buttonPress (self, widget, event):
      '''None'''
    ...
    def _GadgetWidget__buttonRelease (self, widget, event):
      '''None'''
    ...
    def _GadgetWidget__dragBegin (self, widget, event):
      '''None'''
    ...
    def _GadgetWidget__dragEnd (self, widget, event):
      '''None'''
    ...
    def _GadgetWidget__dragEnter (self, widget, event):
      '''None'''
    ...
    def _GadgetWidget__dragLeave (self, widget, event):
      '''None'''
    ...
    def _GadgetWidget__dragMove (self, widget, event):
      '''None'''
    ...
    def _GadgetWidget__drop (self, widget, event):
      '''None'''
    ...
    def _GadgetWidget__enter (self, widget):
      '''None'''
    ...
    def _GadgetWidget__keyPress (self, widget, event):
      '''None'''
    ...
    def _GadgetWidget__keyRelease (self, widget, event):
      '''None'''
    ...
    def _GadgetWidget__leave (self, widget):
      '''None'''
    ...
    def _GadgetWidget__mouseMove (self, widget, event):
      '''None'''
    ...
    def _GadgetWidget__renderRequest (self, gadget):
      '''None'''
    ...
    def _GadgetWidget__visibilityChanged (self, widget):
      '''None'''
    ...
    def _GadgetWidget__wheel (self, widget, event):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _draw (self):
      '''None'''
    ...
    def _glWidget (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _makeCurrent (self):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _redraw (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _resize (self, size):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def addOverlay (self, overlay):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getViewportGadget (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def removeChild (self, child):
      '''None'''
    ...
    def removeOverlay (self, overlay):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setViewportGadget (self, viewportGadget):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def GraphBookmarksUI (*args):
      '''

'''      
    ...

def GraphComponentBrowserMode (*args):
      '''

'''      
    ...

class GraphComponentBrowserMode:
    def _Mode__actionsSubMenu (self, parameterValue):
      '''None'''
    ...
    def _Mode__contextMenu (self, pathListing):
      '''None'''
    ...
    def _Mode__createOpMatcher (self):
      '''None'''
    ...
    def _Mode__opDialogueCommand (self, op):
      '''None'''
    ...
    def _createOpMatcher (self):
      '''None'''
    ...
    def _initialColumns (self):
      '''None'''
    ...
    def _initialDisplayMode (self):
      '''None'''
    ...
    def _initialPath (self):
      '''None'''
    ...
    def browser (self):
      '''None'''
    ...
    def connect (self):
      '''None'''
    ...
    def disconnect (self):
      '''None'''
    ...

def GraphEditor (*args):
      '''

'''      
    ...

class GraphEditor:
    def Settings (name, script):
      '''None'''
    ...
    def _Editor__contextChanged (self, context, key):
      '''None'''
    ...
    def _Editor__enter (self, widget):
      '''None'''
    ...
    def _Editor__leave (self, widget):
      '''None'''
    ...
    def _Editor__namesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Editor__setContextInternal (self, context, callUpdate):
      '''None'''
    ...
    def _GraphEditor__annotationsMenu (self):
      '''None'''
    ...
    def _GraphEditor__buttonDoubleClick (self, widget, event):
      '''None'''
    ...
    def _GraphEditor__buttonPress (self, widget, event):
      '''None'''
    ...
    def _GraphEditor__childrenViewable (node):
      '''None'''
    ...
    def _GraphEditor__connectionContextMenuSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _GraphEditor__currentFrame (self):
      '''None'''
    ...
    def _GraphEditor__dragEnter (self, widget, event):
      '''None'''
    ...
    def _GraphEditor__dragLeave (self, widget, event):
      '''None'''
    ...
    def _GraphEditor__drop (self, widget, event):
      '''None'''
    ...
    def _GraphEditor__dropNodes (self, dragData):
      '''None'''
    ...
    def _GraphEditor__frame (self, nodes, extend=False, at=None):
      '''None'''
    ...
    def _GraphEditor__getNodeInputConnectionsVisible (graphGadget, node):
      '''None'''
    ...
    def _GraphEditor__getNodeOutputConnectionsVisible (graphGadget, node):
      '''None'''
    ...
    def _GraphEditor__keyPress (self, widget, event):
      '''None'''
    ...
    def _GraphEditor__nodeContextMenuSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _GraphEditor__nodeDoubleClickSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _GraphEditor__nodeGadgetAt (self, position):
      '''None'''
    ...
    def _GraphEditor__nodeMenuVisibilityChanged (self, widget):
      '''None'''
    ...
    def _GraphEditor__plugContextMenuSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _GraphEditor__popupNodeMenu (self):
      '''None'''
    ...
    def _GraphEditor__preRender (self, viewportGadget):
      '''None'''
    ...
    def _GraphEditor__rootChanged (self, graphGadget, previousRoot):
      '''None'''
    ...
    def _GraphEditor__rootNameChanged (self, root, oldName):
      '''None'''
    ...
    def _GraphEditor__rootParentChanged (self, node, oldParent):
      '''None'''
    ...
    def _GraphEditor__select (node):
      '''None'''
    ...
    def _GraphEditor__setEnabled (node, value):
      '''None'''
    ...
    def _GraphEditor__setNodeInputConnectionsVisible (graphGadget, node, value):
      '''None'''
    ...
    def _GraphEditor__setNodeOutputConnectionsVisible (graphGadget, node, value):
      '''None'''
    ...
    def _GraphEditor__setVisibleAnnotations (self, unused, annotations):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _contextChangedConnection (self):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _nodeMenu (self):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromContext (self, modifiedItems):
      '''None'''
    ...
    def acquire (rootNode):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def appendConnectionNavigationMenuDefinitions (graphEditor, destinationPlug, menuDefinition):
      '''None'''
    ...
    def appendConnectionVisibilityMenuDefinitions (graphEditor, node, menuDefinition):
      '''None'''
    ...
    def appendContentsMenuDefinitions (graphEditor, node, menuDefinition):
      '''None'''
    ...
    def appendEnabledPlugMenuDefinitions (graphEditor, node, menuDefinition):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def connectionContextMenuSignal ():
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (name, scriptNode):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def frame (self, nodes, extend=False):
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getTitle (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def graphGadget (self):
      '''None'''
    ...
    def graphGadgetWidget (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def instanceCreatedSignal ():
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def nodeContextMenuSignal ():
      '''None'''
    ...
    def nodeDoubleClickSignal ():
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def plugContextMenuSignal ():
      '''None'''
    ...
    def registerType (name, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def scriptNode (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setTitle (self, title):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def titleChangedSignal (self):
      '''None'''
    ...
    def types ():
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def GraphGadget (*args):
      '''
__init__(_object*, boost::intrusive_ptr<Gaffer::Node> root, boost::intrusive_ptr<Gaffer::Set> filter=None)

'''      
    ...

class GraphGadget:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ButtonSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DirtyType (self, *args, **kwargs):
      '''None'''
    ...
    def DragBeginSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DragDropSignal (self, *args, **kwargs):
      '''None'''
    ...
    def EnterLeaveSignal (self, *args, **kwargs):
      '''None'''
    ...
    def IdleSignal (self, *args, **kwargs):
      '''None'''
    ...
    def KeySignal (self, *args, **kwargs):
      '''None'''
    ...
    def Layer (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def RenderReason (self, *args, **kwargs):
      '''None'''
    ...
    def RootChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def VisibilityChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _activePlugsAndNodes (self, *args, **kwargs):
      '''
_activePlugsAndNodes( (Plug)arg1, (Context)arg2) -> tuple :

    C++ signature :
        boost::python::tuple _activePlugsAndNodes(Gaffer::Plug const*,Gaffer::Context const*)'''
    ...
    def _dirty (self, *args, **kwargs):
      '''
_dirty( (Gadget)arg1, (DirtyType)arg2) -> None :

    C++ signature :
        void _dirty(GafferUI::Gadget {lvalue},GafferUI::Gadget::DirtyType)'''
    ...
    def _idleSignalAccessedSignal (self, *args, **kwargs):
      '''
_idleSignalAccessedSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} _idleSignalAccessedSignal()'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (GraphGadget)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(GafferUI::GraphGadget,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (GraphGadget)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(GafferUI::GraphGadget,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def auxiliaryConnectionsGadget (self, *args, **kwargs):
      '''
auxiliaryConnectionsGadget( (GraphGadget)arg1) -> object :

    C++ signature :
        GafferUI::AuxiliaryConnectionsGadget* auxiliaryConnectionsGadget(GafferUI::GraphGadget {lvalue})'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def bound (self, *args, **kwargs):
      '''
bound( (GraphGadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > bound(GafferUI::GraphGadget)'''
    ...
    def buttonDoubleClickSignal (self, *args, **kwargs):
      '''
buttonDoubleClickSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonDoubleClickSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonPressSignal (self, *args, **kwargs):
      '''
buttonPressSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonReleaseSignal (self, *args, **kwargs):
      '''
buttonReleaseSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def connectedNodeGadgets (self, *args, **kwargs):
      '''
connectedNodeGadgets( (GraphGadget)arg1, (Node)node [, (Direction)direction=Gaffer._Gaffer.Direction.Invalid [, (int)degreesOfSeparation=18446744073709551615]]) -> list :

    C++ signature :
        boost::python::list connectedNodeGadgets(GafferUI::GraphGadget {lvalue},Gaffer::Node const* [,Gaffer::Plug::Direction=Gaffer._Gaffer.Direction.Invalid [,unsigned long=18446744073709551615]])'''
    ...
    def connectionGadget (self, *args, **kwargs):
      '''
connectionGadget( (GraphGadget)arg1, (Plug)arg2) -> object :

    C++ signature :
        GafferUI::ConnectionGadget* connectionGadget(GafferUI::GraphGadget {lvalue},Gaffer::Plug const*)'''
    ...
    def connectionGadgetAt (self, *args, **kwargs):
      '''
connectionGadgetAt( (GraphGadget)arg1, (LineSegment3f)arg2) -> object :

    C++ signature :
        GafferUI::ConnectionGadget* connectionGadgetAt(GafferUI::GraphGadget {lvalue},IECore::LineSegment<Imath_3_1::Vec3<float> >)'''
    ...
    def connectionGadgets (self, *args, **kwargs):
      '''
connectionGadgets( (GraphGadget)arg1, (Plug)plug [, (Set)excludedNodes=None]) -> list :

    C++ signature :
        boost::python::list connectionGadgets(GafferUI::GraphGadget {lvalue},Gaffer::Plug const* [,Gaffer::Set const*=None])

connectionGadgets( (GraphGadget)arg1, (Node)node [, (Set)excludedNodes=None]) -> list :

    C++ signature :
        boost::python::list connectionGadgets(GafferUI::GraphGadget {lvalue},Gaffer::Node const* [,Gaffer::Set const*=None])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def downstreamNodeGadgets (self, *args, **kwargs):
      '''
downstreamNodeGadgets( (GraphGadget)arg1, (Node)node [, (int)degreesOfSeparation=18446744073709551615]) -> list :

    C++ signature :
        boost::python::list downstreamNodeGadgets(GafferUI::GraphGadget {lvalue},Gaffer::Node const* [,unsigned long=18446744073709551615])'''
    ...
    def dragBeginSignal (self, *args, **kwargs):
      '''
dragBeginSignal( (Gadget)arg1) -> DragBeginSignal :

    C++ signature :
        Gaffer::Signals::Signal<boost::intrusive_ptr<IECore::RunTimeTyped> (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<boost::intrusive_ptr<IECore::RunTimeTyped> > > {lvalue} dragBeginSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEndSignal (self, *args, **kwargs):
      '''
dragEndSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEndSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEnterSignal (self, *args, **kwargs):
      '''
dragEnterSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEnterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragLeaveSignal (self, *args, **kwargs):
      '''
dragLeaveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragLeaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragMoveSignal (self, *args, **kwargs):
      '''
dragMoveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dropSignal (self, *args, **kwargs):
      '''
dropSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dropSignal(GafferUI::Gadget {lvalue})'''
    ...
    def enabled (self, *args, **kwargs):
      '''
enabled( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool enabled(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def enterSignal (self, *args, **kwargs):
      '''
enterSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} enterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def fullTransform (self, *args, **kwargs):
      '''
fullTransform( (Gadget)arg1 [, (Gadget)arg2]) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> fullTransform(GafferUI::Gadget {lvalue} [,GafferUI::Gadget const*])'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getEnabled (self, *args, **kwargs):
      '''
getEnabled( (Gadget)arg1) -> bool :

    C++ signature :
        bool getEnabled(GafferUI::Gadget {lvalue})'''
    ...
    def getFilter (self, *args, **kwargs):
      '''
getFilter( (GraphGadget)arg1) -> object :

    C++ signature :
        Gaffer::Set* getFilter(GafferUI::GraphGadget {lvalue})'''
    ...
    def getHighlighted (self, *args, **kwargs):
      '''
getHighlighted( (Gadget)arg1) -> bool :

    C++ signature :
        bool getHighlighted(GafferUI::Gadget {lvalue})'''
    ...
    def getLayout (self, *args, **kwargs):
      '''
getLayout( (GraphGadget)arg1) -> object :

    C++ signature :
        GafferUI::GraphLayout* getLayout(GafferUI::GraphGadget {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getNodeInputConnectionsMinimised (self, *args, **kwargs):
      '''
getNodeInputConnectionsMinimised( (GraphGadget)arg1, (Node)arg2) -> bool :

    C++ signature :
        bool getNodeInputConnectionsMinimised(GafferUI::GraphGadget {lvalue},Gaffer::Node const*)'''
    ...
    def getNodeOutputConnectionsMinimised (self, *args, **kwargs):
      '''
getNodeOutputConnectionsMinimised( (GraphGadget)arg1, (Node)arg2) -> bool :

    C++ signature :
        bool getNodeOutputConnectionsMinimised(GafferUI::GraphGadget {lvalue},Gaffer::Node const*)'''
    ...
    def getNodePosition (self, *args, **kwargs):
      '''
getNodePosition( (GraphGadget)arg1, (Node)arg2) -> V2f :

    C++ signature :
        Imath_3_1::Vec2<float> getNodePosition(GafferUI::GraphGadget {lvalue},Gaffer::Node const*)'''
    ...
    def getPadding (self, *args, **kwargs):
      '''
getPadding( (ContainerGadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > getPadding(GafferUI::ContainerGadget {lvalue})'''
    ...
    def getRoot (self, *args, **kwargs):
      '''
getRoot( (GraphGadget)arg1) -> object :

    C++ signature :
        Gaffer::Node* getRoot(GafferUI::GraphGadget {lvalue})'''
    ...
    def getStyle (self, *args, **kwargs):
      '''
getStyle( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> getStyle(GafferUI::Gadget {lvalue})'''
    ...
    def getToolTip (self, *args, **kwargs):
      '''
getToolTip( (GraphGadget)arg1, (LineSegment3f)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > getToolTip(GafferUI::GraphGadget,IECore::LineSegment<Imath_3_1::Vec3<float> >)'''
    ...
    def getTransform (self, *args, **kwargs):
      '''
getTransform( (Gadget)arg1) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> getTransform(GafferUI::Gadget {lvalue})'''
    ...
    def getVisible (self, *args, **kwargs):
      '''
getVisible( (Gadget)arg1) -> bool :

    C++ signature :
        bool getVisible(GafferUI::Gadget {lvalue})'''
    ...
    def hasNodePosition (self, *args, **kwargs):
      '''
hasNodePosition( (GraphGadget)arg1, (Node)arg2) -> bool :

    C++ signature :
        bool hasNodePosition(GafferUI::GraphGadget {lvalue},Gaffer::Node const*)'''
    ...
    def idleSignal (self, *args, **kwargs):
      '''
idleSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} idleSignal()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (GraphGadget)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::GraphGadget {lvalue},IECore::TypeId)

isInstanceOf( (GraphGadget)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::GraphGadget {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keyPressSignal (self, *args, **kwargs):
      '''
keyPressSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keyReleaseSignal (self, *args, **kwargs):
      '''
keyReleaseSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def leaveSignal (self, *args, **kwargs):
      '''
leaveSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} leaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def mouseMoveSignal (self, *args, **kwargs):
      '''
mouseMoveSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} mouseMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def nodeGadget (self, *args, **kwargs):
      '''
nodeGadget( (GraphGadget)arg1, (Node)arg2) -> object :

    C++ signature :
        GafferUI::NodeGadget* nodeGadget(GafferUI::GraphGadget {lvalue},Gaffer::Node const*)'''
    ...
    def nodeGadgetAt (self, *args, **kwargs):
      '''
nodeGadgetAt( (GraphGadget)arg1, (LineSegment3f)arg2) -> object :

    C++ signature :
        GafferUI::NodeGadget* nodeGadgetAt(GafferUI::GraphGadget {lvalue},IECore::LineSegment<Imath_3_1::Vec3<float> >)'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def rootChangedSignal (self, *args, **kwargs):
      '''
rootChangedSignal( (GraphGadget)arg1) -> RootChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::GraphGadget*, Gaffer::Node*), Gaffer::Signals::DefaultCombiner<void> > {lvalue} rootChangedSignal(GafferUI::GraphGadget {lvalue})'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setEnabled (self, *args, **kwargs):
      '''
setEnabled( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnabled(GafferUI::Gadget {lvalue},bool)'''
    ...
    def setFilter (self, *args, **kwargs):
      '''
setFilter( (GraphGadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setFilter(GafferUI::GraphGadget {lvalue},boost::intrusive_ptr<Gaffer::Set>)'''
    ...
    def setHighlighted (self, *args, **kwargs):
      '''
setHighlighted( (GraphGadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHighlighted(GafferUI::GraphGadget {lvalue},bool)'''
    ...
    def setLayout (self, *args, **kwargs):
      '''
setLayout( (GraphGadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setLayout(GafferUI::GraphGadget {lvalue},boost::intrusive_ptr<GafferUI::GraphLayout>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setNodeInputConnectionsMinimised (self, *args, **kwargs):
      '''
setNodeInputConnectionsMinimised( (GraphGadget)arg1, (Node)arg2, (bool)arg3) -> None :

    C++ signature :
        void setNodeInputConnectionsMinimised(GafferUI::GraphGadget {lvalue},Gaffer::Node {lvalue},bool)'''
    ...
    def setNodeOutputConnectionsMinimised (self, *args, **kwargs):
      '''
setNodeOutputConnectionsMinimised( (GraphGadget)arg1, (Node)arg2, (bool)arg3) -> None :

    C++ signature :
        void setNodeOutputConnectionsMinimised(GafferUI::GraphGadget {lvalue},Gaffer::Node {lvalue},bool)'''
    ...
    def setNodePosition (self, *args, **kwargs):
      '''
setNodePosition( (GraphGadget)arg1, (Node)arg2, (V2f)arg3) -> None :

    C++ signature :
        void setNodePosition(GafferUI::GraphGadget {lvalue},Gaffer::Node {lvalue},Imath_3_1::Vec2<float>)'''
    ...
    def setPadding (self, *args, **kwargs):
      '''
setPadding( (ContainerGadget)arg1, (Box3f)arg2) -> None :

    C++ signature :
        void setPadding(GafferUI::ContainerGadget {lvalue},Imath_3_1::Box<Imath_3_1::Vec3<float> >)'''
    ...
    def setRoot (self, *args, **kwargs):
      '''
setRoot( (GraphGadget)arg1, (object)root [, (object)filter=None]) -> None :

    C++ signature :
        void setRoot(GafferUI::GraphGadget {lvalue},boost::intrusive_ptr<Gaffer::Node> [,boost::intrusive_ptr<Gaffer::Set>=None])'''
    ...
    def setStyle (self, *args, **kwargs):
      '''
setStyle( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setStyle(GafferUI::Gadget {lvalue},boost::intrusive_ptr<GafferUI::Style const>)'''
    ...
    def setToolTip (self, *args, **kwargs):
      '''
setToolTip( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setToolTip(GafferUI::Gadget {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def setTransform (self, *args, **kwargs):
      '''
setTransform( (Gadget)arg1, (M44f)arg2) -> None :

    C++ signature :
        void setTransform(GafferUI::Gadget {lvalue},Imath_3_1::Matrix44<float>)'''
    ...
    def setVisible (self, *args, **kwargs):
      '''
setVisible( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setVisible(GafferUI::Gadget {lvalue},bool)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def style (self, *args, **kwargs):
      '''
style( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> style(GafferUI::Gadget {lvalue})'''
    ...
    def transformedBound (self, *args, **kwargs):
      '''
transformedBound( (Gadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue})

transformedBound( (Gadget)arg1, (Gadget)arg2) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue},GafferUI::Gadget const*)'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (GraphGadget)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(GafferUI::GraphGadget {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (GraphGadget)arg1) -> str :

    C++ signature :
        char const* typeName(GafferUI::GraphGadget {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def unpositionedNodeGadgets (self, *args, **kwargs):
      '''
unpositionedNodeGadgets( (GraphGadget)arg1) -> list :

    C++ signature :
        boost::python::list unpositionedNodeGadgets(GafferUI::GraphGadget {lvalue})'''
    ...
    def upstreamNodeGadgets (self, *args, **kwargs):
      '''
upstreamNodeGadgets( (GraphGadget)arg1, (Node)node [, (int)degreesOfSeparation=18446744073709551615]) -> list :

    C++ signature :
        boost::python::list upstreamNodeGadgets(GafferUI::GraphGadget {lvalue},Gaffer::Node const* [,unsigned long=18446744073709551615])'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...
    def visibilityChangedSignal (self, *args, **kwargs):
      '''
visibilityChangedSignal( (Gadget)arg1) -> VisibilityChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} visibilityChangedSignal(GafferUI::Gadget {lvalue})'''
    ...
    def visible (self, *args, **kwargs):
      '''
visible( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool visible(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def wheelSignal (self, *args, **kwargs):
      '''
wheelSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} wheelSignal(GafferUI::Gadget {lvalue})'''
    ...

def GraphLayout (*args):
      '''

'''      
    ...

class GraphLayout:
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def connectNode (self, *args, **kwargs):
      '''
connectNode( (GraphLayout)arg1, (GraphGadget)arg2, (Node)arg3, (Set)arg4) -> bool :

    C++ signature :
        bool connectNode(GafferUI::GraphLayout,GafferUI::GraphGadget {lvalue},Gaffer::Node {lvalue},Gaffer::Set {lvalue})'''
    ...
    def connectNodes (self, *args, **kwargs):
      '''
connectNodes( (GraphLayout)arg1, (GraphGadget)arg2, (Set)arg3, (Set)arg4) -> bool :

    C++ signature :
        bool connectNodes(GafferUI::GraphLayout,GafferUI::GraphGadget {lvalue},Gaffer::Set {lvalue},Gaffer::Set {lvalue})'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (GraphLayout)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::GraphLayout {lvalue},IECore::TypeId)

isInstanceOf( (GraphLayout)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::GraphLayout {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def layoutNodes (self, *args, **kwargs):
      '''
layoutNodes( (GraphLayout)arg1, (GraphGadget)graph [, (Set)nodes=None]) -> None :

    C++ signature :
        void layoutNodes(GafferUI::GraphLayout,GafferUI::GraphGadget {lvalue} [,Gaffer::Set*=None])'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def positionNode (self, *args, **kwargs):
      '''
positionNode( (GraphLayout)arg1, (GraphGadget)graph, (Node)node [, (V2f)fallbackPosition=V2f(0, 0)]) -> None :

    C++ signature :
        void positionNode(GafferUI::GraphLayout,GafferUI::GraphGadget {lvalue},Gaffer::Node {lvalue} [,Imath_3_1::Vec2<float>=V2f(0, 0)])'''
    ...
    def positionNodes (self, *args, **kwargs):
      '''
positionNodes( (GraphLayout)arg1, (GraphGadget)graph, (Set)nodes [, (V2f)fallbackPosition=V2f(0, 0)]) -> None :

    C++ signature :
        void positionNodes(GafferUI::GraphLayout,GafferUI::GraphGadget {lvalue},Gaffer::Set {lvalue} [,Imath_3_1::Vec2<float>=V2f(0, 0)])'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (GraphLayout)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(GafferUI::GraphLayout {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (GraphLayout)arg1) -> str :

    C++ signature :
        char const* typeName(GafferUI::GraphLayout {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...

def GridContainer (*args):
      '''

'''      
    ...

class GridContainer:
    def _GridContainer__indexToRanges (self, index):
      '''None'''
    ...
    def _GridContainer__removeLine (self, axis, index):
      '''None'''
    ...
    def _GridContainer__removeRanges (self, ranges):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _revealDescendant (self, descendant):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def addChild (self, child, index=(1, 1), alignment=(<HorizontalAlignment.None_: 1>, <VerticalAlignment.None_: 1>)):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def gridSize (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def removeChild (self, child):
      '''None'''
    ...
    def removeColumn (self, columnIndex):
      '''None'''
    ...
    def removeRow (self, rowIndex):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def Handle (*args):
      '''

'''      
    ...

class Handle:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ButtonSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DirtyType (self, *args, **kwargs):
      '''None'''
    ...
    def DragBeginSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DragDropSignal (self, *args, **kwargs):
      '''None'''
    ...
    def EnterLeaveSignal (self, *args, **kwargs):
      '''None'''
    ...
    def IdleSignal (self, *args, **kwargs):
      '''None'''
    ...
    def KeySignal (self, *args, **kwargs):
      '''None'''
    ...
    def Layer (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def RenderReason (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def VisibilityChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _dirty (self, *args, **kwargs):
      '''
_dirty( (Gadget)arg1, (DirtyType)arg2) -> None :

    C++ signature :
        void _dirty(GafferUI::Gadget {lvalue},GafferUI::Gadget::DirtyType)'''
    ...
    def _idleSignalAccessedSignal (self, *args, **kwargs):
      '''
_idleSignalAccessedSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} _idleSignalAccessedSignal()'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (Handle)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(GafferUI::Handle,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (Handle)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(GafferUI::Handle,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def bound (self, *args, **kwargs):
      '''
bound( (Handle)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > bound(GafferUI::Handle)'''
    ...
    def buttonDoubleClickSignal (self, *args, **kwargs):
      '''
buttonDoubleClickSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonDoubleClickSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonPressSignal (self, *args, **kwargs):
      '''
buttonPressSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonReleaseSignal (self, *args, **kwargs):
      '''
buttonReleaseSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def dragBeginSignal (self, *args, **kwargs):
      '''
dragBeginSignal( (Gadget)arg1) -> DragBeginSignal :

    C++ signature :
        Gaffer::Signals::Signal<boost::intrusive_ptr<IECore::RunTimeTyped> (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<boost::intrusive_ptr<IECore::RunTimeTyped> > > {lvalue} dragBeginSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEndSignal (self, *args, **kwargs):
      '''
dragEndSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEndSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEnterSignal (self, *args, **kwargs):
      '''
dragEnterSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEnterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragLeaveSignal (self, *args, **kwargs):
      '''
dragLeaveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragLeaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragMoveSignal (self, *args, **kwargs):
      '''
dragMoveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dropSignal (self, *args, **kwargs):
      '''
dropSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dropSignal(GafferUI::Gadget {lvalue})'''
    ...
    def enabled (self, *args, **kwargs):
      '''
enabled( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool enabled(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def enterSignal (self, *args, **kwargs):
      '''
enterSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} enterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def fullTransform (self, *args, **kwargs):
      '''
fullTransform( (Gadget)arg1 [, (Gadget)arg2]) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> fullTransform(GafferUI::Gadget {lvalue} [,GafferUI::Gadget const*])'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getEnabled (self, *args, **kwargs):
      '''
getEnabled( (Gadget)arg1) -> bool :

    C++ signature :
        bool getEnabled(GafferUI::Gadget {lvalue})'''
    ...
    def getHighlighted (self, *args, **kwargs):
      '''
getHighlighted( (Gadget)arg1) -> bool :

    C++ signature :
        bool getHighlighted(GafferUI::Gadget {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getRasterScale (self, *args, **kwargs):
      '''
getRasterScale( (Handle)arg1) -> float :

    C++ signature :
        float getRasterScale(GafferUI::Handle {lvalue})'''
    ...
    def getStyle (self, *args, **kwargs):
      '''
getStyle( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> getStyle(GafferUI::Gadget {lvalue})'''
    ...
    def getToolTip (self, *args, **kwargs):
      '''
getToolTip( (Handle)arg1, (LineSegment3f)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > getToolTip(GafferUI::Handle,IECore::LineSegment<Imath_3_1::Vec3<float> >)'''
    ...
    def getTransform (self, *args, **kwargs):
      '''
getTransform( (Gadget)arg1) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> getTransform(GafferUI::Gadget {lvalue})'''
    ...
    def getVisible (self, *args, **kwargs):
      '''
getVisible( (Gadget)arg1) -> bool :

    C++ signature :
        bool getVisible(GafferUI::Gadget {lvalue})'''
    ...
    def idleSignal (self, *args, **kwargs):
      '''
idleSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} idleSignal()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (Handle)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::Handle {lvalue},IECore::TypeId)

isInstanceOf( (Handle)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::Handle {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keyPressSignal (self, *args, **kwargs):
      '''
keyPressSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keyReleaseSignal (self, *args, **kwargs):
      '''
keyReleaseSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def leaveSignal (self, *args, **kwargs):
      '''
leaveSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} leaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def mouseMoveSignal (self, *args, **kwargs):
      '''
mouseMoveSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} mouseMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setEnabled (self, *args, **kwargs):
      '''
setEnabled( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnabled(GafferUI::Gadget {lvalue},bool)'''
    ...
    def setHighlighted (self, *args, **kwargs):
      '''
setHighlighted( (Handle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHighlighted(GafferUI::Handle {lvalue},bool)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setRasterScale (self, *args, **kwargs):
      '''
setRasterScale( (Handle)arg1, (float)arg2) -> None :

    C++ signature :
        void setRasterScale(GafferUI::Handle {lvalue},float)'''
    ...
    def setStyle (self, *args, **kwargs):
      '''
setStyle( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setStyle(GafferUI::Gadget {lvalue},boost::intrusive_ptr<GafferUI::Style const>)'''
    ...
    def setToolTip (self, *args, **kwargs):
      '''
setToolTip( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setToolTip(GafferUI::Gadget {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def setTransform (self, *args, **kwargs):
      '''
setTransform( (Gadget)arg1, (M44f)arg2) -> None :

    C++ signature :
        void setTransform(GafferUI::Gadget {lvalue},Imath_3_1::Matrix44<float>)'''
    ...
    def setVisible (self, *args, **kwargs):
      '''
setVisible( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setVisible(GafferUI::Gadget {lvalue},bool)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def style (self, *args, **kwargs):
      '''
style( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> style(GafferUI::Gadget {lvalue})'''
    ...
    def transformedBound (self, *args, **kwargs):
      '''
transformedBound( (Gadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue})

transformedBound( (Gadget)arg1, (Gadget)arg2) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue},GafferUI::Gadget const*)'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (Handle)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(GafferUI::Handle {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (Handle)arg1) -> str :

    C++ signature :
        char const* typeName(GafferUI::Handle {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...
    def visibilityChangedSignal (self, *args, **kwargs):
      '''
visibilityChangedSignal( (Gadget)arg1) -> VisibilityChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} visibilityChangedSignal(GafferUI::Gadget {lvalue})'''
    ...
    def visible (self, *args, **kwargs):
      '''
visible( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool visible(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def wheelSignal (self, *args, **kwargs):
      '''
wheelSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} wheelSignal(GafferUI::Gadget {lvalue})'''
    ...

def HeaderPathPreview (*args):
      '''

'''      
    ...

class HeaderPathPreview:
    def _DeferredPathPreview__display (selfWeakRef, o):
      '''None'''
    ...
    def _DeferredPathPreview__displayBusy (selfWeakRef):
      '''None'''
    ...
    def _DeferredPathPreview__load (selfWeakRef):
      '''None'''
    ...
    def _PathPreviewWidget__namesToCreators (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _PathPreviewWidget__pathChanged (self, path):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _deferredUpdate (self, o):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _load (self):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromPath (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (name, path):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getPath (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def isValid (self):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def registerType (name, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setPath (self, path):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def types ():
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

class HorizontalAlignment:
    def Center (self, *args, **kwargs):
      '''An enumeration.'''
    ...
    def Justify (self, *args, **kwargs):
      '''An enumeration.'''
    ...
    def Left (self, *args, **kwargs):
      '''An enumeration.'''
    ...
    def None_ (self, *args, **kwargs):
      '''An enumeration.'''
    ...
    def Right (self, *args, **kwargs):
      '''An enumeration.'''
    ...
    def name (self, *args, **kwargs):
      '''The name of the Enum member.'''
    ...
    def value (self, *args, **kwargs):
      '''The value of the Enum member.'''
    ...

def IconPathColumn (*args):
      '''
__init__(_object*, GafferUI::PathColumn::CellData, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, IECore::InternedString, GafferUI::PathColumn::SizeMode sizeMode=GafferUI._GafferUI.SizeMode.Default)
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, IECore::InternedString, GafferUI::PathColumn::SizeMode sizeMode=GafferUI._GafferUI.SizeMode.Default)

'''      
    ...

class IconPathColumn:
    def ButtonSignal (self, *args, **kwargs):
      '''None'''
    ...
    def CellData (self, *args, **kwargs):
      '''None'''
    ...
    def PathColumnSignal (self, *args, **kwargs):
      '''None'''
    ...
    def SizeMode (self, *args, **kwargs):
      '''None'''
    ...
    def buttonDoubleClickSignal (self, *args, **kwargs):
      '''
buttonDoubleClickSignal( (PathColumn)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (Gaffer::Path&, GafferUI::PathListingWidget&, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonDoubleClickSignal(GafferUI::PathColumn {lvalue})'''
    ...
    def buttonPressSignal (self, *args, **kwargs):
      '''
buttonPressSignal( (PathColumn)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (Gaffer::Path&, GafferUI::PathListingWidget&, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonPressSignal(GafferUI::PathColumn {lvalue})'''
    ...
    def buttonReleaseSignal (self, *args, **kwargs):
      '''
buttonReleaseSignal( (PathColumn)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (Gaffer::Path&, GafferUI::PathListingWidget&, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonReleaseSignal(GafferUI::PathColumn {lvalue})'''
    ...
    def cellData (self, *args, **kwargs):
      '''
cellData( (PathColumn)arg1, (Path)path [, (Canceller)canceller=None]) -> CellData :

    C++ signature :
        GafferUI::PathColumn::CellData cellData(GafferUI::PathColumn {lvalue},Gaffer::Path [,IECore::Canceller const*=None])'''
    ...
    def changedSignal (self, *args, **kwargs):
      '''
changedSignal( (PathColumn)arg1) -> PathColumnSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::PathColumn*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} changedSignal(GafferUI::PathColumn {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getSizeMode (self, *args, **kwargs):
      '''
getSizeMode( (PathColumn)arg1) -> SizeMode :

    C++ signature :
        GafferUI::PathColumn::SizeMode getSizeMode(GafferUI::PathColumn {lvalue})'''
    ...
    def headerData (self, *args, **kwargs):
      '''
headerData( (PathColumn)arg1 [, (Canceller)canceller=None]) -> CellData :

    C++ signature :
        GafferUI::PathColumn::CellData headerData(GafferUI::PathColumn {lvalue} [,IECore::Canceller const*=None])'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def prefix (self, *args, **kwargs):
      '''
prefix( (IconPathColumn)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > prefix(GafferUI::IconPathColumn {lvalue})'''
    ...
    def property (self, *args, **kwargs):
      '''
property( (IconPathColumn)arg1) -> str :

    C++ signature :
        char const* property(GafferUI::IconPathColumn)'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def setSizeMode (self, *args, **kwargs):
      '''
setSizeMode( (PathColumn)arg1, (SizeMode)sizeMode) -> None :

    C++ signature :
        void setSizeMode(GafferUI::PathColumn {lvalue},GafferUI::PathColumn::SizeMode)'''
    ...

def Image (*args):
      '''

'''      
    ...

class Image:
    def _Image__cacheGetter (fileName):
      '''None'''
    ...
    def _Image__imageSearchPaths (self, *args, **kwargs):
      '''None'''
    ...
    def _Image__pixmapCache (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtIcon (self, highlighted=False):
      '''None'''
    ...
    def _qtPixmap (self):
      '''None'''
    ...
    def _qtPixmapCache ():
      '''None'''
    ...
    def _qtPixmapDisabled (self):
      '''None'''
    ...
    def _qtPixmapFromFile (fileName):
      '''None'''
    ...
    def _qtPixmapFromImagePrimitive (image):
      '''None'''
    ...
    def _qtPixmapHighlighted (self):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def ImageGadget (*args):
      '''
__init__(_object*, boost::intrusive_ptr<IECoreImage::ImagePrimitive const>)
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)

'''      
    ...

class ImageGadget:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ButtonSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DirtyType (self, *args, **kwargs):
      '''None'''
    ...
    def DragBeginSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DragDropSignal (self, *args, **kwargs):
      '''None'''
    ...
    def EnterLeaveSignal (self, *args, **kwargs):
      '''None'''
    ...
    def IdleSignal (self, *args, **kwargs):
      '''None'''
    ...
    def KeySignal (self, *args, **kwargs):
      '''None'''
    ...
    def Layer (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def RenderReason (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def VisibilityChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _dirty (self, *args, **kwargs):
      '''
_dirty( (Gadget)arg1, (DirtyType)arg2) -> None :

    C++ signature :
        void _dirty(GafferUI::Gadget {lvalue},GafferUI::Gadget::DirtyType)'''
    ...
    def _idleSignalAccessedSignal (self, *args, **kwargs):
      '''
_idleSignalAccessedSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} _idleSignalAccessedSignal()'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (ImageGadget)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(GafferUI::ImageGadget,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (ImageGadget)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(GafferUI::ImageGadget,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def bound (self, *args, **kwargs):
      '''
bound( (ImageGadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > bound(GafferUI::ImageGadget)'''
    ...
    def buttonDoubleClickSignal (self, *args, **kwargs):
      '''
buttonDoubleClickSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonDoubleClickSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonPressSignal (self, *args, **kwargs):
      '''
buttonPressSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonReleaseSignal (self, *args, **kwargs):
      '''
buttonReleaseSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def dragBeginSignal (self, *args, **kwargs):
      '''
dragBeginSignal( (Gadget)arg1) -> DragBeginSignal :

    C++ signature :
        Gaffer::Signals::Signal<boost::intrusive_ptr<IECore::RunTimeTyped> (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<boost::intrusive_ptr<IECore::RunTimeTyped> > > {lvalue} dragBeginSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEndSignal (self, *args, **kwargs):
      '''
dragEndSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEndSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEnterSignal (self, *args, **kwargs):
      '''
dragEnterSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEnterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragLeaveSignal (self, *args, **kwargs):
      '''
dragLeaveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragLeaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragMoveSignal (self, *args, **kwargs):
      '''
dragMoveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dropSignal (self, *args, **kwargs):
      '''
dropSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dropSignal(GafferUI::Gadget {lvalue})'''
    ...
    def enabled (self, *args, **kwargs):
      '''
enabled( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool enabled(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def enterSignal (self, *args, **kwargs):
      '''
enterSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} enterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def fullTransform (self, *args, **kwargs):
      '''
fullTransform( (Gadget)arg1 [, (Gadget)arg2]) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> fullTransform(GafferUI::Gadget {lvalue} [,GafferUI::Gadget const*])'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getEnabled (self, *args, **kwargs):
      '''
getEnabled( (Gadget)arg1) -> bool :

    C++ signature :
        bool getEnabled(GafferUI::Gadget {lvalue})'''
    ...
    def getHighlighted (self, *args, **kwargs):
      '''
getHighlighted( (Gadget)arg1) -> bool :

    C++ signature :
        bool getHighlighted(GafferUI::Gadget {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getStyle (self, *args, **kwargs):
      '''
getStyle( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> getStyle(GafferUI::Gadget {lvalue})'''
    ...
    def getToolTip (self, *args, **kwargs):
      '''
getToolTip( (ImageGadget)arg1, (LineSegment3f)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > getToolTip(GafferUI::ImageGadget,IECore::LineSegment<Imath_3_1::Vec3<float> >)'''
    ...
    def getTransform (self, *args, **kwargs):
      '''
getTransform( (Gadget)arg1) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> getTransform(GafferUI::Gadget {lvalue})'''
    ...
    def getVisible (self, *args, **kwargs):
      '''
getVisible( (Gadget)arg1) -> bool :

    C++ signature :
        bool getVisible(GafferUI::Gadget {lvalue})'''
    ...
    def idleSignal (self, *args, **kwargs):
      '''
idleSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} idleSignal()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (ImageGadget)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::ImageGadget {lvalue},IECore::TypeId)

isInstanceOf( (ImageGadget)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::ImageGadget {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keyPressSignal (self, *args, **kwargs):
      '''
keyPressSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keyReleaseSignal (self, *args, **kwargs):
      '''
keyReleaseSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def leaveSignal (self, *args, **kwargs):
      '''
leaveSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} leaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def mouseMoveSignal (self, *args, **kwargs):
      '''
mouseMoveSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} mouseMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setEnabled (self, *args, **kwargs):
      '''
setEnabled( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnabled(GafferUI::Gadget {lvalue},bool)'''
    ...
    def setHighlighted (self, *args, **kwargs):
      '''
setHighlighted( (ImageGadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHighlighted(GafferUI::ImageGadget {lvalue},bool)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setStyle (self, *args, **kwargs):
      '''
setStyle( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setStyle(GafferUI::Gadget {lvalue},boost::intrusive_ptr<GafferUI::Style const>)'''
    ...
    def setToolTip (self, *args, **kwargs):
      '''
setToolTip( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setToolTip(GafferUI::Gadget {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def setTransform (self, *args, **kwargs):
      '''
setTransform( (Gadget)arg1, (M44f)arg2) -> None :

    C++ signature :
        void setTransform(GafferUI::Gadget {lvalue},Imath_3_1::Matrix44<float>)'''
    ...
    def setVisible (self, *args, **kwargs):
      '''
setVisible( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setVisible(GafferUI::Gadget {lvalue},bool)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def style (self, *args, **kwargs):
      '''
style( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> style(GafferUI::Gadget {lvalue})'''
    ...
    def transformedBound (self, *args, **kwargs):
      '''
transformedBound( (Gadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue})

transformedBound( (Gadget)arg1, (Gadget)arg2) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue},GafferUI::Gadget const*)'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (ImageGadget)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(GafferUI::ImageGadget {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (ImageGadget)arg1) -> str :

    C++ signature :
        char const* typeName(GafferUI::ImageGadget {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...
    def visibilityChangedSignal (self, *args, **kwargs):
      '''
visibilityChangedSignal( (Gadget)arg1) -> VisibilityChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} visibilityChangedSignal(GafferUI::Gadget {lvalue})'''
    ...
    def visible (self, *args, **kwargs):
      '''
visible( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool visible(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def wheelSignal (self, *args, **kwargs):
      '''
wheelSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} wheelSignal(GafferUI::Gadget {lvalue})'''
    ...

def IndividualContainer (*args):
      '''
__init__(_object*, boost::intrusive_ptr<GafferUI::Gadget>)
__init__(_object*)

'''      
    ...

class IndividualContainer:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ButtonSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DirtyType (self, *args, **kwargs):
      '''None'''
    ...
    def DragBeginSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DragDropSignal (self, *args, **kwargs):
      '''None'''
    ...
    def EnterLeaveSignal (self, *args, **kwargs):
      '''None'''
    ...
    def IdleSignal (self, *args, **kwargs):
      '''None'''
    ...
    def KeySignal (self, *args, **kwargs):
      '''None'''
    ...
    def Layer (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def RenderReason (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def VisibilityChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _dirty (self, *args, **kwargs):
      '''
_dirty( (Gadget)arg1, (DirtyType)arg2) -> None :

    C++ signature :
        void _dirty(GafferUI::Gadget {lvalue},GafferUI::Gadget::DirtyType)'''
    ...
    def _idleSignalAccessedSignal (self, *args, **kwargs):
      '''
_idleSignalAccessedSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} _idleSignalAccessedSignal()'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (IndividualContainer)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(GafferUI::IndividualContainer,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (IndividualContainer)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(GafferUI::IndividualContainer,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def bound (self, *args, **kwargs):
      '''
bound( (IndividualContainer)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > bound(GafferUI::IndividualContainer)'''
    ...
    def buttonDoubleClickSignal (self, *args, **kwargs):
      '''
buttonDoubleClickSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonDoubleClickSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonPressSignal (self, *args, **kwargs):
      '''
buttonPressSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonReleaseSignal (self, *args, **kwargs):
      '''
buttonReleaseSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def dragBeginSignal (self, *args, **kwargs):
      '''
dragBeginSignal( (Gadget)arg1) -> DragBeginSignal :

    C++ signature :
        Gaffer::Signals::Signal<boost::intrusive_ptr<IECore::RunTimeTyped> (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<boost::intrusive_ptr<IECore::RunTimeTyped> > > {lvalue} dragBeginSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEndSignal (self, *args, **kwargs):
      '''
dragEndSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEndSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEnterSignal (self, *args, **kwargs):
      '''
dragEnterSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEnterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragLeaveSignal (self, *args, **kwargs):
      '''
dragLeaveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragLeaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragMoveSignal (self, *args, **kwargs):
      '''
dragMoveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dropSignal (self, *args, **kwargs):
      '''
dropSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dropSignal(GafferUI::Gadget {lvalue})'''
    ...
    def enabled (self, *args, **kwargs):
      '''
enabled( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool enabled(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def enterSignal (self, *args, **kwargs):
      '''
enterSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} enterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def fullTransform (self, *args, **kwargs):
      '''
fullTransform( (Gadget)arg1 [, (Gadget)arg2]) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> fullTransform(GafferUI::Gadget {lvalue} [,GafferUI::Gadget const*])'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (IndividualContainer)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Gadget> getChild(GafferUI::IndividualContainer {lvalue})'''
    ...
    def getEnabled (self, *args, **kwargs):
      '''
getEnabled( (Gadget)arg1) -> bool :

    C++ signature :
        bool getEnabled(GafferUI::Gadget {lvalue})'''
    ...
    def getHighlighted (self, *args, **kwargs):
      '''
getHighlighted( (Gadget)arg1) -> bool :

    C++ signature :
        bool getHighlighted(GafferUI::Gadget {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getPadding (self, *args, **kwargs):
      '''
getPadding( (ContainerGadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > getPadding(GafferUI::ContainerGadget {lvalue})'''
    ...
    def getStyle (self, *args, **kwargs):
      '''
getStyle( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> getStyle(GafferUI::Gadget {lvalue})'''
    ...
    def getToolTip (self, *args, **kwargs):
      '''
getToolTip( (IndividualContainer)arg1, (LineSegment3f)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > getToolTip(GafferUI::IndividualContainer,IECore::LineSegment<Imath_3_1::Vec3<float> >)'''
    ...
    def getTransform (self, *args, **kwargs):
      '''
getTransform( (Gadget)arg1) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> getTransform(GafferUI::Gadget {lvalue})'''
    ...
    def getVisible (self, *args, **kwargs):
      '''
getVisible( (Gadget)arg1) -> bool :

    C++ signature :
        bool getVisible(GafferUI::Gadget {lvalue})'''
    ...
    def idleSignal (self, *args, **kwargs):
      '''
idleSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} idleSignal()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (IndividualContainer)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::IndividualContainer {lvalue},IECore::TypeId)

isInstanceOf( (IndividualContainer)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::IndividualContainer {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keyPressSignal (self, *args, **kwargs):
      '''
keyPressSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keyReleaseSignal (self, *args, **kwargs):
      '''
keyReleaseSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def leaveSignal (self, *args, **kwargs):
      '''
leaveSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} leaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def mouseMoveSignal (self, *args, **kwargs):
      '''
mouseMoveSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} mouseMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (IndividualContainer)arg1, (object)arg2) -> None :

    C++ signature :
        void setChild(GafferUI::IndividualContainer {lvalue},boost::intrusive_ptr<GafferUI::Gadget>)'''
    ...
    def setEnabled (self, *args, **kwargs):
      '''
setEnabled( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnabled(GafferUI::Gadget {lvalue},bool)'''
    ...
    def setHighlighted (self, *args, **kwargs):
      '''
setHighlighted( (IndividualContainer)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHighlighted(GafferUI::IndividualContainer {lvalue},bool)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setPadding (self, *args, **kwargs):
      '''
setPadding( (ContainerGadget)arg1, (Box3f)arg2) -> None :

    C++ signature :
        void setPadding(GafferUI::ContainerGadget {lvalue},Imath_3_1::Box<Imath_3_1::Vec3<float> >)'''
    ...
    def setStyle (self, *args, **kwargs):
      '''
setStyle( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setStyle(GafferUI::Gadget {lvalue},boost::intrusive_ptr<GafferUI::Style const>)'''
    ...
    def setToolTip (self, *args, **kwargs):
      '''
setToolTip( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setToolTip(GafferUI::Gadget {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def setTransform (self, *args, **kwargs):
      '''
setTransform( (Gadget)arg1, (M44f)arg2) -> None :

    C++ signature :
        void setTransform(GafferUI::Gadget {lvalue},Imath_3_1::Matrix44<float>)'''
    ...
    def setVisible (self, *args, **kwargs):
      '''
setVisible( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setVisible(GafferUI::Gadget {lvalue},bool)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def style (self, *args, **kwargs):
      '''
style( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> style(GafferUI::Gadget {lvalue})'''
    ...
    def transformedBound (self, *args, **kwargs):
      '''
transformedBound( (Gadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue})

transformedBound( (Gadget)arg1, (Gadget)arg2) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue},GafferUI::Gadget const*)'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (IndividualContainer)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(GafferUI::IndividualContainer {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (IndividualContainer)arg1) -> str :

    C++ signature :
        char const* typeName(GafferUI::IndividualContainer {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...
    def visibilityChangedSignal (self, *args, **kwargs):
      '''
visibilityChangedSignal( (Gadget)arg1) -> VisibilityChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} visibilityChangedSignal(GafferUI::Gadget {lvalue})'''
    ...
    def visible (self, *args, **kwargs):
      '''
visible( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool visible(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def wheelSignal (self, *args, **kwargs):
      '''
wheelSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} wheelSignal(GafferUI::Gadget {lvalue})'''
    ...

def InfoPathFilterWidget (*args):
      '''

'''      
    ...

class InfoPathFilterWidget:
    def _InfoPathFilterWidget__buttonClicked (self, button):
      '''None'''
    ...
    def _InfoPathFilterWidget__filterEditingFinished (self, textWidget):
      '''None'''
    ...
    def _InfoPathFilterWidget__filterTextChanged (self, textWidget):
      '''None'''
    ...
    def _InfoPathFilterWidget__setInfoKey (self, filter, infoKey, checked):
      '''None'''
    ...
    def _InfoPathFilterWidget__updateFilter (self, newInfoKey=None):
      '''None'''
    ...
    def _PathFilterWidget__pathFilterChanged (self, pathFilter):
      '''None'''
    ...
    def _PathFilterWidget__typesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _pathFilterChangedConnection (self):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromPathFilter (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (pathFilter):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def pathFilter (self):
      '''None'''
    ...
    def registerType (pathFilterClass, widgetCreationFunction):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def InfoPathPreview (*args):
      '''

'''      
    ...

class InfoPathPreview:
    def _DeferredPathPreview__display (selfWeakRef, o):
      '''None'''
    ...
    def _DeferredPathPreview__displayBusy (selfWeakRef):
      '''None'''
    ...
    def _DeferredPathPreview__load (selfWeakRef):
      '''None'''
    ...
    def _PathPreviewWidget__namesToCreators (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _PathPreviewWidget__pathChanged (self, path):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _deferredUpdate (self, o):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _load (self):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromPath (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (name, path):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getPath (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def isValid (self):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def registerType (name, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setPath (self, path):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def types ():
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def KeyEvent (*args):
      '''
__init__(_object*, char const*, GafferUI::ModifiableEvent::Modifiers)
__init__(_object*, char const*)
__init__(_object*)

'''      
    ...

class KeyEvent:
    def Modifiers (self, *args, **kwargs):
      '''None'''
    ...
    def key (self, *args, **kwargs):
      '''None'''
    ...
    def modifiers (self, *args, **kwargs):
      '''None'''
    ...

def Label (*args):
      '''

'''      
    ...

class Label:
    def HorizontalAlignment (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def VerticalAlignment (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def _Label__linkActivated (self, link):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getAlignment (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getText (self):
      '''None'''
    ...
    def getTextSelectable (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def linkActivatedSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setAlignment (self, horizontalAlignment, verticalAlignment):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setText (self, text):
      '''None'''
    ...
    def setTextSelectable (self, selectable):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def LabelPlugValueWidget (*args):
      '''

'''      
    ...

class LabelPlugValueWidget:
    def MultiplePlugTypesError (self, *args, **kwargs):
      '''None'''
    ...
    def MultiplePlugsError (self, *args, **kwargs):
      '''None'''
    ...
    def MultipleWidgetCreatorsError (self, *args, **kwargs):
      '''None'''
    ...
    def _LabelPlugValueWidget__dragBegin (self, widget, event):
      '''None'''
    ...
    def _LabelPlugValueWidget__dragEnd (self, widget, event):
      '''None'''
    ...
    def _LabelPlugValueWidget__formatter (graphComponents):
      '''None'''
    ...
    def _LabelPlugValueWidget__getValueChanged (self):
      '''None'''
    ...
    def _LabelPlugValueWidget__labelDoubleClicked (self, label, event):
      '''None'''
    ...
    def _LabelPlugValueWidget__labelEditingFinished (self, nameWidget):
      '''None'''
    ...
    def _LabelPlugValueWidget__plugMetadataChanged (self, plug, key, reason):
      '''None'''
    ...
    def _LabelPlugValueWidget__setValueChanged (self, valueChanged):
      '''None'''
    ...
    def _LabelPlugValueWidget__updateDoubleClickConnection (self):
      '''None'''
    ...
    def _LabelPlugValueWidget__updatePlugMetadataChangedConnections (self):
      '''None'''
    ...
    def _PlugValueWidget__applyPreset (self, presetName, *unused):
      '''None'''
    ...
    def _PlugValueWidget__applyReadOnly (self, readOnly):
      '''None'''
    ...
    def _PlugValueWidget__applyUserDefaults (self):
      '''None'''
    ...
    def _PlugValueWidget__auxiliaryPlugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__buttonPress (self, widget, event, buttonMask):
      '''None'''
    ...
    def _PlugValueWidget__callLegacyUpdateMethods (self):
      '''None'''
    ...
    def _PlugValueWidget__callUpdateFromValues (self):
      '''None'''
    ...
    def _PlugValueWidget__contextChanged (self, context, key):
      '''None'''
    ...
    def _PlugValueWidget__contextMenu (self, *unused):
      '''None'''
    ...
    def _PlugValueWidget__copyValue (self):
      '''None'''
    ...
    def _PlugValueWidget__creator (plug, typeMetadata):
      '''None'''
    ...
    def _PlugValueWidget__defaultContext (graphComponent):
      '''None'''
    ...
    def _PlugValueWidget__dragEnter (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__dragLeave (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__drop (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__editInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__fallbackContext (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__nodeMetadataChanged (self, nodeTypeId, key, node):
      '''None'''
    ...
    def _PlugValueWidget__plugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugInputChanged (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugMetadataChanged (self, plug, key, reason):
      '''None'''
    ...
    def _PlugValueWidget__plugTypesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _PlugValueWidget__popupMenuSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__presetsSubMenu (self):
      '''None'''
    ...
    def _PlugValueWidget__removeInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__setPlugsInternal (self, plugs, callUpdateMethods):
      '''None'''
    ...
    def _PlugValueWidget__setValues (self, values):
      '''None'''
    ...
    def _PlugValueWidget__updateContextConnection (self):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackground (self, plugs, auxiliaryPlugs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPlug (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPostCall (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPreCall (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _addPopupMenu (self, widget=None, buttons=GafferUI._GafferUI.Buttons.Right):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _auxiliaryPlugs (self, plug):
      '''None'''
    ...
    def _blockedUpdateFromValues (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _convertValue (self, value):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _editable (self, canEditAnimation=False):
      '''None'''
    ...
    def _hasUserValue (plug):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _plugConnections (self):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _popupMenuDefinition (self):
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _requestUpdateFromValues (self, lazy=True):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromEditable (self):
      '''None'''
    ...
    def _updateFromMetadata (self):
      '''None'''
    ...
    def _updateFromValues (self, values, exception):
      '''None'''
    ...
    def _valuesDependOnContext (self):
      '''None'''
    ...
    def _valuesForUpdate (plugs, auxiliaryPlugs):
      '''None'''
    ...
    def acquire (plug):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childPlugValueWidget (self, childPlug):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (plugs, typeMetadata='plugValueWidget:type'):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getPlug (self):
      '''None'''
    ...
    def getPlugs (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def hasLabel (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def label (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def popupMenuSignal ():
      '''None'''
    ...
    def registerType (plugClassOrTypeId, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setPlug (self, plug):
      '''None'''
    ...
    def setPlugs (self, plugs):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def LayoutMenu (*args):
      '''

'''      
    ...

def LayoutPlugValueWidget (*args):
      '''

'''      
    ...

class LayoutPlugValueWidget:
    def MultiplePlugTypesError (self, *args, **kwargs):
      '''None'''
    ...
    def MultiplePlugsError (self, *args, **kwargs):
      '''None'''
    ...
    def MultipleWidgetCreatorsError (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__applyPreset (self, presetName, *unused):
      '''None'''
    ...
    def _PlugValueWidget__applyReadOnly (self, readOnly):
      '''None'''
    ...
    def _PlugValueWidget__applyUserDefaults (self):
      '''None'''
    ...
    def _PlugValueWidget__auxiliaryPlugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__buttonPress (self, widget, event, buttonMask):
      '''None'''
    ...
    def _PlugValueWidget__callLegacyUpdateMethods (self):
      '''None'''
    ...
    def _PlugValueWidget__callUpdateFromValues (self):
      '''None'''
    ...
    def _PlugValueWidget__contextChanged (self, context, key):
      '''None'''
    ...
    def _PlugValueWidget__contextMenu (self, *unused):
      '''None'''
    ...
    def _PlugValueWidget__copyValue (self):
      '''None'''
    ...
    def _PlugValueWidget__creator (plug, typeMetadata):
      '''None'''
    ...
    def _PlugValueWidget__defaultContext (graphComponent):
      '''None'''
    ...
    def _PlugValueWidget__dragEnter (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__dragLeave (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__drop (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__editInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__fallbackContext (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__nodeMetadataChanged (self, nodeTypeId, key, node):
      '''None'''
    ...
    def _PlugValueWidget__plugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugInputChanged (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugMetadataChanged (self, plug, key, reason):
      '''None'''
    ...
    def _PlugValueWidget__plugTypesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _PlugValueWidget__popupMenuSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__presetsSubMenu (self):
      '''None'''
    ...
    def _PlugValueWidget__removeInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__setPlugsInternal (self, plugs, callUpdateMethods):
      '''None'''
    ...
    def _PlugValueWidget__setValues (self, values):
      '''None'''
    ...
    def _PlugValueWidget__updateContextConnection (self):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackground (self, plugs, auxiliaryPlugs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPlug (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPostCall (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPreCall (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _addPopupMenu (self, widget=None, buttons=GafferUI._GafferUI.Buttons.Right):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _auxiliaryPlugs (self, plug):
      '''None'''
    ...
    def _blockedUpdateFromValues (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _convertValue (self, value):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _editable (self, canEditAnimation=False):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _plugConnections (self):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _popupMenuDefinition (self):
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _requestUpdateFromValues (self, lazy=True):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromEditable (self):
      '''None'''
    ...
    def _updateFromMetadata (self):
      '''None'''
    ...
    def _updateFromValues (self, values, exception):
      '''None'''
    ...
    def _valuesDependOnContext (self):
      '''None'''
    ...
    def _valuesForUpdate (plugs, auxiliaryPlugs):
      '''None'''
    ...
    def acquire (plug):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childPlugValueWidget (self, childPlug):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (plugs, typeMetadata='plugValueWidget:type'):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getPlug (self):
      '''None'''
    ...
    def getPlugs (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def hasLabel (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def popupMenuSignal ():
      '''None'''
    ...
    def registerType (plugClassOrTypeId, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setPlug (self, plug):
      '''None'''
    ...
    def setPlugs (self, plugs):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def Layouts (*args):
      '''

'''      
    ...

class Layouts:
    def _Layouts__Layout (repr, persistent):
      '''__Layout(repr, persistent)'''
    ...
    def _Layouts__save (self):
      '''None'''
    ...
    def acquire (applicationOrApplicationRoot):
      '''None'''
    ...
    def add (self, name, editor, persistent=False):
      '''None'''
    ...
    def create (self, name, scriptNode):
      '''None'''
    ...
    def createDefault (self, scriptNode):
      '''None'''
    ...
    def deregisterEditor (self, editorName):
      '''None'''
    ...
    def getDefault (self):
      '''None'''
    ...
    def names (self, persistent=None):
      '''None'''
    ...
    def registerEditor (self, editorName):
      '''None'''
    ...
    def registeredEditors (self):
      '''None'''
    ...
    def remove (self, name):
      '''None'''
    ...
    def setDefault (self, name, persistent=False):
      '''None'''
    ...

def LazyMethod (*args):
      '''

'''      
    ...

class LazyMethod:
    def _LazyMethod__PendingCall (args, kw):
      '''__PendingCall(args, kw)'''
    ...
    def _LazyMethod__doPendingCalls (widget, method):
      '''None'''
    ...
    def _LazyMethod__idle (widgetWeakref, method):
      '''None'''
    ...
    def _LazyMethod__playback (widget):
      '''None'''
    ...
    def _LazyMethod__playbackStateChanged (playback, widgetWeakref, method):
      '''None'''
    ...
    def _LazyMethod__visibilityChanged (widget, method):
      '''None'''
    ...

def LinearContainer (*args):
      '''
__init__(_object*)
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='LinearContainer')
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='LinearContainer', GafferUI::LinearContainer::Orientation orientation=GafferUI._GafferUI.Orientation.X)
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='LinearContainer', GafferUI::LinearContainer::Orientation orientation=GafferUI._GafferUI.Orientation.X, GafferUI::LinearContainer::Alignment alignment=GafferUI._GafferUI.Alignment.Centre)
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='LinearContainer', GafferUI::LinearContainer::Orientation orientation=GafferUI._GafferUI.Orientation.X, GafferUI::LinearContainer::Alignment alignment=GafferUI._GafferUI.Alignment.Centre, float spacing=0.0)
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='LinearContainer', GafferUI::LinearContainer::Orientation orientation=GafferUI._GafferUI.Orientation.X, GafferUI::LinearContainer::Alignment alignment=GafferUI._GafferUI.Alignment.Centre, float spacing=0.0, GafferUI::LinearContainer::Direction direction=GafferUI._GafferUI.Direction.Increasing)

'''      
    ...

class LinearContainer:
    def Alignment (self, *args, **kwargs):
      '''None'''
    ...
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ButtonSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def DirtyType (self, *args, **kwargs):
      '''None'''
    ...
    def DragBeginSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DragDropSignal (self, *args, **kwargs):
      '''None'''
    ...
    def EnterLeaveSignal (self, *args, **kwargs):
      '''None'''
    ...
    def IdleSignal (self, *args, **kwargs):
      '''None'''
    ...
    def KeySignal (self, *args, **kwargs):
      '''None'''
    ...
    def Layer (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Orientation (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def RenderReason (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def VisibilityChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _dirty (self, *args, **kwargs):
      '''
_dirty( (Gadget)arg1, (DirtyType)arg2) -> None :

    C++ signature :
        void _dirty(GafferUI::Gadget {lvalue},GafferUI::Gadget::DirtyType)'''
    ...
    def _idleSignalAccessedSignal (self, *args, **kwargs):
      '''
_idleSignalAccessedSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} _idleSignalAccessedSignal()'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (LinearContainer)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(GafferUI::LinearContainer,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (LinearContainer)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(GafferUI::LinearContainer,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def bound (self, *args, **kwargs):
      '''
bound( (LinearContainer)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > bound(GafferUI::LinearContainer)'''
    ...
    def buttonDoubleClickSignal (self, *args, **kwargs):
      '''
buttonDoubleClickSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonDoubleClickSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonPressSignal (self, *args, **kwargs):
      '''
buttonPressSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonReleaseSignal (self, *args, **kwargs):
      '''
buttonReleaseSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def dragBeginSignal (self, *args, **kwargs):
      '''
dragBeginSignal( (Gadget)arg1) -> DragBeginSignal :

    C++ signature :
        Gaffer::Signals::Signal<boost::intrusive_ptr<IECore::RunTimeTyped> (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<boost::intrusive_ptr<IECore::RunTimeTyped> > > {lvalue} dragBeginSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEndSignal (self, *args, **kwargs):
      '''
dragEndSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEndSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEnterSignal (self, *args, **kwargs):
      '''
dragEnterSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEnterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragLeaveSignal (self, *args, **kwargs):
      '''
dragLeaveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragLeaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragMoveSignal (self, *args, **kwargs):
      '''
dragMoveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dropSignal (self, *args, **kwargs):
      '''
dropSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dropSignal(GafferUI::Gadget {lvalue})'''
    ...
    def enabled (self, *args, **kwargs):
      '''
enabled( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool enabled(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def enterSignal (self, *args, **kwargs):
      '''
enterSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} enterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def fullTransform (self, *args, **kwargs):
      '''
fullTransform( (Gadget)arg1 [, (Gadget)arg2]) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> fullTransform(GafferUI::Gadget {lvalue} [,GafferUI::Gadget const*])'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getAlignment (self, *args, **kwargs):
      '''
getAlignment( (LinearContainer)arg1) -> Alignment :

    C++ signature :
        GafferUI::LinearContainer::Alignment getAlignment(GafferUI::LinearContainer {lvalue})'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getDirection (self, *args, **kwargs):
      '''
getDirection( (LinearContainer)arg1) -> Direction :

    C++ signature :
        GafferUI::LinearContainer::Direction getDirection(GafferUI::LinearContainer {lvalue})'''
    ...
    def getEnabled (self, *args, **kwargs):
      '''
getEnabled( (Gadget)arg1) -> bool :

    C++ signature :
        bool getEnabled(GafferUI::Gadget {lvalue})'''
    ...
    def getHighlighted (self, *args, **kwargs):
      '''
getHighlighted( (Gadget)arg1) -> bool :

    C++ signature :
        bool getHighlighted(GafferUI::Gadget {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getOrientation (self, *args, **kwargs):
      '''
getOrientation( (LinearContainer)arg1) -> Orientation :

    C++ signature :
        GafferUI::LinearContainer::Orientation getOrientation(GafferUI::LinearContainer {lvalue})'''
    ...
    def getPadding (self, *args, **kwargs):
      '''
getPadding( (ContainerGadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > getPadding(GafferUI::ContainerGadget {lvalue})'''
    ...
    def getSpacing (self, *args, **kwargs):
      '''
getSpacing( (LinearContainer)arg1) -> float :

    C++ signature :
        float getSpacing(GafferUI::LinearContainer {lvalue})'''
    ...
    def getStyle (self, *args, **kwargs):
      '''
getStyle( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> getStyle(GafferUI::Gadget {lvalue})'''
    ...
    def getToolTip (self, *args, **kwargs):
      '''
getToolTip( (LinearContainer)arg1, (LineSegment3f)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > getToolTip(GafferUI::LinearContainer,IECore::LineSegment<Imath_3_1::Vec3<float> >)'''
    ...
    def getTransform (self, *args, **kwargs):
      '''
getTransform( (Gadget)arg1) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> getTransform(GafferUI::Gadget {lvalue})'''
    ...
    def getVisible (self, *args, **kwargs):
      '''
getVisible( (Gadget)arg1) -> bool :

    C++ signature :
        bool getVisible(GafferUI::Gadget {lvalue})'''
    ...
    def idleSignal (self, *args, **kwargs):
      '''
idleSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} idleSignal()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (LinearContainer)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::LinearContainer {lvalue},IECore::TypeId)

isInstanceOf( (LinearContainer)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::LinearContainer {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keyPressSignal (self, *args, **kwargs):
      '''
keyPressSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keyReleaseSignal (self, *args, **kwargs):
      '''
keyReleaseSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def leaveSignal (self, *args, **kwargs):
      '''
leaveSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} leaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def mouseMoveSignal (self, *args, **kwargs):
      '''
mouseMoveSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} mouseMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def setAlignment (self, *args, **kwargs):
      '''
setAlignment( (LinearContainer)arg1, (Alignment)arg2) -> None :

    C++ signature :
        void setAlignment(GafferUI::LinearContainer {lvalue},GafferUI::LinearContainer::Alignment)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setDirection (self, *args, **kwargs):
      '''
setDirection( (LinearContainer)arg1, (Direction)arg2) -> None :

    C++ signature :
        void setDirection(GafferUI::LinearContainer {lvalue},GafferUI::LinearContainer::Direction)'''
    ...
    def setEnabled (self, *args, **kwargs):
      '''
setEnabled( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnabled(GafferUI::Gadget {lvalue},bool)'''
    ...
    def setHighlighted (self, *args, **kwargs):
      '''
setHighlighted( (LinearContainer)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHighlighted(GafferUI::LinearContainer {lvalue},bool)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setOrientation (self, *args, **kwargs):
      '''
setOrientation( (LinearContainer)arg1, (Orientation)arg2) -> None :

    C++ signature :
        void setOrientation(GafferUI::LinearContainer {lvalue},GafferUI::LinearContainer::Orientation)'''
    ...
    def setPadding (self, *args, **kwargs):
      '''
setPadding( (ContainerGadget)arg1, (Box3f)arg2) -> None :

    C++ signature :
        void setPadding(GafferUI::ContainerGadget {lvalue},Imath_3_1::Box<Imath_3_1::Vec3<float> >)'''
    ...
    def setSpacing (self, *args, **kwargs):
      '''
setSpacing( (LinearContainer)arg1, (float)arg2) -> None :

    C++ signature :
        void setSpacing(GafferUI::LinearContainer {lvalue},float)'''
    ...
    def setStyle (self, *args, **kwargs):
      '''
setStyle( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setStyle(GafferUI::Gadget {lvalue},boost::intrusive_ptr<GafferUI::Style const>)'''
    ...
    def setToolTip (self, *args, **kwargs):
      '''
setToolTip( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setToolTip(GafferUI::Gadget {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def setTransform (self, *args, **kwargs):
      '''
setTransform( (Gadget)arg1, (M44f)arg2) -> None :

    C++ signature :
        void setTransform(GafferUI::Gadget {lvalue},Imath_3_1::Matrix44<float>)'''
    ...
    def setVisible (self, *args, **kwargs):
      '''
setVisible( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setVisible(GafferUI::Gadget {lvalue},bool)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def style (self, *args, **kwargs):
      '''
style( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> style(GafferUI::Gadget {lvalue})'''
    ...
    def transformedBound (self, *args, **kwargs):
      '''
transformedBound( (Gadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue})

transformedBound( (Gadget)arg1, (Gadget)arg2) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue},GafferUI::Gadget const*)'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (LinearContainer)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(GafferUI::LinearContainer {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (LinearContainer)arg1) -> str :

    C++ signature :
        char const* typeName(GafferUI::LinearContainer {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...
    def visibilityChangedSignal (self, *args, **kwargs):
      '''
visibilityChangedSignal( (Gadget)arg1) -> VisibilityChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} visibilityChangedSignal(GafferUI::Gadget {lvalue})'''
    ...
    def visible (self, *args, **kwargs):
      '''
visible( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool visible(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def wheelSignal (self, *args, **kwargs):
      '''
wheelSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} wheelSignal(GafferUI::Gadget {lvalue})'''
    ...

def ListContainer (*args):
      '''

'''      
    ...

class ListContainer:
    def HorizontalAlignment (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def Orientation (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def VerticalAlignment (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def _ListContainer__convertToQtAlignment (self, horizontalAlignment, verticalAlignment):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _revealDescendant (self, descendant):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def addChild (self, child, expand=False, horizontalAlignment=None, verticalAlignment=None):
      '''None'''
    ...
    def addSpacer (self, width=0, height=0, expand=False, horizontalAlignment=None, verticalAlignment=None):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def append (self, child, expand=False, horizontalAlignment=None, verticalAlignment=None):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getExpand (self, child):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def index (self, child):
      '''None'''
    ...
    def insert (self, index, child, expand=False, horizontalAlignment=None, verticalAlignment=None):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def orientation (self):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def remove (self, child):
      '''None'''
    ...
    def removeChild (self, child):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setExpand (self, child, expand):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def LoopUI (*args):
      '''

'''      
    ...

def MatchPatternPathFilterWidget (*args):
      '''

'''      
    ...

class MatchPatternPathFilterWidget:
    def _MatchPatternPathFilterWidget__enabledStateChanged (self, widget):
      '''None'''
    ...
    def _MatchPatternPathFilterWidget__patternEditingFinished (self, textWidget):
      '''None'''
    ...
    def _MatchPatternPathFilterWidget__patternTextChanged (self, textWidget):
      '''None'''
    ...
    def _MatchPatternPathFilterWidget__propertyFilters (self):
      '''None'''
    ...
    def _MatchPatternPathFilterWidget__propertyMenuDefinition (self):
      '''None'''
    ...
    def _MatchPatternPathFilterWidget__setPropertyName (self, property, checked):
      '''None'''
    ...
    def _MatchPatternPathFilterWidget__updateFilterMatchPatterns (self):
      '''None'''
    ...
    def _MatchPatternPathFilterWidget__updatePlaceholderText (self, pathFilter):
      '''None'''
    ...
    def _PathFilterWidget__pathFilterChanged (self, pathFilter):
      '''None'''
    ...
    def _PathFilterWidget__typesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _pathFilterChangedConnection (self):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromPathFilter (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (pathFilter):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def pathFilter (self):
      '''None'''
    ...
    def registerType (pathFilterClass, widgetCreationFunction):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def Menu (*args):
      '''

'''      
    ...

class Menu:
    def _Menu__actionHovered (self, action):
      '''None'''
    ...
    def _Menu__actionTriggered (self, qtActionWeakRef, toggled):
      '''None'''
    ...
    def _Menu__argNames (self, function):
      '''None'''
    ...
    def _Menu__build (self, qtMenu, recurse=False, forShortCuts=False):
      '''None'''
    ...
    def _Menu__buildAction (self, item, name, parent):
      '''None'''
    ...
    def _Menu__disambiguate (self, name, path, remove=False):
      '''None'''
    ...
    def _Menu__doActionUnhover (self):
      '''None'''
    ...
    def _Menu__evaluateItemValue (self, itemValue):
      '''None'''
    ...
    def _Menu__getSearchBoxErrorState (self):
      '''None'''
    ...
    def _Menu__hide (self):
      '''None'''
    ...
    def _Menu__initSearch (self, definition, dirname=''):
      '''None'''
    ...
    def _Menu__matchingActions (self, searchText):
      '''None'''
    ...
    def _Menu__menuActionTriggered (self, action, checked):
      '''None'''
    ...
    def _Menu__searchMenuShow (self):
      '''None'''
    ...
    def _Menu__searchReturnPressed (self):
      '''None'''
    ...
    def _Menu__setSearchBoxErrorState (self, errored):
      '''None'''
    ...
    def _Menu__show (self):
      '''None'''
    ...
    def _Menu__updateSearchMenu (self, text):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buildFully (self, forShortCuts=False):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def popup (self, parent=None, position=None, forcePosition=False, grabFocus=True, modal=False):
      '''None'''
    ...
    def popupPosition (self, relativeTo=None):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def searchable (self):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def MenuBar (*args):
      '''

'''      
    ...

class MenuBar:
    def _MenuBar__parentChanged (self, widget):
      '''None'''
    ...
    def _MenuBar__setupShortcutEventFilter (self):
      '''None'''
    ...
    def _MenuBar__visibilityChanged (self, widget):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def addShortcutTarget (self, widget):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def MenuButton (*args):
      '''

'''      
    ...

class MenuButton:
    def _Button__clicked (self, *unusedArgs):
      '''None'''
    ...
    def _Button__enter (self, widget):
      '''None'''
    ...
    def _Button__leave (self, widget):
      '''None'''
    ...
    def _Button__palette (self, *args, **kwargs):
      '''None'''
    ...
    def _Button__updateIcon (self):
      '''None'''
    ...
    def _MenuButton__menuVisibilityChanged (self, menu):
      '''None'''
    ...
    def _MenuButton__pressed (self):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def clickedSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getErrored (self):
      '''None'''
    ...
    def getHasFrame (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getImage (self):
      '''None'''
    ...
    def getMenu (self):
      '''None'''
    ...
    def getText (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setErrored (self, errored):
      '''None'''
    ...
    def setHasFrame (self, hasFrame):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setImage (self, imageOrImageFileName):
      '''None'''
    ...
    def setMenu (self, menu):
      '''None'''
    ...
    def setText (self, text):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def MessageSummaryWidget (*args):
      '''

'''      
    ...

class MessageSummaryWidget:
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getMessages (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def levelButtonClickedSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setMessages (self, messages):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def MessageWidget (*args):
      '''

'''      
    ...

class MessageWidget:
    def Role (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def _MessageWidget__isFollowingMessagesChanged (self, widget):
      '''None'''
    ...
    def _MessageWidget__levelButtonClicked (self, level):
      '''None'''
    ...
    def _MessageWidget__messageLevelChanged (self, widget):
      '''None'''
    ...
    def _MessageWidget__messagesChanged (self, widget):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _addMessage (self, level, context, message):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def clear (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def forwardingMessageHandler (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getMessageLevel (self):
      '''None'''
    ...
    def getMessages (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def messageCount (self, level=None):
      '''None'''
    ...
    def messageHandler (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def scrollToNextMessage (self, messageLevel, select=True, wrap=True):
      '''None'''
    ...
    def scrollToPreviousMessage (self, messageLevel, select=True, wrap=True):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setMessageLevel (self, messageLevel):
      '''None'''
    ...
    def setMessages (self, messages):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def Metadata (*args):
      '''

'''      
    ...

class Metadata:
    def LegacyNodeValueChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def LegacyPlugValueChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def NodeValueChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def PlugValueChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def RegistrationTypes (self, *args, **kwargs):
      '''None'''
    ...
    def ValueChangedReason (self, *args, **kwargs):
      '''None'''
    ...
    def ValueChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def deregisterValue (self, *args, **kwargs):
      '''
deregisterValue( (InternedString)arg1, (InternedString)arg2) -> None :

    C++ signature :
        void deregisterValue(IECore::InternedString,IECore::InternedString)

deregisterValue( (TypeId)arg1, (InternedString)arg2) -> None :

    C++ signature :
        void deregisterValue(IECore::TypeId,IECore::InternedString)

deregisterValue( (TypeId)arg1, (object)arg2, (InternedString)arg3) -> None :

    C++ signature :
        void deregisterValue(IECore::TypeId,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,IECore::InternedString)

deregisterValue( (GraphComponent)arg1, (InternedString)arg2) -> None :

    C++ signature :
        void deregisterValue(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def nodeValueChangedSignal (self, *args, **kwargs):
      '''
nodeValueChangedSignal() -> LegacyNodeValueChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (IECore::TypeId, IECore::InternedString, Gaffer::Node*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nodeValueChangedSignal()

nodeValueChangedSignal( (Node)arg1) -> NodeValueChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Node*, IECore::InternedString, Gaffer::Metadata::ValueChangedReason), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nodeValueChangedSignal(Gaffer::Node*)'''
    ...
    def nodesWithMetadata (self, *args, **kwargs):
      '''
nodesWithMetadata( (GraphComponent)root, (object)key [, (bool)instanceOnly=False]) -> list :

    C++ signature :
        boost::python::list nodesWithMetadata(Gaffer::GraphComponent*,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > [,bool=False])'''
    ...
    def plugValueChangedSignal (self, *args, **kwargs):
      '''
plugValueChangedSignal() -> LegacyPlugValueChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (IECore::TypeId, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, IECore::InternedString, Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugValueChangedSignal()

plugValueChangedSignal( (Node)arg1) -> PlugValueChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*, IECore::InternedString, Gaffer::Metadata::ValueChangedReason), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugValueChangedSignal(Gaffer::Node*)'''
    ...
    def plugsWithMetadata (self, *args, **kwargs):
      '''
plugsWithMetadata( (GraphComponent)root, (object)key [, (bool)instanceOnly=False]) -> list :

    C++ signature :
        boost::python::list plugsWithMetadata(Gaffer::GraphComponent*,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > [,bool=False])'''
    ...
    def registerNode (self, *args, **kwargs):
      '''
object registerNode(tuple args, dict kwds) :

    C++ signature :
        object registerNode(tuple args, dict kwds)'''
    ...
    def registerNodeValue (self, *args, **kwargs):
      '''
registerValue( (InternedString)arg1, (InternedString)arg2, (object)arg3) -> None :

    C++ signature :
        void registerValue(IECore::InternedString,IECore::InternedString,boost::python::api::object {lvalue})

registerValue( (TypeId)arg1, (InternedString)arg2, (object)arg3) -> None :

    C++ signature :
        void registerValue(IECore::TypeId,IECore::InternedString,boost::python::api::object {lvalue})

registerValue( (TypeId)arg1, (str)arg2, (InternedString)arg3, (object)arg4) -> None :

    C++ signature :
        void registerValue(IECore::TypeId,char const*,IECore::InternedString,boost::python::api::object {lvalue})

registerValue( (GraphComponent)arg1, (InternedString)target, (object)value [, (bool)persistent=True]) -> None :

    C++ signature :
        void registerValue(Gaffer::GraphComponent {lvalue},IECore::InternedString,boost::intrusive_ptr<IECore::Data const> [,bool=True])'''
    ...
    def registerPlugValue (self, *args, **kwargs):
      '''
registerValue( (InternedString)arg1, (InternedString)arg2, (object)arg3) -> None :

    C++ signature :
        void registerValue(IECore::InternedString,IECore::InternedString,boost::python::api::object {lvalue})

registerValue( (TypeId)arg1, (InternedString)arg2, (object)arg3) -> None :

    C++ signature :
        void registerValue(IECore::TypeId,IECore::InternedString,boost::python::api::object {lvalue})

registerValue( (TypeId)arg1, (str)arg2, (InternedString)arg3, (object)arg4) -> None :

    C++ signature :
        void registerValue(IECore::TypeId,char const*,IECore::InternedString,boost::python::api::object {lvalue})

registerValue( (GraphComponent)arg1, (InternedString)target, (object)value [, (bool)persistent=True]) -> None :

    C++ signature :
        void registerValue(Gaffer::GraphComponent {lvalue},IECore::InternedString,boost::intrusive_ptr<IECore::Data const> [,bool=True])'''
    ...
    def registerValue (self, *args, **kwargs):
      '''
registerValue( (InternedString)arg1, (InternedString)arg2, (object)arg3) -> None :

    C++ signature :
        void registerValue(IECore::InternedString,IECore::InternedString,boost::python::api::object {lvalue})

registerValue( (TypeId)arg1, (InternedString)arg2, (object)arg3) -> None :

    C++ signature :
        void registerValue(IECore::TypeId,IECore::InternedString,boost::python::api::object {lvalue})

registerValue( (TypeId)arg1, (str)arg2, (InternedString)arg3, (object)arg4) -> None :

    C++ signature :
        void registerValue(IECore::TypeId,char const*,IECore::InternedString,boost::python::api::object {lvalue})

registerValue( (GraphComponent)arg1, (InternedString)target, (object)value [, (bool)persistent=True]) -> None :

    C++ signature :
        void registerValue(Gaffer::GraphComponent {lvalue},IECore::InternedString,boost::intrusive_ptr<IECore::Data const> [,bool=True])'''
    ...
    def registeredValues (self, *args, **kwargs):
      '''
registeredValues( (InternedString)arg1) -> list :

    C++ signature :
        boost::python::list registeredValues(IECore::InternedString)

registeredValues( (GraphComponent)target [, (bool)instanceOnly=False [, (bool)persistentOnly=False]]) -> list :

    C++ signature :
        boost::python::list registeredValues(Gaffer::GraphComponent const* [,bool=False [,bool=False]])

registeredValues( (GraphComponent)target [, (RegistrationTypes)registrationTypes=Gaffer._Gaffer.RegistrationTypes.All]) -> list :

    C++ signature :
        boost::python::list registeredValues(Gaffer::GraphComponent const* [,Gaffer::Metadata::RegistrationTypes=Gaffer._Gaffer.RegistrationTypes.All])'''
    ...
    def value (self, *args, **kwargs):
      '''
value( (InternedString)target, (InternedString)key [, (bool)_copy=True]) -> object :

    C++ signature :
        boost::python::api::object value(IECore::InternedString,IECore::InternedString [,bool=True])

value( (GraphComponent)target, (InternedString)key [, (bool)instanceOnly=False [, (bool)_copy=True]]) -> object :

    C++ signature :
        boost::python::api::object value(Gaffer::GraphComponent,IECore::InternedString [,bool=False [,bool=True]])

value( (GraphComponent)arg1, (InternedString)target [, (int)registrationTypes=Gaffer._Gaffer.RegistrationTypes.All [, (bool)_copy=True]]) -> object :

    C++ signature :
        boost::python::api::object value(Gaffer::GraphComponent,IECore::InternedString [,unsigned int=Gaffer._Gaffer.RegistrationTypes.All [,bool=True]])'''
    ...
    def valueChangedSignal (self, *args, **kwargs):
      '''
valueChangedSignal() -> ValueChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (IECore::InternedString, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} valueChangedSignal()'''
    ...

def MetadataWidget (*args):
      '''

'''      
    ...

def ModifiableEvent (*args):
      '''
__init__(_object*, GafferUI::ModifiableEvent::Modifiers)
__init__(_object*)

'''      
    ...

class ModifiableEvent:
    def Modifiers (self, *args, **kwargs):
      '''None'''
    ...
    def modifiers (self, *args, **kwargs):
      '''None'''
    ...

def MultiLineStringPlugValueWidget (*args):
      '''

'''      
    ...

class MultiLineStringPlugValueWidget:
    def MultiplePlugTypesError (self, *args, **kwargs):
      '''None'''
    ...
    def MultiplePlugsError (self, *args, **kwargs):
      '''None'''
    ...
    def MultipleWidgetCreatorsError (self, *args, **kwargs):
      '''None'''
    ...
    def _MultiLineStringPlugValueWidget__keyPress (self, widget, event):
      '''None'''
    ...
    def _MultiLineStringPlugValueWidget__setPlugValue (self, *unused):
      '''None'''
    ...
    def _PlugValueWidget__applyPreset (self, presetName, *unused):
      '''None'''
    ...
    def _PlugValueWidget__applyReadOnly (self, readOnly):
      '''None'''
    ...
    def _PlugValueWidget__applyUserDefaults (self):
      '''None'''
    ...
    def _PlugValueWidget__auxiliaryPlugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__buttonPress (self, widget, event, buttonMask):
      '''None'''
    ...
    def _PlugValueWidget__callLegacyUpdateMethods (self):
      '''None'''
    ...
    def _PlugValueWidget__callUpdateFromValues (self):
      '''None'''
    ...
    def _PlugValueWidget__contextChanged (self, context, key):
      '''None'''
    ...
    def _PlugValueWidget__contextMenu (self, *unused):
      '''None'''
    ...
    def _PlugValueWidget__copyValue (self):
      '''None'''
    ...
    def _PlugValueWidget__creator (plug, typeMetadata):
      '''None'''
    ...
    def _PlugValueWidget__defaultContext (graphComponent):
      '''None'''
    ...
    def _PlugValueWidget__dragEnter (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__dragLeave (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__drop (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__editInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__fallbackContext (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__nodeMetadataChanged (self, nodeTypeId, key, node):
      '''None'''
    ...
    def _PlugValueWidget__plugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugInputChanged (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugMetadataChanged (self, plug, key, reason):
      '''None'''
    ...
    def _PlugValueWidget__plugTypesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _PlugValueWidget__popupMenuSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__presetsSubMenu (self):
      '''None'''
    ...
    def _PlugValueWidget__removeInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__setPlugsInternal (self, plugs, callUpdateMethods):
      '''None'''
    ...
    def _PlugValueWidget__setValues (self, values):
      '''None'''
    ...
    def _PlugValueWidget__updateContextConnection (self):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackground (self, plugs, auxiliaryPlugs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPlug (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPostCall (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPreCall (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _addPopupMenu (self, widget=None, buttons=GafferUI._GafferUI.Buttons.Right):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _auxiliaryPlugs (self, plug):
      '''None'''
    ...
    def _blockedUpdateFromValues (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _convertValue (self, value):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _editable (self, canEditAnimation=False):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _plugConnections (self):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _popupMenuDefinition (self):
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _requestUpdateFromValues (self, lazy=True):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromEditable (self):
      '''None'''
    ...
    def _updateFromMetadata (self):
      '''None'''
    ...
    def _updateFromValues (self, values, exception):
      '''None'''
    ...
    def _valuesDependOnContext (self):
      '''None'''
    ...
    def _valuesForUpdate (plugs, auxiliaryPlugs):
      '''None'''
    ...
    def acquire (plug):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childPlugValueWidget (self, childPlug):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (plugs, typeMetadata='plugValueWidget:type'):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getPlug (self):
      '''None'''
    ...
    def getPlugs (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def hasLabel (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def popupMenuSignal ():
      '''None'''
    ...
    def registerType (plugClassOrTypeId, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setPlug (self, plug):
      '''None'''
    ...
    def setPlugs (self, plugs):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def textWidget (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def MultiLineTextWidget (*args):
      '''

'''      
    ...

class MultiLineTextWidget:
    def Role (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def WrapMode (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def _MultiLineTextWidget__buttonPress (self, widget, event):
      '''None'''
    ...
    def _MultiLineTextWidget__dragEnter (self, widget, event):
      '''None'''
    ...
    def _MultiLineTextWidget__dragLeave (self, widget, event):
      '''None'''
    ...
    def _MultiLineTextWidget__dragMove (self, widget, event):
      '''None'''
    ...
    def _MultiLineTextWidget__drop (self, widget, event):
      '''None'''
    ...
    def _MultiLineTextWidget__dropText (self, dragData):
      '''None'''
    ...
    def _MultiLineTextWidget__keyPress (self, widget, event):
      '''None'''
    ...
    def _MultiLineTextWidget__mouseMove (self, widget, event):
      '''None'''
    ...
    def _MultiLineTextWidget__textChanged (self):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def activatedSignal (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def appendHTML (self, html):
      '''None'''
    ...
    def appendText (self, text):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def cursorBound (self, relativeTo=None):
      '''None'''
    ...
    def cursorPositionAt (self, position):
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def dropTextSignal (self):
      '''None'''
    ...
    def editingFinishedSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getCursorPosition (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEditable (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getErrored (self):
      '''None'''
    ...
    def getFixedLineHeight (self):
      '''None'''
    ...
    def getFocussed (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getRole (self):
      '''None'''
    ...
    def getText (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def getWrapMode (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def insertText (self, text):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def linkActivatedSignal (self):
      '''None'''
    ...
    def linkAt (self, position):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def selectedText (self):
      '''None'''
    ...
    def setCursorPosition (self, position):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEditable (self, editable):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setErrored (self, errored):
      '''None'''
    ...
    def setFixedLineHeight (self, fixedLineHeight):
      '''None'''
    ...
    def setFocussed (self, focussed):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setRole (self, role):
      '''None'''
    ...
    def setText (self, text):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def setWrapMode (self, wrapMode):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def textChangedSignal (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def MultiSelectionMenu (*args):
      '''

'''      
    ...

class MultiSelectionMenu:
    def _Button__clicked (self, *unusedArgs):
      '''None'''
    ...
    def _Button__enter (self, widget):
      '''None'''
    ...
    def _Button__leave (self, widget):
      '''None'''
    ...
    def _Button__palette (self, *args, **kwargs):
      '''None'''
    ...
    def _Button__updateIcon (self):
      '''None'''
    ...
    def _MenuButton__menuVisibilityChanged (self, menu):
      '''None'''
    ...
    def _MenuButton__pressed (self):
      '''None'''
    ...
    def _MultiSelectionMenu__cleanUpList (self, l, l2):
      '''None'''
    ...
    def _MultiSelectionMenu__menuDefinition (self):
      '''None'''
    ...
    def _MultiSelectionMenu__selectClicked (self, label, selected=None):
      '''None'''
    ...
    def _MultiSelectionMenu__selectionChanged (self):
      '''None'''
    ...
    def _MultiSelectionMenu__setDisplayName (self):
      '''None'''
    ...
    def _MultiSelectionMenu__validateInput (self, labels):
      '''None'''
    ...
    def _MultiSelectionMenu__validateState (self):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def addSelection (self, labels):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def append (self, labels):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def clickedSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getEnabledItems (self):
      '''None'''
    ...
    def getErrored (self):
      '''None'''
    ...
    def getHasFrame (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getImage (self):
      '''None'''
    ...
    def getMenu (self):
      '''None'''
    ...
    def getSelection (self):
      '''None'''
    ...
    def getText (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def index (self, item):
      '''None'''
    ...
    def insert (self, index, label):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def remove (self, label):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def selectionChangedSignal (self):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setEnabledItems (self, labels):
      '''None'''
    ...
    def setErrored (self, errored):
      '''None'''
    ...
    def setHasFrame (self, hasFrame):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setImage (self, imageOrImageFileName):
      '''None'''
    ...
    def setMenu (self, menu):
      '''None'''
    ...
    def setSelection (self, labels):
      '''None'''
    ...
    def setText (self, text):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def NameGadget (*args):
      '''
__init__(_object*, boost::intrusive_ptr<Gaffer::GraphComponent>)

'''      
    ...

class NameGadget:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ButtonSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DirtyType (self, *args, **kwargs):
      '''None'''
    ...
    def DragBeginSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DragDropSignal (self, *args, **kwargs):
      '''None'''
    ...
    def EnterLeaveSignal (self, *args, **kwargs):
      '''None'''
    ...
    def IdleSignal (self, *args, **kwargs):
      '''None'''
    ...
    def KeySignal (self, *args, **kwargs):
      '''None'''
    ...
    def Layer (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def RenderReason (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def VisibilityChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _dirty (self, *args, **kwargs):
      '''
_dirty( (Gadget)arg1, (DirtyType)arg2) -> None :

    C++ signature :
        void _dirty(GafferUI::Gadget {lvalue},GafferUI::Gadget::DirtyType)'''
    ...
    def _idleSignalAccessedSignal (self, *args, **kwargs):
      '''
_idleSignalAccessedSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} _idleSignalAccessedSignal()'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (NameGadget)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(GafferUI::NameGadget,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (NameGadget)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(GafferUI::NameGadget,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def bound (self, *args, **kwargs):
      '''
bound( (NameGadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > bound(GafferUI::NameGadget)'''
    ...
    def buttonDoubleClickSignal (self, *args, **kwargs):
      '''
buttonDoubleClickSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonDoubleClickSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonPressSignal (self, *args, **kwargs):
      '''
buttonPressSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonReleaseSignal (self, *args, **kwargs):
      '''
buttonReleaseSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def dragBeginSignal (self, *args, **kwargs):
      '''
dragBeginSignal( (Gadget)arg1) -> DragBeginSignal :

    C++ signature :
        Gaffer::Signals::Signal<boost::intrusive_ptr<IECore::RunTimeTyped> (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<boost::intrusive_ptr<IECore::RunTimeTyped> > > {lvalue} dragBeginSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEndSignal (self, *args, **kwargs):
      '''
dragEndSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEndSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEnterSignal (self, *args, **kwargs):
      '''
dragEnterSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEnterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragLeaveSignal (self, *args, **kwargs):
      '''
dragLeaveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragLeaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragMoveSignal (self, *args, **kwargs):
      '''
dragMoveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dropSignal (self, *args, **kwargs):
      '''
dropSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dropSignal(GafferUI::Gadget {lvalue})'''
    ...
    def enabled (self, *args, **kwargs):
      '''
enabled( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool enabled(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def enterSignal (self, *args, **kwargs):
      '''
enterSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} enterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def fullTransform (self, *args, **kwargs):
      '''
fullTransform( (Gadget)arg1 [, (Gadget)arg2]) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> fullTransform(GafferUI::Gadget {lvalue} [,GafferUI::Gadget const*])'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getDimmed (self, *args, **kwargs):
      '''
getDimmed( (TextGadget)arg1) -> bool :

    C++ signature :
        bool getDimmed(GafferUI::TextGadget {lvalue})'''
    ...
    def getEnabled (self, *args, **kwargs):
      '''
getEnabled( (Gadget)arg1) -> bool :

    C++ signature :
        bool getEnabled(GafferUI::Gadget {lvalue})'''
    ...
    def getHighlighted (self, *args, **kwargs):
      '''
getHighlighted( (Gadget)arg1) -> bool :

    C++ signature :
        bool getHighlighted(GafferUI::Gadget {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getStyle (self, *args, **kwargs):
      '''
getStyle( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> getStyle(GafferUI::Gadget {lvalue})'''
    ...
    def getText (self, *args, **kwargs):
      '''
getText( (TextGadget)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > getText(GafferUI::TextGadget {lvalue})'''
    ...
    def getToolTip (self, *args, **kwargs):
      '''
getToolTip( (NameGadget)arg1, (LineSegment3f)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > getToolTip(GafferUI::NameGadget,IECore::LineSegment<Imath_3_1::Vec3<float> >)'''
    ...
    def getTransform (self, *args, **kwargs):
      '''
getTransform( (Gadget)arg1) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> getTransform(GafferUI::Gadget {lvalue})'''
    ...
    def getVisible (self, *args, **kwargs):
      '''
getVisible( (Gadget)arg1) -> bool :

    C++ signature :
        bool getVisible(GafferUI::Gadget {lvalue})'''
    ...
    def idleSignal (self, *args, **kwargs):
      '''
idleSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} idleSignal()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (NameGadget)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::NameGadget {lvalue},IECore::TypeId)

isInstanceOf( (NameGadget)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::NameGadget {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keyPressSignal (self, *args, **kwargs):
      '''
keyPressSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keyReleaseSignal (self, *args, **kwargs):
      '''
keyReleaseSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def leaveSignal (self, *args, **kwargs):
      '''
leaveSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} leaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def mouseMoveSignal (self, *args, **kwargs):
      '''
mouseMoveSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} mouseMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setDimmed (self, *args, **kwargs):
      '''
setDimmed( (TextGadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setDimmed(GafferUI::TextGadget {lvalue},bool)'''
    ...
    def setEnabled (self, *args, **kwargs):
      '''
setEnabled( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnabled(GafferUI::Gadget {lvalue},bool)'''
    ...
    def setHighlighted (self, *args, **kwargs):
      '''
setHighlighted( (NameGadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHighlighted(GafferUI::NameGadget {lvalue},bool)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setStyle (self, *args, **kwargs):
      '''
setStyle( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setStyle(GafferUI::Gadget {lvalue},boost::intrusive_ptr<GafferUI::Style const>)'''
    ...
    def setText (self, *args, **kwargs):
      '''
setText( (TextGadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setText(GafferUI::TextGadget {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def setToolTip (self, *args, **kwargs):
      '''
setToolTip( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setToolTip(GafferUI::Gadget {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def setTransform (self, *args, **kwargs):
      '''
setTransform( (Gadget)arg1, (M44f)arg2) -> None :

    C++ signature :
        void setTransform(GafferUI::Gadget {lvalue},Imath_3_1::Matrix44<float>)'''
    ...
    def setVisible (self, *args, **kwargs):
      '''
setVisible( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setVisible(GafferUI::Gadget {lvalue},bool)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def style (self, *args, **kwargs):
      '''
style( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> style(GafferUI::Gadget {lvalue})'''
    ...
    def transformedBound (self, *args, **kwargs):
      '''
transformedBound( (Gadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue})

transformedBound( (Gadget)arg1, (Gadget)arg2) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue},GafferUI::Gadget const*)'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (NameGadget)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(GafferUI::NameGadget {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (NameGadget)arg1) -> str :

    C++ signature :
        char const* typeName(GafferUI::NameGadget {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...
    def visibilityChangedSignal (self, *args, **kwargs):
      '''
visibilityChangedSignal( (Gadget)arg1) -> VisibilityChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} visibilityChangedSignal(GafferUI::Gadget {lvalue})'''
    ...
    def visible (self, *args, **kwargs):
      '''
visible( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool visible(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def wheelSignal (self, *args, **kwargs):
      '''
wheelSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} wheelSignal(GafferUI::Gadget {lvalue})'''
    ...

def NameLabel (*args):
      '''

'''      
    ...

class NameLabel:
    def HorizontalAlignment (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def VerticalAlignment (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def _Label__linkActivated (self, link):
      '''None'''
    ...
    def _NameLabel__buttonPress (self, widget, event):
      '''None'''
    ...
    def _NameLabel__dragBegin (self, widget, event):
      '''None'''
    ...
    def _NameLabel__dragEnd (self, widget, event):
      '''None'''
    ...
    def _NameLabel__parentChanged (self, presentedComponent, child, oldParent):
      '''None'''
    ...
    def _NameLabel__setText (self, *unwantedArgs):
      '''None'''
    ...
    def _NameLabel__setupConnections (self):
      '''None'''
    ...
    def _NameLabel__updateConnections (self, component, reuseUntil=None):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def defaultFormatter (graphComponents):
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getAlignment (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getFormatter (self):
      '''None'''
    ...
    def getGraphComponent (self):
      '''None'''
    ...
    def getGraphComponents (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getNumComponents (self):
      '''None'''
    ...
    def getText (self):
      '''None'''
    ...
    def getTextSelectable (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def linkActivatedSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setAlignment (self, horizontalAlignment, verticalAlignment):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setFormatter (self, formatter):
      '''None'''
    ...
    def setGraphComponent (self, graphComponent):
      '''None'''
    ...
    def setGraphComponents (self, graphComponents):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setNumComponents (self, numComponents):
      '''None'''
    ...
    def setText (self, text):
      '''None'''
    ...
    def setTextSelectable (self, selectable):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def NameSwitchUI (*args):
      '''

'''      
    ...

def NameValuePlugValueWidget (*args):
      '''

'''      
    ...

class NameValuePlugValueWidget:
    def MultiplePlugTypesError (self, *args, **kwargs):
      '''None'''
    ...
    def MultiplePlugsError (self, *args, **kwargs):
      '''None'''
    ...
    def MultipleWidgetCreatorsError (self, *args, **kwargs):
      '''None'''
    ...
    def _NameValuePlugValueWidget__drop (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__applyPreset (self, presetName, *unused):
      '''None'''
    ...
    def _PlugValueWidget__applyReadOnly (self, readOnly):
      '''None'''
    ...
    def _PlugValueWidget__applyUserDefaults (self):
      '''None'''
    ...
    def _PlugValueWidget__auxiliaryPlugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__buttonPress (self, widget, event, buttonMask):
      '''None'''
    ...
    def _PlugValueWidget__callLegacyUpdateMethods (self):
      '''None'''
    ...
    def _PlugValueWidget__callUpdateFromValues (self):
      '''None'''
    ...
    def _PlugValueWidget__contextChanged (self, context, key):
      '''None'''
    ...
    def _PlugValueWidget__contextMenu (self, *unused):
      '''None'''
    ...
    def _PlugValueWidget__copyValue (self):
      '''None'''
    ...
    def _PlugValueWidget__creator (plug, typeMetadata):
      '''None'''
    ...
    def _PlugValueWidget__defaultContext (graphComponent):
      '''None'''
    ...
    def _PlugValueWidget__dragEnter (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__dragLeave (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__drop (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__editInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__fallbackContext (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__nodeMetadataChanged (self, nodeTypeId, key, node):
      '''None'''
    ...
    def _PlugValueWidget__plugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugInputChanged (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugMetadataChanged (self, plug, key, reason):
      '''None'''
    ...
    def _PlugValueWidget__plugTypesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _PlugValueWidget__popupMenuSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__presetsSubMenu (self):
      '''None'''
    ...
    def _PlugValueWidget__removeInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__setPlugsInternal (self, plugs, callUpdateMethods):
      '''None'''
    ...
    def _PlugValueWidget__setValues (self, values):
      '''None'''
    ...
    def _PlugValueWidget__updateContextConnection (self):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackground (self, plugs, auxiliaryPlugs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPlug (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPostCall (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPreCall (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _addPopupMenu (self, widget=None, buttons=GafferUI._GafferUI.Buttons.Right):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _auxiliaryPlugs (self, plug):
      '''None'''
    ...
    def _blockedUpdateFromValues (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _convertValue (self, value):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _editable (self, canEditAnimation=False):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _plugConnections (self):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _popupMenuDefinition (self):
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _requestUpdateFromValues (self, lazy=True):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromEditable (self):
      '''None'''
    ...
    def _updateFromMetadata (self):
      '''None'''
    ...
    def _updateFromValues (self, values, exception):
      '''None'''
    ...
    def _valuesDependOnContext (self):
      '''None'''
    ...
    def _valuesForUpdate (plugs, auxiliaryPlugs):
      '''None'''
    ...
    def acquire (plug):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childPlugValueWidget (self, childPlug):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (plugs, typeMetadata='plugValueWidget:type'):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getNameVisible (self):
      '''None'''
    ...
    def getPlug (self):
      '''None'''
    ...
    def getPlugs (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def hasLabel (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def popupMenuSignal ():
      '''None'''
    ...
    def registerType (plugClassOrTypeId, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setNameVisible (self, visible):
      '''None'''
    ...
    def setPlug (self, plug):
      '''None'''
    ...
    def setPlugs (self, plugs):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def NameWidget (*args):
      '''

'''      
    ...

class NameWidget:
    def DisplayMode (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def _NameWidget__nodeMetadataChanged (self, nodeTypeId, key, node):
      '''None'''
    ...
    def _NameWidget__plugMetadataChanged (self, plug, key, reason):
      '''None'''
    ...
    def _NameWidget__setName (self, *unwantedArgs):
      '''None'''
    ...
    def _NameWidget__setText (self, *unwantedArgs):
      '''None'''
    ...
    def _NameWidget__updateEditability (self):
      '''None'''
    ...
    def _TextWidget__buttonPress (self, widget, event):
      '''None'''
    ...
    def _TextWidget__buttonRelease (self, widget, event):
      '''None'''
    ...
    def _TextWidget__editingFinished (self):
      '''None'''
    ...
    def _TextWidget__keyPress (self, widget, event):
      '''None'''
    ...
    def _TextWidget__keyRelease (self, widget, event):
      '''None'''
    ...
    def _TextWidget__returnPressed (self):
      '''None'''
    ...
    def _TextWidget__selectionChanged (self):
      '''None'''
    ...
    def _TextWidget__selectionPossiblyFinished (self):
      '''None'''
    ...
    def _TextWidget__startSelectionFinishedTimer (self):
      '''None'''
    ...
    def _TextWidget__textChanged (self, text):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _eventPosition (self, event):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def activatedSignal (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def clearUndo (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def editingFinishedSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getCharacterWidth (self):
      '''None'''
    ...
    def getCursorPosition (self):
      '''None'''
    ...
    def getDisplayMode (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEditable (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getErrored (self):
      '''None'''
    ...
    def getFixedCharacterWidth (self):
      '''None'''
    ...
    def getGraphComponent (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getPreferredCharacterWidth (self):
      '''None'''
    ...
    def getSelection (self):
      '''None'''
    ...
    def getText (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def grabFocus (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def selectingFinishedSignal (self):
      '''None'''
    ...
    def selectionChangedSignal (self):
      '''None'''
    ...
    def setCharacterWidth (self, numCharacters):
      '''None'''
    ...
    def setCursorPosition (self, position):
      '''None'''
    ...
    def setDisplayMode (self, displayMode):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEditable (self, editable):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setErrored (self, errored):
      '''None'''
    ...
    def setFixedCharacterWidth (self, numCharacters):
      '''None'''
    ...
    def setGraphComponent (self, graphComponent):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setPreferredCharacterWidth (self, numCharacters):
      '''None'''
    ...
    def setSelection (self, start, end):
      '''None'''
    ...
    def setText (self, text):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def textChangedSignal (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def NodeEditor (*args):
      '''

'''      
    ...

class NodeEditor:
    def Settings (name, script):
      '''None'''
    ...
    def _Editor__contextChanged (self, context, key):
      '''None'''
    ...
    def _Editor__enter (self, widget):
      '''None'''
    ...
    def _Editor__leave (self, widget):
      '''None'''
    ...
    def _Editor__namesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Editor__setContextInternal (self, context, callUpdate):
      '''None'''
    ...
    def _NodeEditor__applyReadOnly (self, readOnly):
      '''None'''
    ...
    def _NodeEditor__infoButtonClicked (self, *unused):
      '''None'''
    ...
    def _NodeEditor__menuDefinition (self):
      '''None'''
    ...
    def _NodeEditor__revertToDefaults (self):
      '''None'''
    ...
    def _NodeEditor__toolMenuSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _NodeSetEditor__dirtyTitle (self):
      '''None'''
    ...
    def _NodeSetEditor__lazyUpdate (self):
      '''None'''
    ...
    def _NodeSetEditor__membersChanged (self, set, member):
      '''None'''
    ...
    def _NodeSetEditor__nameChanged (self, node, oldName):
      '''None'''
    ...
    def _NodeSetEditor__setNodeSetInternal (self, nodeSet, callUpdateFromSet):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _contextChangedConnection (self):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _doPendingUpdate (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _lastAddedNode (self):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _titleFormat (self):
      '''None'''
    ...
    def _updateFromContext (self, modifiedItems):
      '''None'''
    ...
    def _updateFromSet (self):
      '''None'''
    ...
    def acquire (node, floating=None):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (name, scriptNode):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getNodeSet (self):
      '''None'''
    ...
    def getTitle (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def instanceCreatedSignal ():
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def nodeSetChangedSignal (self):
      '''None'''
    ...
    def nodeUI (self):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def registerType (name, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def scriptNode (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setNodeSet (self, nodeSet):
      '''None'''
    ...
    def setTitle (self, title):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def titleChangedSignal (self):
      '''None'''
    ...
    def toolMenuSignal ():
      '''None'''
    ...
    def types ():
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def NodeFinderDialogue (*args):
      '''

'''      
    ...

class NodeFinderDialogue:
    def SizeMode (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def _Dialogue__buttonClicked (self, button):
      '''None'''
    ...
    def _Dialogue__close (self, widget):
      '''None'''
    ...
    def _NodeFinderDialogue__activated (self, text):
      '''None'''
    ...
    def _NodeFinderDialogue__buttonClicked (self, button):
      '''None'''
    ...
    def _NodeFinderDialogue__dragEnter (self, widget, event):
      '''None'''
    ...
    def _NodeFinderDialogue__dragLeave (self, widget, event):
      '''None'''
    ...
    def _NodeFinderDialogue__drop (self, widget, event):
      '''None'''
    ...
    def _NodeFinderDialogue__frameSelection (self):
      '''None'''
    ...
    def _NodeFinderDialogue__matchStringExtractor (self):
      '''None'''
    ...
    def _NodeFinderDialogue__modes (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _NodeFinderDialogue__nodeFromDragData (self, dragData):
      '''None'''
    ...
    def _NodeFinderDialogue__selectAll (self):
      '''None'''
    ...
    def _NodeFinderDialogue__selectNext (self):
      '''None'''
    ...
    def _NodeFinderDialogue__visibilityChanged (self, widget):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _Window__caughtKeys ():
      '''None'''
    ...
    def _Window__caughtKeysSet (self, *args, **kwargs):
      '''None'''
    ...
    def _Window__constrainToScreen (self, position):
      '''None'''
    ...
    def _Window__keyPress (self, widget, event):
      '''None'''
    ...
    def _acceptsClose (self):
      '''None'''
    ...
    def _addButton (self, textOrButton):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _getWidget (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _revealDescendant (self, descendant):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _setWidget (self, widget):
      '''None'''
    ...
    def addChild (self, child):
      '''None'''
    ...
    def addChildWindow (self, childWindow, removeOnClose=False):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childWindows (self):
      '''None'''
    ...
    def close (self):
      '''None'''
    ...
    def closedSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getChild (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getFullScreen (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getIcon (self):
      '''None'''
    ...
    def getModal (self):
      '''None'''
    ...
    def getPosition (self):
      '''None'''
    ...
    def getResizeable (self):
      '''None'''
    ...
    def getScope (self):
      '''None'''
    ...
    def getSizeMode (self):
      '''None'''
    ...
    def getTitle (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def preCloseSignal (self):
      '''None'''
    ...
    def registerMode (label, stringExtractor):
      '''None'''
    ...
    def removeChild (self, child):
      '''None'''
    ...
    def resizeToFitChild (self, shrink=True, expand=True):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setChild (self, child):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setFullScreen (self, fullScreen):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setIcon (self, imageOrImageFileName):
      '''None'''
    ...
    def setModal (self, modal, parentWindow=None):
      '''None'''
    ...
    def setPosition (self, position, forcePosition=False):
      '''None'''
    ...
    def setResizeable (self, resizeable):
      '''None'''
    ...
    def setScope (self, scope):
      '''None'''
    ...
    def setSizeMode (self, sizeMode):
      '''None'''
    ...
    def setTitle (self, title):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def waitForButton (self, parentWindow=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def NodeGadget (*args):
      '''

'''      
    ...

class NodeGadget:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ButtonSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DirtyType (self, *args, **kwargs):
      '''None'''
    ...
    def DragBeginSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DragDropSignal (self, *args, **kwargs):
      '''None'''
    ...
    def EnterLeaveSignal (self, *args, **kwargs):
      '''None'''
    ...
    def IdleSignal (self, *args, **kwargs):
      '''None'''
    ...
    def KeySignal (self, *args, **kwargs):
      '''None'''
    ...
    def Layer (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def RenderReason (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def VisibilityChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _dirty (self, *args, **kwargs):
      '''
_dirty( (Gadget)arg1, (DirtyType)arg2) -> None :

    C++ signature :
        void _dirty(GafferUI::Gadget {lvalue},GafferUI::Gadget::DirtyType)'''
    ...
    def _idleSignalAccessedSignal (self, *args, **kwargs):
      '''
_idleSignalAccessedSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} _idleSignalAccessedSignal()'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (NodeGadget)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(GafferUI::NodeGadget,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (NodeGadget)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(GafferUI::NodeGadget,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def bound (self, *args, **kwargs):
      '''
bound( (NodeGadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > bound(GafferUI::NodeGadget)'''
    ...
    def buttonDoubleClickSignal (self, *args, **kwargs):
      '''
buttonDoubleClickSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonDoubleClickSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonPressSignal (self, *args, **kwargs):
      '''
buttonPressSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonReleaseSignal (self, *args, **kwargs):
      '''
buttonReleaseSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def connectionTangent (self, *args, **kwargs):
      '''
connectionTangent( (NodeGadget)arg1, (ConnectionCreator)arg2) -> V3f :

    C++ signature :
        Imath_3_1::Vec3<float> connectionTangent(GafferUI::NodeGadget {lvalue},GafferUI::ConnectionCreator const*)'''
    ...
    def create (self, *args, **kwargs):
      '''
create( (object)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::NodeGadget> create(boost::intrusive_ptr<Gaffer::Node>)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def dragBeginSignal (self, *args, **kwargs):
      '''
dragBeginSignal( (Gadget)arg1) -> DragBeginSignal :

    C++ signature :
        Gaffer::Signals::Signal<boost::intrusive_ptr<IECore::RunTimeTyped> (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<boost::intrusive_ptr<IECore::RunTimeTyped> > > {lvalue} dragBeginSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEndSignal (self, *args, **kwargs):
      '''
dragEndSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEndSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEnterSignal (self, *args, **kwargs):
      '''
dragEnterSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEnterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragLeaveSignal (self, *args, **kwargs):
      '''
dragLeaveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragLeaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragMoveSignal (self, *args, **kwargs):
      '''
dragMoveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dropSignal (self, *args, **kwargs):
      '''
dropSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dropSignal(GafferUI::Gadget {lvalue})'''
    ...
    def enabled (self, *args, **kwargs):
      '''
enabled( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool enabled(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def enterSignal (self, *args, **kwargs):
      '''
enterSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} enterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def fullTransform (self, *args, **kwargs):
      '''
fullTransform( (Gadget)arg1 [, (Gadget)arg2]) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> fullTransform(GafferUI::Gadget {lvalue} [,GafferUI::Gadget const*])'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getEnabled (self, *args, **kwargs):
      '''
getEnabled( (Gadget)arg1) -> bool :

    C++ signature :
        bool getEnabled(GafferUI::Gadget {lvalue})'''
    ...
    def getHighlighted (self, *args, **kwargs):
      '''
getHighlighted( (Gadget)arg1) -> bool :

    C++ signature :
        bool getHighlighted(GafferUI::Gadget {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getStyle (self, *args, **kwargs):
      '''
getStyle( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> getStyle(GafferUI::Gadget {lvalue})'''
    ...
    def getToolTip (self, *args, **kwargs):
      '''
getToolTip( (NodeGadget)arg1, (LineSegment3f)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > getToolTip(GafferUI::NodeGadget,IECore::LineSegment<Imath_3_1::Vec3<float> >)'''
    ...
    def getTransform (self, *args, **kwargs):
      '''
getTransform( (Gadget)arg1) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> getTransform(GafferUI::Gadget {lvalue})'''
    ...
    def getVisible (self, *args, **kwargs):
      '''
getVisible( (Gadget)arg1) -> bool :

    C++ signature :
        bool getVisible(GafferUI::Gadget {lvalue})'''
    ...
    def idleSignal (self, *args, **kwargs):
      '''
idleSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} idleSignal()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (NodeGadget)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::NodeGadget {lvalue},IECore::TypeId)

isInstanceOf( (NodeGadget)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::NodeGadget {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keyPressSignal (self, *args, **kwargs):
      '''
keyPressSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keyReleaseSignal (self, *args, **kwargs):
      '''
keyReleaseSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def leaveSignal (self, *args, **kwargs):
      '''
leaveSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} leaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def mouseMoveSignal (self, *args, **kwargs):
      '''
mouseMoveSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} mouseMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (NodeGadget)arg1) -> object :

    C++ signature :
        Gaffer::Node* node(GafferUI::NodeGadget {lvalue})'''
    ...
    def nodule (self, *args, **kwargs):
      '''
nodule( (NodeGadget)arg1, (Plug)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Nodule> nodule(GafferUI::NodeGadget {lvalue},Gaffer::Plug const*)'''
    ...
    def noduleAddedSignal (self, *args, **kwargs):
      '''
noduleAddedSignal( (NodeGadget)arg1) -> NoduleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::NodeGadget*, GafferUI::Nodule*), Gaffer::Signals::DefaultCombiner<void> > {lvalue} noduleAddedSignal(GafferUI::NodeGadget {lvalue})'''
    ...
    def noduleRemovedSignal (self, *args, **kwargs):
      '''
noduleRemovedSignal( (NodeGadget)arg1) -> NoduleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::NodeGadget*, GafferUI::Nodule*), Gaffer::Signals::DefaultCombiner<void> > {lvalue} noduleRemovedSignal(GafferUI::NodeGadget {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerNodeGadget (self, *args, **kwargs):
      '''
registerNodeGadget( (TypeId)arg1, (object)arg2) -> None :

    C++ signature :
        void registerNodeGadget(IECore::TypeId,boost::python::api::object)

registerNodeGadget( (object)nodeGadgetType, (object)creator [, (TypeId)nodeType=IECore._IECore.TypeId.Invalid]) -> None :

    C++ signature :
        void registerNodeGadget(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,boost::python::api::object [,IECore::TypeId=IECore._IECore.TypeId.Invalid])'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setEnabled (self, *args, **kwargs):
      '''
setEnabled( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnabled(GafferUI::Gadget {lvalue},bool)'''
    ...
    def setHighlighted (self, *args, **kwargs):
      '''
setHighlighted( (NodeGadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHighlighted(GafferUI::NodeGadget {lvalue},bool)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setStyle (self, *args, **kwargs):
      '''
setStyle( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setStyle(GafferUI::Gadget {lvalue},boost::intrusive_ptr<GafferUI::Style const>)'''
    ...
    def setToolTip (self, *args, **kwargs):
      '''
setToolTip( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setToolTip(GafferUI::Gadget {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def setTransform (self, *args, **kwargs):
      '''
setTransform( (Gadget)arg1, (M44f)arg2) -> None :

    C++ signature :
        void setTransform(GafferUI::Gadget {lvalue},Imath_3_1::Matrix44<float>)'''
    ...
    def setVisible (self, *args, **kwargs):
      '''
setVisible( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setVisible(GafferUI::Gadget {lvalue},bool)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def style (self, *args, **kwargs):
      '''
style( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> style(GafferUI::Gadget {lvalue})'''
    ...
    def transformedBound (self, *args, **kwargs):
      '''
transformedBound( (Gadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue})

transformedBound( (Gadget)arg1, (Gadget)arg2) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue},GafferUI::Gadget const*)'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (NodeGadget)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(GafferUI::NodeGadget {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (NodeGadget)arg1) -> str :

    C++ signature :
        char const* typeName(GafferUI::NodeGadget {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...
    def visibilityChangedSignal (self, *args, **kwargs):
      '''
visibilityChangedSignal( (Gadget)arg1) -> VisibilityChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} visibilityChangedSignal(GafferUI::Gadget {lvalue})'''
    ...
    def visible (self, *args, **kwargs):
      '''
visible( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool visible(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def wheelSignal (self, *args, **kwargs):
      '''
wheelSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} wheelSignal(GafferUI::Gadget {lvalue})'''
    ...

def NodeGraph (*args):
      '''

'''      
    ...

class NodeGraph:
    def Settings (name, script):
      '''None'''
    ...
    def _Editor__contextChanged (self, context, key):
      '''None'''
    ...
    def _Editor__enter (self, widget):
      '''None'''
    ...
    def _Editor__leave (self, widget):
      '''None'''
    ...
    def _Editor__namesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Editor__setContextInternal (self, context, callUpdate):
      '''None'''
    ...
    def _GraphEditor__annotationsMenu (self):
      '''None'''
    ...
    def _GraphEditor__buttonDoubleClick (self, widget, event):
      '''None'''
    ...
    def _GraphEditor__buttonPress (self, widget, event):
      '''None'''
    ...
    def _GraphEditor__childrenViewable (node):
      '''None'''
    ...
    def _GraphEditor__connectionContextMenuSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _GraphEditor__currentFrame (self):
      '''None'''
    ...
    def _GraphEditor__dragEnter (self, widget, event):
      '''None'''
    ...
    def _GraphEditor__dragLeave (self, widget, event):
      '''None'''
    ...
    def _GraphEditor__drop (self, widget, event):
      '''None'''
    ...
    def _GraphEditor__dropNodes (self, dragData):
      '''None'''
    ...
    def _GraphEditor__frame (self, nodes, extend=False, at=None):
      '''None'''
    ...
    def _GraphEditor__getNodeInputConnectionsVisible (graphGadget, node):
      '''None'''
    ...
    def _GraphEditor__getNodeOutputConnectionsVisible (graphGadget, node):
      '''None'''
    ...
    def _GraphEditor__keyPress (self, widget, event):
      '''None'''
    ...
    def _GraphEditor__nodeContextMenuSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _GraphEditor__nodeDoubleClickSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _GraphEditor__nodeGadgetAt (self, position):
      '''None'''
    ...
    def _GraphEditor__nodeMenuVisibilityChanged (self, widget):
      '''None'''
    ...
    def _GraphEditor__plugContextMenuSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _GraphEditor__popupNodeMenu (self):
      '''None'''
    ...
    def _GraphEditor__preRender (self, viewportGadget):
      '''None'''
    ...
    def _GraphEditor__rootChanged (self, graphGadget, previousRoot):
      '''None'''
    ...
    def _GraphEditor__rootNameChanged (self, root, oldName):
      '''None'''
    ...
    def _GraphEditor__rootParentChanged (self, node, oldParent):
      '''None'''
    ...
    def _GraphEditor__select (node):
      '''None'''
    ...
    def _GraphEditor__setEnabled (node, value):
      '''None'''
    ...
    def _GraphEditor__setNodeInputConnectionsVisible (graphGadget, node, value):
      '''None'''
    ...
    def _GraphEditor__setNodeOutputConnectionsVisible (graphGadget, node, value):
      '''None'''
    ...
    def _GraphEditor__setVisibleAnnotations (self, unused, annotations):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _contextChangedConnection (self):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _nodeMenu (self):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromContext (self, modifiedItems):
      '''None'''
    ...
    def acquire (rootNode):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def appendConnectionNavigationMenuDefinitions (graphEditor, destinationPlug, menuDefinition):
      '''None'''
    ...
    def appendConnectionVisibilityMenuDefinitions (graphEditor, node, menuDefinition):
      '''None'''
    ...
    def appendContentsMenuDefinitions (graphEditor, node, menuDefinition):
      '''None'''
    ...
    def appendEnabledPlugMenuDefinitions (graphEditor, node, menuDefinition):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def connectionContextMenuSignal ():
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (name, scriptNode):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def frame (self, nodes, extend=False):
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getTitle (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def graphGadget (self):
      '''None'''
    ...
    def graphGadgetWidget (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def instanceCreatedSignal ():
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def nodeContextMenuSignal ():
      '''None'''
    ...
    def nodeDoubleClickSignal ():
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def plugContextMenuSignal ():
      '''None'''
    ...
    def registerType (name, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def scriptNode (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setTitle (self, title):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def titleChangedSignal (self):
      '''None'''
    ...
    def types ():
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def NodeMenu (*args):
      '''

'''      
    ...

class NodeMenu:
    def acquire (applicationOrApplicationRoot):
      '''None'''
    ...
    def append (self, path, nodeCreator, plugValues={}, postCreator=None, **kw):
      '''None'''
    ...
    def definition (self):
      '''None'''
    ...
    def nodeCreatorWrapper (nodeCreator, plugValues={}, postCreator=None):
      '''None'''
    ...

def NodeSetEditor (*args):
      '''

'''      
    ...

class NodeSetEditor:
    def Settings (name, script):
      '''None'''
    ...
    def _Editor__contextChanged (self, context, key):
      '''None'''
    ...
    def _Editor__enter (self, widget):
      '''None'''
    ...
    def _Editor__leave (self, widget):
      '''None'''
    ...
    def _Editor__namesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Editor__setContextInternal (self, context, callUpdate):
      '''None'''
    ...
    def _NodeSetEditor__dirtyTitle (self):
      '''None'''
    ...
    def _NodeSetEditor__lazyUpdate (self):
      '''None'''
    ...
    def _NodeSetEditor__membersChanged (self, set, member):
      '''None'''
    ...
    def _NodeSetEditor__nameChanged (self, node, oldName):
      '''None'''
    ...
    def _NodeSetEditor__setNodeSetInternal (self, nodeSet, callUpdateFromSet):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _contextChangedConnection (self):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _doPendingUpdate (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _lastAddedNode (self):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _titleFormat (self, _prefix=None, _maxNodes=2, _reverseNodes=False, _ellipsis=True):
      '''None'''
    ...
    def _updateFromContext (self, modifiedItems):
      '''None'''
    ...
    def _updateFromSet (self):
      '''None'''
    ...
    def acquire (node, floating=None):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (name, scriptNode):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getNodeSet (self):
      '''None'''
    ...
    def getTitle (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def instanceCreatedSignal ():
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def nodeSetChangedSignal (self):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def registerType (name, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def scriptNode (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setNodeSet (self, nodeSet):
      '''None'''
    ...
    def setTitle (self, title):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def titleChangedSignal (self):
      '''None'''
    ...
    def types ():
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def NodeToolbar (*args):
      '''

'''      
    ...

class NodeToolbar:
    def _NodeToolbar__creators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (node, edge=<Edge.Top: 1>):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def node (self):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def registerCreator (nodeClassOrTypeId, toolbarCreator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def NodeUI (*args):
      '''

'''      
    ...

class NodeUI:
    def _NodeUI__deletePlug (plug):
      '''None'''
    ...
    def _NodeUI__nodeUIs (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def appendPlugDeletionMenuDefinitions (plugOrPlugValueWidget, menuDefinition):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (node):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def node (self):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def plugValueWidget (self, plug):
      '''None'''
    ...
    def registerNodeUI (nodeClassOrTypeId, nodeUICreator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def Nodule (*args):
      '''

'''      
    ...

class Nodule:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ButtonSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DirtyType (self, *args, **kwargs):
      '''None'''
    ...
    def DragBeginSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DragDropSignal (self, *args, **kwargs):
      '''None'''
    ...
    def EnterLeaveSignal (self, *args, **kwargs):
      '''None'''
    ...
    def IdleSignal (self, *args, **kwargs):
      '''None'''
    ...
    def KeySignal (self, *args, **kwargs):
      '''None'''
    ...
    def Layer (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def RenderReason (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def VisibilityChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _dirty (self, *args, **kwargs):
      '''
_dirty( (Gadget)arg1, (DirtyType)arg2) -> None :

    C++ signature :
        void _dirty(GafferUI::Gadget {lvalue},GafferUI::Gadget::DirtyType)'''
    ...
    def _idleSignalAccessedSignal (self, *args, **kwargs):
      '''
_idleSignalAccessedSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} _idleSignalAccessedSignal()'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (Nodule)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(GafferUI::Nodule,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (Nodule)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(GafferUI::Nodule,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def bound (self, *args, **kwargs):
      '''
bound( (Nodule)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > bound(GafferUI::Nodule)'''
    ...
    def buttonDoubleClickSignal (self, *args, **kwargs):
      '''
buttonDoubleClickSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonDoubleClickSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonPressSignal (self, *args, **kwargs):
      '''
buttonPressSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonReleaseSignal (self, *args, **kwargs):
      '''
buttonReleaseSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def canCreateConnection (self, *args, **kwargs):
      '''
canCreateConnection( (Nodule)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool canCreateConnection(GafferUI::Nodule,Gaffer::Plug const*)'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def create (self, *args, **kwargs):
      '''
create( (object)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Nodule> create(boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def createConnection (self, *args, **kwargs):
      '''
createConnection( (Nodule)arg1, (Plug)arg2) -> None :

    C++ signature :
        void createConnection(GafferUI::Nodule {lvalue},Gaffer::Plug*)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def dragBeginSignal (self, *args, **kwargs):
      '''
dragBeginSignal( (Gadget)arg1) -> DragBeginSignal :

    C++ signature :
        Gaffer::Signals::Signal<boost::intrusive_ptr<IECore::RunTimeTyped> (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<boost::intrusive_ptr<IECore::RunTimeTyped> > > {lvalue} dragBeginSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEndSignal (self, *args, **kwargs):
      '''
dragEndSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEndSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEnterSignal (self, *args, **kwargs):
      '''
dragEnterSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEnterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragLeaveSignal (self, *args, **kwargs):
      '''
dragLeaveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragLeaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragMoveSignal (self, *args, **kwargs):
      '''
dragMoveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dropSignal (self, *args, **kwargs):
      '''
dropSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dropSignal(GafferUI::Gadget {lvalue})'''
    ...
    def enabled (self, *args, **kwargs):
      '''
enabled( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool enabled(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def enterSignal (self, *args, **kwargs):
      '''
enterSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} enterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def fullTransform (self, *args, **kwargs):
      '''
fullTransform( (Gadget)arg1 [, (Gadget)arg2]) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> fullTransform(GafferUI::Gadget {lvalue} [,GafferUI::Gadget const*])'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getEnabled (self, *args, **kwargs):
      '''
getEnabled( (Gadget)arg1) -> bool :

    C++ signature :
        bool getEnabled(GafferUI::Gadget {lvalue})'''
    ...
    def getHighlighted (self, *args, **kwargs):
      '''
getHighlighted( (Gadget)arg1) -> bool :

    C++ signature :
        bool getHighlighted(GafferUI::Gadget {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getStyle (self, *args, **kwargs):
      '''
getStyle( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> getStyle(GafferUI::Gadget {lvalue})'''
    ...
    def getToolTip (self, *args, **kwargs):
      '''
getToolTip( (Nodule)arg1, (LineSegment3f)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > getToolTip(GafferUI::Nodule,IECore::LineSegment<Imath_3_1::Vec3<float> >)'''
    ...
    def getTransform (self, *args, **kwargs):
      '''
getTransform( (Gadget)arg1) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> getTransform(GafferUI::Gadget {lvalue})'''
    ...
    def getVisible (self, *args, **kwargs):
      '''
getVisible( (Gadget)arg1) -> bool :

    C++ signature :
        bool getVisible(GafferUI::Gadget {lvalue})'''
    ...
    def idleSignal (self, *args, **kwargs):
      '''
idleSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} idleSignal()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (Nodule)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::Nodule {lvalue},IECore::TypeId)

isInstanceOf( (Nodule)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::Nodule {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keyPressSignal (self, *args, **kwargs):
      '''
keyPressSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keyReleaseSignal (self, *args, **kwargs):
      '''
keyReleaseSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def leaveSignal (self, *args, **kwargs):
      '''
leaveSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} leaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def mouseMoveSignal (self, *args, **kwargs):
      '''
mouseMoveSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} mouseMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plug (self, *args, **kwargs):
      '''
plug( (Nodule)arg1) -> object :

    C++ signature :
        Gaffer::Plug* plug(GafferUI::Nodule {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerNodule (self, *args, **kwargs):
      '''
registerNodule( (object)noduleTypeName, (object)creator [, (TypeId)plugType=IECore._IECore.TypeId.Invalid]) -> None :

    C++ signature :
        void registerNodule(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,boost::python::api::object [,IECore::TypeId=IECore._IECore.TypeId.Invalid])'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setEnabled (self, *args, **kwargs):
      '''
setEnabled( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnabled(GafferUI::Gadget {lvalue},bool)'''
    ...
    def setHighlighted (self, *args, **kwargs):
      '''
setHighlighted( (Nodule)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHighlighted(GafferUI::Nodule {lvalue},bool)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setStyle (self, *args, **kwargs):
      '''
setStyle( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setStyle(GafferUI::Gadget {lvalue},boost::intrusive_ptr<GafferUI::Style const>)'''
    ...
    def setToolTip (self, *args, **kwargs):
      '''
setToolTip( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setToolTip(GafferUI::Gadget {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def setTransform (self, *args, **kwargs):
      '''
setTransform( (Gadget)arg1, (M44f)arg2) -> None :

    C++ signature :
        void setTransform(GafferUI::Gadget {lvalue},Imath_3_1::Matrix44<float>)'''
    ...
    def setVisible (self, *args, **kwargs):
      '''
setVisible( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setVisible(GafferUI::Gadget {lvalue},bool)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def style (self, *args, **kwargs):
      '''
style( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> style(GafferUI::Gadget {lvalue})'''
    ...
    def transformedBound (self, *args, **kwargs):
      '''
transformedBound( (Gadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue})

transformedBound( (Gadget)arg1, (Gadget)arg2) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue},GafferUI::Gadget const*)'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (Nodule)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(GafferUI::Nodule {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (Nodule)arg1) -> str :

    C++ signature :
        char const* typeName(GafferUI::Nodule {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def updateDragEndPoint (self, *args, **kwargs):
      '''
updateDragEndPoint( (Nodule)arg1, (V3f)arg2, (V3f)arg3) -> None :

    C++ signature :
        void updateDragEndPoint(GafferUI::Nodule {lvalue},Imath_3_1::Vec3<float>,Imath_3_1::Vec3<float>)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...
    def visibilityChangedSignal (self, *args, **kwargs):
      '''
visibilityChangedSignal( (Gadget)arg1) -> VisibilityChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} visibilityChangedSignal(GafferUI::Gadget {lvalue})'''
    ...
    def visible (self, *args, **kwargs):
      '''
visible( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool visible(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def wheelSignal (self, *args, **kwargs):
      '''
wheelSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} wheelSignal(GafferUI::Gadget {lvalue})'''
    ...

def NoduleLayout (*args):
      '''
__init__(_object*, boost::intrusive_ptr<Gaffer::GraphComponent>, IECore::InternedString)

'''      
    ...

class NoduleLayout:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ButtonSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DirtyType (self, *args, **kwargs):
      '''None'''
    ...
    def DragBeginSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DragDropSignal (self, *args, **kwargs):
      '''None'''
    ...
    def EnterLeaveSignal (self, *args, **kwargs):
      '''None'''
    ...
    def IdleSignal (self, *args, **kwargs):
      '''None'''
    ...
    def KeySignal (self, *args, **kwargs):
      '''None'''
    ...
    def Layer (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def RenderReason (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def VisibilityChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _dirty (self, *args, **kwargs):
      '''
_dirty( (Gadget)arg1, (DirtyType)arg2) -> None :

    C++ signature :
        void _dirty(GafferUI::Gadget {lvalue},GafferUI::Gadget::DirtyType)'''
    ...
    def _idleSignalAccessedSignal (self, *args, **kwargs):
      '''
_idleSignalAccessedSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} _idleSignalAccessedSignal()'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (NoduleLayout)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(GafferUI::NoduleLayout,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (NoduleLayout)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(GafferUI::NoduleLayout,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def bound (self, *args, **kwargs):
      '''
bound( (NoduleLayout)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > bound(GafferUI::NoduleLayout)'''
    ...
    def buttonDoubleClickSignal (self, *args, **kwargs):
      '''
buttonDoubleClickSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonDoubleClickSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonPressSignal (self, *args, **kwargs):
      '''
buttonPressSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonReleaseSignal (self, *args, **kwargs):
      '''
buttonReleaseSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def customGadget (self, *args, **kwargs):
      '''
customGadget( (NoduleLayout)arg1, (object)arg2) -> object :

    C++ signature :
        GafferUI::Gadget* customGadget(GafferUI::NoduleLayout {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def dragBeginSignal (self, *args, **kwargs):
      '''
dragBeginSignal( (Gadget)arg1) -> DragBeginSignal :

    C++ signature :
        Gaffer::Signals::Signal<boost::intrusive_ptr<IECore::RunTimeTyped> (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<boost::intrusive_ptr<IECore::RunTimeTyped> > > {lvalue} dragBeginSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEndSignal (self, *args, **kwargs):
      '''
dragEndSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEndSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEnterSignal (self, *args, **kwargs):
      '''
dragEnterSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEnterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragLeaveSignal (self, *args, **kwargs):
      '''
dragLeaveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragLeaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragMoveSignal (self, *args, **kwargs):
      '''
dragMoveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dropSignal (self, *args, **kwargs):
      '''
dropSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dropSignal(GafferUI::Gadget {lvalue})'''
    ...
    def enabled (self, *args, **kwargs):
      '''
enabled( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool enabled(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def enterSignal (self, *args, **kwargs):
      '''
enterSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} enterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def fullTransform (self, *args, **kwargs):
      '''
fullTransform( (Gadget)arg1 [, (Gadget)arg2]) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> fullTransform(GafferUI::Gadget {lvalue} [,GafferUI::Gadget const*])'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getEnabled (self, *args, **kwargs):
      '''
getEnabled( (Gadget)arg1) -> bool :

    C++ signature :
        bool getEnabled(GafferUI::Gadget {lvalue})'''
    ...
    def getHighlighted (self, *args, **kwargs):
      '''
getHighlighted( (Gadget)arg1) -> bool :

    C++ signature :
        bool getHighlighted(GafferUI::Gadget {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getStyle (self, *args, **kwargs):
      '''
getStyle( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> getStyle(GafferUI::Gadget {lvalue})'''
    ...
    def getToolTip (self, *args, **kwargs):
      '''
getToolTip( (NoduleLayout)arg1, (LineSegment3f)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > getToolTip(GafferUI::NoduleLayout,IECore::LineSegment<Imath_3_1::Vec3<float> >)'''
    ...
    def getTransform (self, *args, **kwargs):
      '''
getTransform( (Gadget)arg1) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> getTransform(GafferUI::Gadget {lvalue})'''
    ...
    def getVisible (self, *args, **kwargs):
      '''
getVisible( (Gadget)arg1) -> bool :

    C++ signature :
        bool getVisible(GafferUI::Gadget {lvalue})'''
    ...
    def idleSignal (self, *args, **kwargs):
      '''
idleSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} idleSignal()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (NoduleLayout)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::NoduleLayout {lvalue},IECore::TypeId)

isInstanceOf( (NoduleLayout)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::NoduleLayout {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keyPressSignal (self, *args, **kwargs):
      '''
keyPressSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keyReleaseSignal (self, *args, **kwargs):
      '''
keyReleaseSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def leaveSignal (self, *args, **kwargs):
      '''
leaveSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} leaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def mouseMoveSignal (self, *args, **kwargs):
      '''
mouseMoveSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} mouseMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def nodule (self, *args, **kwargs):
      '''
nodule( (NoduleLayout)arg1, (Plug)arg2) -> object :

    C++ signature :
        GafferUI::Nodule* nodule(GafferUI::NoduleLayout {lvalue},Gaffer::Plug const*)'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerCustomGadget (self, *args, **kwargs):
      '''
registerCustomGadget( (object)arg1, (object)arg2) -> None :

    C++ signature :
        void registerCustomGadget(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,boost::python::api::object)'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setEnabled (self, *args, **kwargs):
      '''
setEnabled( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnabled(GafferUI::Gadget {lvalue},bool)'''
    ...
    def setHighlighted (self, *args, **kwargs):
      '''
setHighlighted( (NoduleLayout)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHighlighted(GafferUI::NoduleLayout {lvalue},bool)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setStyle (self, *args, **kwargs):
      '''
setStyle( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setStyle(GafferUI::Gadget {lvalue},boost::intrusive_ptr<GafferUI::Style const>)'''
    ...
    def setToolTip (self, *args, **kwargs):
      '''
setToolTip( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setToolTip(GafferUI::Gadget {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def setTransform (self, *args, **kwargs):
      '''
setTransform( (Gadget)arg1, (M44f)arg2) -> None :

    C++ signature :
        void setTransform(GafferUI::Gadget {lvalue},Imath_3_1::Matrix44<float>)'''
    ...
    def setVisible (self, *args, **kwargs):
      '''
setVisible( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setVisible(GafferUI::Gadget {lvalue},bool)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def style (self, *args, **kwargs):
      '''
style( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> style(GafferUI::Gadget {lvalue})'''
    ...
    def transformedBound (self, *args, **kwargs):
      '''
transformedBound( (Gadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue})

transformedBound( (Gadget)arg1, (Gadget)arg2) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue},GafferUI::Gadget const*)'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (NoduleLayout)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(GafferUI::NoduleLayout {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (NoduleLayout)arg1) -> str :

    C++ signature :
        char const* typeName(GafferUI::NoduleLayout {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...
    def visibilityChangedSignal (self, *args, **kwargs):
      '''
visibilityChangedSignal( (Gadget)arg1) -> VisibilityChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} visibilityChangedSignal(GafferUI::Gadget {lvalue})'''
    ...
    def visible (self, *args, **kwargs):
      '''
visible( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool visible(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def wheelSignal (self, *args, **kwargs):
      '''
wheelSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} wheelSignal(GafferUI::Gadget {lvalue})'''
    ...

def NoduleSignal (*args):
      '''
__init__(_object*)

'''      
    ...

class NoduleSignal:
    def connect (self, *args, **kwargs):
      '''
connect( (NoduleSignal)arg1, (object)slot [, (object)scoped=None]) -> object :

    C++ signature :
        boost::python::api::object connect(Gaffer::Signals::Signal<void (GafferUI::NodeGadget*, GafferUI::Nodule*), Gaffer::Signals::DefaultCombiner<void> > {lvalue},boost::python::api::object {lvalue} [,boost::python::api::object=None])'''
    ...
    def connectFront (self, *args, **kwargs):
      '''
connectFront( (NoduleSignal)arg1, (object)slot [, (object)scoped=None]) -> object :

    C++ signature :
        boost::python::api::object connectFront(Gaffer::Signals::Signal<void (GafferUI::NodeGadget*, GafferUI::Nodule*), Gaffer::Signals::DefaultCombiner<void> > {lvalue},boost::python::api::object {lvalue} [,boost::python::api::object=None])'''
    ...
    def disconnectAllSlots (self, *args, **kwargs):
      '''
disconnectAllSlots( (NoduleSignal)arg1) -> None :

    C++ signature :
        void disconnectAllSlots(Gaffer::Signals::Signal<void (GafferUI::NodeGadget*, GafferUI::Nodule*), Gaffer::Signals::DefaultCombiner<void> > {lvalue})'''
    ...
    def empty (self, *args, **kwargs):
      '''
empty( (NoduleSignal)arg1) -> bool :

    C++ signature :
        bool empty(Gaffer::Signals::Signal<void (GafferUI::NodeGadget*, GafferUI::Nodule*), Gaffer::Signals::DefaultCombiner<void> > {lvalue})'''
    ...
    def numSlots (self, *args, **kwargs):
      '''
numSlots( (NoduleSignal)arg1) -> int :

    C++ signature :
        unsigned long numSlots(Gaffer::Signals::Signal<void (GafferUI::NodeGadget*, GafferUI::Nodule*), Gaffer::Signals::DefaultCombiner<void> > {lvalue})'''
    ...

def NotificationMessageHandler (*args):
      '''

'''      
    ...

class NotificationMessageHandler:
    def Level (self, *args, **kwargs):
      '''None'''
    ...
    def _NotificationMessageHandler__windowClosed (window):
      '''None'''
    ...
    def _NotificationMessageHandler__windows (self, *args, **kwargs):
      '''set() -> new empty set object
set(iterable) -> new set object

Build an unordered collection of unique elements.'''
    ...
    def _Scope (self, *args, **kwargs):
      '''None'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def currentHandler (self, *args, **kwargs):
      '''
currentHandler() -> object :

    C++ signature :
        IECore::MessageHandler* currentHandler()'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getDefaultHandler (self, *args, **kwargs):
      '''
getDefaultHandler() -> object :

    C++ signature :
        IECore::MessageHandler* getDefaultHandler()'''
    ...
    def handle (self, level, context, msg):
      '''None'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def levelAsString (self, *args, **kwargs):
      '''
levelAsString( (Level)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > levelAsString(IECore::MessageHandler::Level)'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def output (self, *args, **kwargs):
      '''
output( (Level)arg1, (object)arg2, (object)arg3) -> None :

    C++ signature :
        void output(IECore::MessageHandler::Level,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def setDefaultHandler (self, *args, **kwargs):
      '''
setDefaultHandler( (object)arg1) -> None :

    C++ signature :
        void setDefaultHandler(boost::intrusive_ptr<IECore::MessageHandler>)'''
    ...
    def stringAsLevel (self, *args, **kwargs):
      '''
stringAsLevel( (object)arg1) -> Level :

    C++ signature :
        IECore::MessageHandler::Level stringAsLevel(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...

def NumericPlugValueWidget (*args):
      '''

'''      
    ...

class NumericPlugValueWidget:
    def MultiplePlugTypesError (self, *args, **kwargs):
      '''None'''
    ...
    def MultiplePlugsError (self, *args, **kwargs):
      '''None'''
    ...
    def MultipleWidgetCreatorsError (self, *args, **kwargs):
      '''None'''
    ...
    def _NumericPlugValueWidget__keyPress (self, widget, event):
      '''None'''
    ...
    def _NumericPlugValueWidget__setPlugValues (self, mergeGroup=''):
      '''None'''
    ...
    def _NumericPlugValueWidget__valueChanged (self, widget, reason):
      '''None'''
    ...
    def _PlugValueWidget__applyPreset (self, presetName, *unused):
      '''None'''
    ...
    def _PlugValueWidget__applyReadOnly (self, readOnly):
      '''None'''
    ...
    def _PlugValueWidget__applyUserDefaults (self):
      '''None'''
    ...
    def _PlugValueWidget__auxiliaryPlugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__buttonPress (self, widget, event, buttonMask):
      '''None'''
    ...
    def _PlugValueWidget__callLegacyUpdateMethods (self):
      '''None'''
    ...
    def _PlugValueWidget__callUpdateFromValues (self):
      '''None'''
    ...
    def _PlugValueWidget__contextChanged (self, context, key):
      '''None'''
    ...
    def _PlugValueWidget__contextMenu (self, *unused):
      '''None'''
    ...
    def _PlugValueWidget__copyValue (self):
      '''None'''
    ...
    def _PlugValueWidget__creator (plug, typeMetadata):
      '''None'''
    ...
    def _PlugValueWidget__defaultContext (graphComponent):
      '''None'''
    ...
    def _PlugValueWidget__dragEnter (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__dragLeave (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__drop (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__editInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__fallbackContext (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__nodeMetadataChanged (self, nodeTypeId, key, node):
      '''None'''
    ...
    def _PlugValueWidget__plugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugInputChanged (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugMetadataChanged (self, plug, key, reason):
      '''None'''
    ...
    def _PlugValueWidget__plugTypesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _PlugValueWidget__popupMenuSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__presetsSubMenu (self):
      '''None'''
    ...
    def _PlugValueWidget__removeInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__setPlugsInternal (self, plugs, callUpdateMethods):
      '''None'''
    ...
    def _PlugValueWidget__setValues (self, values):
      '''None'''
    ...
    def _PlugValueWidget__updateContextConnection (self):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackground (self, plugs, auxiliaryPlugs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPlug (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPostCall (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPreCall (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _addPopupMenu (self, widget=None, buttons=GafferUI._GafferUI.Buttons.Right):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _auxiliaryPlugs (self, plug):
      '''None'''
    ...
    def _blockedUpdateFromValues (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _convertValue (self, value):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _editable (self, canEditAnimation=False):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _plugConnections (self):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _popupMenuDefinition (self):
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _requestUpdateFromValues (self, lazy=True):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromEditable (self):
      '''None'''
    ...
    def _updateFromMetadata (self):
      '''None'''
    ...
    def _updateFromValues (self, values, exception):
      '''None'''
    ...
    def _valuesDependOnContext (self):
      '''None'''
    ...
    def _valuesForUpdate (plugs, auxiliaryPlugs):
      '''None'''
    ...
    def acquire (plug):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childPlugValueWidget (self, childPlug):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (plugs, typeMetadata='plugValueWidget:type'):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getPlug (self):
      '''None'''
    ...
    def getPlugs (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def hasLabel (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def numericWidget (self):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def popupMenuSignal ():
      '''None'''
    ...
    def registerType (plugClassOrTypeId, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setPlug (self, plug):
      '''None'''
    ...
    def setPlugs (self, plugs):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def NumericSlider (*args):
      '''

'''      
    ...

class NumericSlider:
    def ValueChangedReason (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def _Slider__buttonPress (self, widget, event):
      '''None'''
    ...
    def _Slider__dragBegin (self, widget, event):
      '''None'''
    ...
    def _Slider__dragEnd (self, widget, event):
      '''None'''
    ...
    def _Slider__dragEnter (self, widget, event):
      '''None'''
    ...
    def _Slider__dragMove (self, widget, event):
      '''None'''
    ...
    def _Slider__draw (self, painter):
      '''None'''
    ...
    def _Slider__emitValueChanged (self, reason):
      '''None'''
    ...
    def _Slider__eventValue (self, event):
      '''None'''
    ...
    def _Slider__indexUnderMouse (self):
      '''None'''
    ...
    def _Slider__keyPress (self, widget, event):
      '''None'''
    ...
    def _Slider__leave (self, widget):
      '''None'''
    ...
    def _Slider__mouseMove (self, widget, event):
      '''None'''
    ...
    def _Slider__setValueInternal (self, index, value, reason):
      '''None'''
    ...
    def _Slider__setValuesInternal (self, values, reason):
      '''None'''
    ...
    def _Slider__valueToPosition (self, value):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _drawBackground (self, painter):
      '''None'''
    ...
    def _drawValue (self, painter, value, position, state):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def changesShouldBeMerged (firstReason, secondReason):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getHoverPositionVisible (self):
      '''None'''
    ...
    def getIncrement (self):
      '''None'''
    ...
    def getMinimumSize (self):
      '''None'''
    ...
    def getRange (self):
      '''None'''
    ...
    def getSelectedIndex (self):
      '''None'''
    ...
    def getSizeEditable (self):
      '''None'''
    ...
    def getSnapIncrement (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getValue (self):
      '''None'''
    ...
    def getValues (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def indexRemovedSignal (self):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def selectedIndexChangedSignal (self):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setHoverPositionVisible (self, visible):
      '''None'''
    ...
    def setIncrement (self, increment):
      '''None'''
    ...
    def setMinimumSize (self, minimumSize):
      '''None'''
    ...
    def setRange (self, min, max, hardMin=None, hardMax=None):
      '''None'''
    ...
    def setSelectedIndex (self, index):
      '''None'''
    ...
    def setSizeEditable (self, editable):
      '''None'''
    ...
    def setSnapIncrement (self, increment):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setValue (self, value):
      '''None'''
    ...
    def setValues (self, values):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def valueChangedSignal (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def NumericWidget (*args):
      '''

'''      
    ...

class NumericWidget:
    def DisplayMode (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def ValueChangedReason (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def _NumericWidget__buttonPress (self, widget, event):
      '''None'''
    ...
    def _NumericWidget__dragBegin (self, widget, event):
      '''None'''
    ...
    def _NumericWidget__dragEnd (self, widget, event):
      '''None'''
    ...
    def _NumericWidget__dragEnter (self, widget, event):
      '''None'''
    ...
    def _NumericWidget__dragMove (self, widget, event):
      '''None'''
    ...
    def _NumericWidget__editingFinished (self, widget):
      '''None'''
    ...
    def _NumericWidget__emitValueChanged (self, reason):
      '''None'''
    ...
    def _NumericWidget__incrementIndex (self, index, increment):
      '''None'''
    ...
    def _NumericWidget__keyPress (self, widget, event):
      '''None'''
    ...
    def _NumericWidget__setValueFromDrag (self, event, reason):
      '''None'''
    ...
    def _NumericWidget__setValueInternal (self, value, reason):
      '''None'''
    ...
    def _NumericWidget__valueToString (self, value):
      '''None'''
    ...
    def _TextWidget__buttonPress (self, widget, event):
      '''None'''
    ...
    def _TextWidget__buttonRelease (self, widget, event):
      '''None'''
    ...
    def _TextWidget__editingFinished (self):
      '''None'''
    ...
    def _TextWidget__keyPress (self, widget, event):
      '''None'''
    ...
    def _TextWidget__keyRelease (self, widget, event):
      '''None'''
    ...
    def _TextWidget__returnPressed (self):
      '''None'''
    ...
    def _TextWidget__selectionChanged (self):
      '''None'''
    ...
    def _TextWidget__selectionPossiblyFinished (self):
      '''None'''
    ...
    def _TextWidget__startSelectionFinishedTimer (self):
      '''None'''
    ...
    def _TextWidget__textChanged (self, text):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _eventPosition (self, event):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def activatedSignal (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def changesShouldBeMerged (firstReason, secondReason):
      '''None'''
    ...
    def clearUndo (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def editingFinishedSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getCharacterWidth (self):
      '''None'''
    ...
    def getCursorPosition (self):
      '''None'''
    ...
    def getDisplayMode (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEditable (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getErrored (self):
      '''None'''
    ...
    def getFixedCharacterWidth (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getPreferredCharacterWidth (self):
      '''None'''
    ...
    def getSelection (self):
      '''None'''
    ...
    def getText (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getValue (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def grabFocus (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def selectingFinishedSignal (self):
      '''None'''
    ...
    def selectionChangedSignal (self):
      '''None'''
    ...
    def setCharacterWidth (self, numCharacters):
      '''None'''
    ...
    def setCursorPosition (self, position):
      '''None'''
    ...
    def setDisplayMode (self, displayMode):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEditable (self, editable):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setErrored (self, errored):
      '''None'''
    ...
    def setFixedCharacterWidth (self, numCharacters):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setPreferredCharacterWidth (self, numCharacters):
      '''None'''
    ...
    def setSelection (self, start, end):
      '''None'''
    ...
    def setText (self, text):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setValue (self, value):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def textChangedSignal (self):
      '''None'''
    ...
    def valueChangedSignal (self):
      '''None'''
    ...
    def valueToString (value):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def OptionalValuePlugValueWidget (*args):
      '''

'''      
    ...

class OptionalValuePlugValueWidget:
    def MultiplePlugTypesError (self, *args, **kwargs):
      '''None'''
    ...
    def MultiplePlugsError (self, *args, **kwargs):
      '''None'''
    ...
    def MultipleWidgetCreatorsError (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__applyPreset (self, presetName, *unused):
      '''None'''
    ...
    def _PlugValueWidget__applyReadOnly (self, readOnly):
      '''None'''
    ...
    def _PlugValueWidget__applyUserDefaults (self):
      '''None'''
    ...
    def _PlugValueWidget__auxiliaryPlugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__buttonPress (self, widget, event, buttonMask):
      '''None'''
    ...
    def _PlugValueWidget__callLegacyUpdateMethods (self):
      '''None'''
    ...
    def _PlugValueWidget__callUpdateFromValues (self):
      '''None'''
    ...
    def _PlugValueWidget__contextChanged (self, context, key):
      '''None'''
    ...
    def _PlugValueWidget__contextMenu (self, *unused):
      '''None'''
    ...
    def _PlugValueWidget__copyValue (self):
      '''None'''
    ...
    def _PlugValueWidget__creator (plug, typeMetadata):
      '''None'''
    ...
    def _PlugValueWidget__defaultContext (graphComponent):
      '''None'''
    ...
    def _PlugValueWidget__dragEnter (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__dragLeave (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__drop (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__editInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__fallbackContext (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__nodeMetadataChanged (self, nodeTypeId, key, node):
      '''None'''
    ...
    def _PlugValueWidget__plugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugInputChanged (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugMetadataChanged (self, plug, key, reason):
      '''None'''
    ...
    def _PlugValueWidget__plugTypesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _PlugValueWidget__popupMenuSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__presetsSubMenu (self):
      '''None'''
    ...
    def _PlugValueWidget__removeInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__setPlugsInternal (self, plugs, callUpdateMethods):
      '''None'''
    ...
    def _PlugValueWidget__setValues (self, values):
      '''None'''
    ...
    def _PlugValueWidget__updateContextConnection (self):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackground (self, plugs, auxiliaryPlugs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPlug (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPostCall (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPreCall (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _addPopupMenu (self, widget=None, buttons=GafferUI._GafferUI.Buttons.Right):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _auxiliaryPlugs (self, plug):
      '''None'''
    ...
    def _blockedUpdateFromValues (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _convertValue (self, value):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _editable (self, canEditAnimation=False):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _plugConnections (self):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _popupMenuDefinition (self):
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _requestUpdateFromValues (self, lazy=True):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromEditable (self):
      '''None'''
    ...
    def _updateFromMetadata (self):
      '''None'''
    ...
    def _updateFromValues (self, values, exception):
      '''None'''
    ...
    def _valuesDependOnContext (self):
      '''None'''
    ...
    def _valuesForUpdate (plugs, auxiliaryPlugs):
      '''None'''
    ...
    def acquire (plug):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childPlugValueWidget (self, childPlug):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (plugs, typeMetadata='plugValueWidget:type'):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getPlug (self):
      '''None'''
    ...
    def getPlugs (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def hasLabel (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def popupMenuSignal ():
      '''None'''
    ...
    def registerType (plugClassOrTypeId, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setPlug (self, plug):
      '''None'''
    ...
    def setPlugs (self, plugs):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def PathChooserDialogue (*args):
      '''

'''      
    ...

class PathChooserDialogue:
    def SizeMode (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def _Dialogue__buttonClicked (self, button):
      '''None'''
    ...
    def _Dialogue__close (self, widget):
      '''None'''
    ...
    def _PathChooserDialogue__buttonClicked (self, button):
      '''None'''
    ...
    def _PathChooserDialogue__pathChooserSelected (self, pathChooser):
      '''None'''
    ...
    def _PathChooserDialogue__result (self):
      '''None'''
    ...
    def _PathChooserDialogue__updateButtonState (self, *unused):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _Window__caughtKeys ():
      '''None'''
    ...
    def _Window__caughtKeysSet (self, *args, **kwargs):
      '''None'''
    ...
    def _Window__constrainToScreen (self, position):
      '''None'''
    ...
    def _Window__keyPress (self, widget, event):
      '''None'''
    ...
    def _acceptsClose (self):
      '''None'''
    ...
    def _addButton (self, textOrButton):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _getWidget (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _revealDescendant (self, descendant):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _setWidget (self, widget):
      '''None'''
    ...
    def addChild (self, child):
      '''None'''
    ...
    def addChildWindow (self, childWindow, removeOnClose=False):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childWindows (self):
      '''None'''
    ...
    def close (self):
      '''None'''
    ...
    def closedSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getChild (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getFullScreen (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getIcon (self):
      '''None'''
    ...
    def getModal (self):
      '''None'''
    ...
    def getPosition (self):
      '''None'''
    ...
    def getResizeable (self):
      '''None'''
    ...
    def getSizeMode (self):
      '''None'''
    ...
    def getTitle (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def pathChooserWidget (self):
      '''None'''
    ...
    def pathSelectedSignal (self):
      '''None'''
    ...
    def preCloseSignal (self):
      '''None'''
    ...
    def removeChild (self, child):
      '''None'''
    ...
    def resizeToFitChild (self, shrink=True, expand=True):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setChild (self, child):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setFullScreen (self, fullScreen):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setIcon (self, imageOrImageFileName):
      '''None'''
    ...
    def setModal (self, modal, parentWindow=None):
      '''None'''
    ...
    def setPosition (self, position, forcePosition=False):
      '''None'''
    ...
    def setResizeable (self, resizeable):
      '''None'''
    ...
    def setSizeMode (self, sizeMode):
      '''None'''
    ...
    def setTitle (self, title):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def waitForButton (self, parentWindow=None):
      '''None'''
    ...
    def waitForPath (self, **kw):
      '''None'''
    ...
    def waitForPaths (self, **kw):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def PathChooserWidget (*args):
      '''

'''      
    ...

class PathChooserWidget:
    def _PathChooserWidget__bookmarksButtonDragEnter (self, button, event):
      '''None'''
    ...
    def _PathChooserWidget__bookmarksButtonDragLeave (self, button, event):
      '''None'''
    ...
    def _PathChooserWidget__bookmarksButtonDrop (self, button, event):
      '''None'''
    ...
    def _PathChooserWidget__bookmarksButtonDropPath (self, event):
      '''None'''
    ...
    def _PathChooserWidget__bookmarksMenuDefinition (self):
      '''None'''
    ...
    def _PathChooserWidget__dirPathChanged (self, dirPath):
      '''None'''
    ...
    def _PathChooserWidget__displayModeButtonClicked (self, button):
      '''None'''
    ...
    def _PathChooserWidget__displayModeChanged (self, pathListing):
      '''None'''
    ...
    def _PathChooserWidget__listingPathChanged (self, listingPath):
      '''None'''
    ...
    def _PathChooserWidget__listingSelectionChanged (self, widget):
      '''None'''
    ...
    def _PathChooserWidget__pathChanged (self, path):
      '''None'''
    ...
    def _PathChooserWidget__pathSelected (self, childWidget):
      '''None'''
    ...
    def _PathChooserWidget__reloadButtonClicked (self, button):
      '''None'''
    ...
    def _PathChooserWidget__saveBookmark (self, path=None):
      '''None'''
    ...
    def _PathChooserWidget__upButtonClicked (self, button):
      '''None'''
    ...
    def _PathChooserWidget__updateFilter (self):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def directoryPathWidget (self):
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getBookmarks (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getPath (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def pathListingWidget (self):
      '''None'''
    ...
    def pathSelectedSignal (self):
      '''None'''
    ...
    def pathWidget (self):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setBookmarks (self, bookmarks):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setPath (self, path):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def PathColumn (*args):
      '''
__init__(_object*, GafferUI::PathColumn::SizeMode sizeMode=GafferUI._GafferUI.SizeMode.Default)

'''      
    ...

class PathColumn:
    def ButtonSignal (self, *args, **kwargs):
      '''None'''
    ...
    def CellData (self, *args, **kwargs):
      '''None'''
    ...
    def PathColumnSignal (self, *args, **kwargs):
      '''None'''
    ...
    def SizeMode (self, *args, **kwargs):
      '''None'''
    ...
    def buttonDoubleClickSignal (self, *args, **kwargs):
      '''
buttonDoubleClickSignal( (PathColumn)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (Gaffer::Path&, GafferUI::PathListingWidget&, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonDoubleClickSignal(GafferUI::PathColumn {lvalue})'''
    ...
    def buttonPressSignal (self, *args, **kwargs):
      '''
buttonPressSignal( (PathColumn)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (Gaffer::Path&, GafferUI::PathListingWidget&, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonPressSignal(GafferUI::PathColumn {lvalue})'''
    ...
    def buttonReleaseSignal (self, *args, **kwargs):
      '''
buttonReleaseSignal( (PathColumn)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (Gaffer::Path&, GafferUI::PathListingWidget&, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonReleaseSignal(GafferUI::PathColumn {lvalue})'''
    ...
    def cellData (self, *args, **kwargs):
      '''
cellData( (PathColumn)arg1, (Path)path [, (Canceller)canceller=None]) -> CellData :

    C++ signature :
        GafferUI::PathColumn::CellData cellData(GafferUI::PathColumn {lvalue},Gaffer::Path [,IECore::Canceller const*=None])'''
    ...
    def changedSignal (self, *args, **kwargs):
      '''
changedSignal( (PathColumn)arg1) -> PathColumnSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::PathColumn*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} changedSignal(GafferUI::PathColumn {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getSizeMode (self, *args, **kwargs):
      '''
getSizeMode( (PathColumn)arg1) -> SizeMode :

    C++ signature :
        GafferUI::PathColumn::SizeMode getSizeMode(GafferUI::PathColumn {lvalue})'''
    ...
    def headerData (self, *args, **kwargs):
      '''
headerData( (PathColumn)arg1 [, (Canceller)canceller=None]) -> CellData :

    C++ signature :
        GafferUI::PathColumn::CellData headerData(GafferUI::PathColumn {lvalue} [,IECore::Canceller const*=None])'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def setSizeMode (self, *args, **kwargs):
      '''
setSizeMode( (PathColumn)arg1, (SizeMode)sizeMode) -> None :

    C++ signature :
        void setSizeMode(GafferUI::PathColumn {lvalue},GafferUI::PathColumn::SizeMode)'''
    ...

def PathFilterWidget (*args):
      '''

'''      
    ...

class PathFilterWidget:
    def _PathFilterWidget__pathFilterChanged (self, pathFilter):
      '''None'''
    ...
    def _PathFilterWidget__typesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _pathFilterChangedConnection (self):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromPathFilter (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (pathFilter):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def pathFilter (self):
      '''None'''
    ...
    def registerType (pathFilterClass, widgetCreationFunction):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def PathListingWidget (*args):
      '''

'''      
    ...

class PathListingWidget:
    def Column (self, *args, **kwargs):
      '''None'''
    ...
    def DisplayMode (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def IconColumn (self, *args, **kwargs):
      '''None'''
    ...
    def SelectionMode (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def StandardColumn (self, *args, **kwargs):
      '''None'''
    ...
    def _PathListingWidget__activated (self, modelIndex):
      '''None'''
    ...
    def _PathListingWidget__buttonDoubleClick (self, widget, event):
      '''None'''
    ...
    def _PathListingWidget__buttonPress (self, widget, event):
      '''None'''
    ...
    def _PathListingWidget__buttonRelease (self, widget, event):
      '''None'''
    ...
    def _PathListingWidget__cellSelectionMode (self):
      '''None'''
    ...
    def _PathListingWidget__dirPath (self):
      '''None'''
    ...
    def _PathListingWidget__dragBegin (self, widget, event):
      '''None'''
    ...
    def _PathListingWidget__dragEnd (self, widget, event):
      '''None'''
    ...
    def _PathListingWidget__expansionChanged (self):
      '''None'''
    ...
    def _PathListingWidget__getSelectionInternal (self):
      '''None'''
    ...
    def _PathListingWidget__indexAt (self, position):
      '''None'''
    ...
    def _PathListingWidget__indexForPath (self, path):
      '''None'''
    ...
    def _PathListingWidget__keyPress (self, widget, event):
      '''None'''
    ...
    def _PathListingWidget__mouseMove (self, widget, event):
      '''None'''
    ...
    def _PathListingWidget__multiSelectionMode (self):
      '''None'''
    ...
    def _PathListingWidget__pathChanged (self, path):
      '''None'''
    ...
    def _PathListingWidget__pathForIndex (self, modelIndex):
      '''None'''
    ...
    def _PathListingWidget__pathsForIndexRange (self, index0, index1):
      '''None'''
    ...
    def _PathListingWidget__rangeSelect (self, index):
      '''None'''
    ...
    def _PathListingWidget__rowSelectionMode (self):
      '''None'''
    ...
    def _PathListingWidget__selectionChanged (self):
      '''None'''
    ...
    def _PathListingWidget__setSelectionInternal (self, paths, scrollToFirst=True):
      '''None'''
    ...
    def _PathListingWidget__singleSelect (self, index):
      '''None'''
    ...
    def _PathListingWidget__toggleSelect (self, index):
      '''None'''
    ...
    def _PathListingWidget__update (self):
      '''None'''
    ...
    def _PathListingWidget__updateFinished (self):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def columnAt (self, position):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def defaultFileSystemColumns (self, *args, **kwargs):
      '''Built-in immutable sequence.

If no argument is given, the constructor returns an empty tuple.
If iterable is specified the tuple is initialized from iterable's items.

If the argument is a tuple, the return value is the same object.'''
    ...
    def defaultFileSystemIconColumn (self, *args, **kwargs):
      '''None'''
    ...
    def defaultFileSystemModificationTimeColumn (self, *args, **kwargs):
      '''None'''
    ...
    def defaultFileSystemOwnerColumn (self, *args, **kwargs):
      '''None'''
    ...
    def defaultIndexedIOArrayLengthColumn (self, *args, **kwargs):
      '''None'''
    ...
    def defaultIndexedIOColumns (self, *args, **kwargs):
      '''Built-in immutable sequence.

If no argument is given, the constructor returns an empty tuple.
If iterable is specified the tuple is initialized from iterable's items.

If the argument is a tuple, the return value is the same object.'''
    ...
    def defaultIndexedIODataTypeColumn (self, *args, **kwargs):
      '''None'''
    ...
    def defaultIndexedIOEntryTypeColumn (self, *args, **kwargs):
      '''None'''
    ...
    def defaultNameColumn (self, *args, **kwargs):
      '''None'''
    ...
    def displayModeChangedSignal (self):
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def expandToSelection (self):
      '''None'''
    ...
    def expansionChangedSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getColumns (self):
      '''None'''
    ...
    def getDisplayMode (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getDragPointer (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getExpandedPaths (self):
      '''None'''
    ...
    def getExpansion (self):
      '''None'''
    ...
    def getHeaderVisible (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getPath (self):
      '''None'''
    ...
    def getPathExpanded (self, path):
      '''None'''
    ...
    def getSelectedPaths (self):
      '''None'''
    ...
    def getSelection (self):
      '''None'''
    ...
    def getSortable (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def pathAt (self, position):
      '''None'''
    ...
    def pathSelectedSignal (self):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def scrollToFirst (self, paths):
      '''None'''
    ...
    def scrollToPath (self, path):
      '''None'''
    ...
    def selectedPaths (self):
      '''None'''
    ...
    def selectionChangedSignal (self):
      '''None'''
    ...
    def setColumns (self, columns):
      '''None'''
    ...
    def setDisplayMode (self, displayMode):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setDragPointer (self, dragPointer):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setExpandedPaths (self, paths):
      '''None'''
    ...
    def setExpansion (self, paths):
      '''None'''
    ...
    def setHeaderVisible (self, visible):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setPath (self, path):
      '''None'''
    ...
    def setPathExpanded (self, path, expanded):
      '''None'''
    ...
    def setSelectedPaths (self, pathOrPaths, scrollToFirst=True):
      '''None'''
    ...
    def setSelection (self, paths, scrollToFirst=True):
      '''None'''
    ...
    def setSortable (self, sortable):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def updateFinishedSignal (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def PathPlugValueWidget (*args):
      '''

'''      
    ...

class PathPlugValueWidget:
    def MultiplePlugTypesError (self, *args, **kwargs):
      '''None'''
    ...
    def MultiplePlugsError (self, *args, **kwargs):
      '''None'''
    ...
    def MultipleWidgetCreatorsError (self, *args, **kwargs):
      '''None'''
    ...
    def _PathPlugValueWidget__buttonClicked (self, widget):
      '''None'''
    ...
    def _PathPlugValueWidget__metadataValue (self, name):
      '''None'''
    ...
    def _PathPlugValueWidget__setPlugValue (self, *args):
      '''None'''
    ...
    def _PlugValueWidget__applyPreset (self, presetName, *unused):
      '''None'''
    ...
    def _PlugValueWidget__applyReadOnly (self, readOnly):
      '''None'''
    ...
    def _PlugValueWidget__applyUserDefaults (self):
      '''None'''
    ...
    def _PlugValueWidget__auxiliaryPlugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__buttonPress (self, widget, event, buttonMask):
      '''None'''
    ...
    def _PlugValueWidget__callLegacyUpdateMethods (self):
      '''None'''
    ...
    def _PlugValueWidget__callUpdateFromValues (self):
      '''None'''
    ...
    def _PlugValueWidget__contextChanged (self, context, key):
      '''None'''
    ...
    def _PlugValueWidget__contextMenu (self, *unused):
      '''None'''
    ...
    def _PlugValueWidget__copyValue (self):
      '''None'''
    ...
    def _PlugValueWidget__creator (plug, typeMetadata):
      '''None'''
    ...
    def _PlugValueWidget__defaultContext (graphComponent):
      '''None'''
    ...
    def _PlugValueWidget__dragEnter (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__dragLeave (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__drop (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__editInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__fallbackContext (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__nodeMetadataChanged (self, nodeTypeId, key, node):
      '''None'''
    ...
    def _PlugValueWidget__plugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugInputChanged (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugMetadataChanged (self, plug, key, reason):
      '''None'''
    ...
    def _PlugValueWidget__plugTypesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _PlugValueWidget__popupMenuSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__presetsSubMenu (self):
      '''None'''
    ...
    def _PlugValueWidget__removeInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__setPlugsInternal (self, plugs, callUpdateMethods):
      '''None'''
    ...
    def _PlugValueWidget__setValues (self, values):
      '''None'''
    ...
    def _PlugValueWidget__updateContextConnection (self):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackground (self, plugs, auxiliaryPlugs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPlug (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPostCall (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPreCall (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _addPopupMenu (self, widget=None, buttons=GafferUI._GafferUI.Buttons.Right):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _auxiliaryPlugs (self, plug):
      '''None'''
    ...
    def _blockedUpdateFromValues (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _convertValue (self, value):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _editable (self, canEditAnimation=False):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _pathChooserDialogue (self):
      '''None'''
    ...
    def _plugConnections (self):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _popupMenuDefinition (self):
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _requestUpdateFromValues (self, lazy=True):
      '''None'''
    ...
    def _setPlugFromPath (self, path):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromEditable (self):
      '''None'''
    ...
    def _updateFromMetadata (self):
      '''None'''
    ...
    def _updateFromValues (self, values, exception):
      '''None'''
    ...
    def _valuesDependOnContext (self):
      '''None'''
    ...
    def _valuesForUpdate (plugs, auxiliaryPlugs):
      '''None'''
    ...
    def acquire (plug):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childPlugValueWidget (self, childPlug):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (plugs, typeMetadata='plugValueWidget:type'):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getPlug (self):
      '''None'''
    ...
    def getPlugs (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def hasLabel (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def path (self):
      '''None'''
    ...
    def pathWidget (self):
      '''None'''
    ...
    def popupMenuSignal ():
      '''None'''
    ...
    def registerType (plugClassOrTypeId, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setPlug (self, plug):
      '''None'''
    ...
    def setPlugs (self, plugs):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def PathPreviewWidget (*args):
      '''

'''      
    ...

class PathPreviewWidget:
    def _PathPreviewWidget__namesToCreators (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _PathPreviewWidget__pathChanged (self, path):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromPath (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (name, path):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getPath (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def isValid (self):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def registerType (name, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setPath (self, path):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def types ():
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def PathVectorDataPlugValueWidget (*args):
      '''

'''      
    ...

class PathVectorDataPlugValueWidget:
    def MultiplePlugTypesError (self, *args, **kwargs):
      '''None'''
    ...
    def MultiplePlugsError (self, *args, **kwargs):
      '''None'''
    ...
    def MultipleWidgetCreatorsError (self, *args, **kwargs):
      '''None'''
    ...
    def _PathVectorDataPlugValueWidget__dataChanged (self, widget):
      '''None'''
    ...
    def _PathVectorDataPlugValueWidget__pathChooserDialogueKeywords (self):
      '''None'''
    ...
    def _PlugValueWidget__applyPreset (self, presetName, *unused):
      '''None'''
    ...
    def _PlugValueWidget__applyReadOnly (self, readOnly):
      '''None'''
    ...
    def _PlugValueWidget__applyUserDefaults (self):
      '''None'''
    ...
    def _PlugValueWidget__auxiliaryPlugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__buttonPress (self, widget, event, buttonMask):
      '''None'''
    ...
    def _PlugValueWidget__callLegacyUpdateMethods (self):
      '''None'''
    ...
    def _PlugValueWidget__callUpdateFromValues (self):
      '''None'''
    ...
    def _PlugValueWidget__contextChanged (self, context, key):
      '''None'''
    ...
    def _PlugValueWidget__contextMenu (self, *unused):
      '''None'''
    ...
    def _PlugValueWidget__copyValue (self):
      '''None'''
    ...
    def _PlugValueWidget__creator (plug, typeMetadata):
      '''None'''
    ...
    def _PlugValueWidget__defaultContext (graphComponent):
      '''None'''
    ...
    def _PlugValueWidget__dragEnter (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__dragLeave (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__drop (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__editInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__fallbackContext (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__nodeMetadataChanged (self, nodeTypeId, key, node):
      '''None'''
    ...
    def _PlugValueWidget__plugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugInputChanged (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugMetadataChanged (self, plug, key, reason):
      '''None'''
    ...
    def _PlugValueWidget__plugTypesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _PlugValueWidget__popupMenuSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__presetsSubMenu (self):
      '''None'''
    ...
    def _PlugValueWidget__removeInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__setPlugsInternal (self, plugs, callUpdateMethods):
      '''None'''
    ...
    def _PlugValueWidget__setValues (self, values):
      '''None'''
    ...
    def _PlugValueWidget__updateContextConnection (self):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackground (self, plugs, auxiliaryPlugs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPlug (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPostCall (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPreCall (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _addPopupMenu (self, widget=None, buttons=GafferUI._GafferUI.Buttons.Right):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _auxiliaryPlugs (self, plug):
      '''None'''
    ...
    def _blockedUpdateFromValues (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _convertValue (self, value):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _editable (self, canEditAnimation=False):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _plugConnections (self):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _popupMenuDefinition (self):
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _requestUpdateFromValues (self, lazy=True):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromEditable (self):
      '''None'''
    ...
    def _updateFromMetadata (self):
      '''None'''
    ...
    def _updateFromValues (self, values, exception):
      '''None'''
    ...
    def _valuesDependOnContext (self):
      '''None'''
    ...
    def _valuesForUpdate (plugs, auxiliaryPlugs):
      '''None'''
    ...
    def acquire (plug):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childPlugValueWidget (self, childPlug):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (plugs, typeMetadata='plugValueWidget:type'):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getPlug (self):
      '''None'''
    ...
    def getPlugs (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def hasLabel (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def path (self):
      '''None'''
    ...
    def popupMenuSignal ():
      '''None'''
    ...
    def registerType (plugClassOrTypeId, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setPlug (self, plug):
      '''None'''
    ...
    def setPlugs (self, plugs):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def PathVectorDataWidget (*args):
      '''

'''      
    ...

class PathVectorDataWidget:
    def _PathVectorDataWidget__edit (self, vectorDataWidget, column, row):
      '''None'''
    ...
    def _VectorDataWidget__addRows (self, button):
      '''None'''
    ...
    def _VectorDataWidget__buttonPress (self, widget, event):
      '''None'''
    ...
    def _VectorDataWidget__buttonRelease (self, widget, event):
      '''None'''
    ...
    def _VectorDataWidget__clearSelection (self):
      '''None'''
    ...
    def _VectorDataWidget__contextMenu (self, pos):
      '''None'''
    ...
    def _VectorDataWidget__dragBegin (self, widget, event):
      '''None'''
    ...
    def _VectorDataWidget__dragEnd (self, widget, event):
      '''None'''
    ...
    def _VectorDataWidget__dragEnter (self, widget, event):
      '''None'''
    ...
    def _VectorDataWidget__dragLeave (self, widget, event):
      '''None'''
    ...
    def _VectorDataWidget__drop (self, widget, event):
      '''None'''
    ...
    def _VectorDataWidget__emitButtonPress (self, event):
      '''None'''
    ...
    def _VectorDataWidget__emitDataChangedSignal (self, *unusedArgs):
      '''None'''
    ...
    def _VectorDataWidget__keyPress (self, widget, event):
      '''None'''
    ...
    def _VectorDataWidget__modelDataChanged (self, topLeft, bottomRight, roles):
      '''None'''
    ...
    def _VectorDataWidget__mouseMove (self, widget, event):
      '''None'''
    ...
    def _VectorDataWidget__removeRows (self, rows):
      '''None'''
    ...
    def _VectorDataWidget__removeSelection (self, button):
      '''None'''
    ...
    def _VectorDataWidget__selectAll (self):
      '''None'''
    ...
    def _VectorDataWidget__selectedRows (self):
      '''None'''
    ...
    def _VectorDataWidget__selectionChanged (self, *unused):
      '''None'''
    ...
    def _VectorDataWidget__updateRemoveButtonEnabled (self):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _contextMenuDefinition (self, selectedRows):
      '''None'''
    ...
    def _createRows (self):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _pathChooserDialogueKeywords (self):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def addButton (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def columnToDataIndex (self, columnIndex):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def dataChangedSignal (self):
      '''None'''
    ...
    def dataMenuSignal (self):
      '''None'''
    ...
    def dataToColumnIndex (self, dataIndex, componentIndex):
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def editSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getColumnEditable (self, columnIndex):
      '''None'''
    ...
    def getColumnVisible (self, columnIndex):
      '''None'''
    ...
    def getData (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getDragPointer (self):
      '''None'''
    ...
    def getEditable (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getErrored (self):
      '''None'''
    ...
    def getHeader (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getSizeEditable (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getToolTips (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def indexAt (self, position):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def path (self):
      '''None'''
    ...
    def removeButton (self):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def selectedIndices (self):
      '''None'''
    ...
    def setColumnEditable (self, columnIndex, editable):
      '''None'''
    ...
    def setColumnVisible (self, columnIndex, visible):
      '''None'''
    ...
    def setData (self, data):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setDragPointer (self, dragPointer):
      '''None'''
    ...
    def setEditable (self, editable):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setErrored (self, errored):
      '''None'''
    ...
    def setHeader (self, header):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setSizeEditable (self, sizeEditable):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setToolTips (self, toolTips):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def PathWidget (*args):
      '''

'''      
    ...

class PathWidget:
    def DisplayMode (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def _PathWidget__keyPress (self, widget, event):
      '''None'''
    ...
    def _PathWidget__pathChanged (self, path):
      '''None'''
    ...
    def _PathWidget__popupHierarchy (self):
      '''None'''
    ...
    def _PathWidget__popupListing (self, textIndex):
      '''None'''
    ...
    def _PathWidget__popupMenuForSelection (self):
      '''None'''
    ...
    def _PathWidget__popupPosition (self, textIndex):
      '''None'''
    ...
    def _PathWidget__replacePathEntry (self, position, newEntry):
      '''None'''
    ...
    def _PathWidget__selectingFinished (self, widget):
      '''None'''
    ...
    def _PathWidget__textChanged (self, widget):
      '''None'''
    ...
    def _TextWidget__buttonPress (self, widget, event):
      '''None'''
    ...
    def _TextWidget__buttonRelease (self, widget, event):
      '''None'''
    ...
    def _TextWidget__editingFinished (self):
      '''None'''
    ...
    def _TextWidget__keyPress (self, widget, event):
      '''None'''
    ...
    def _TextWidget__keyRelease (self, widget, event):
      '''None'''
    ...
    def _TextWidget__returnPressed (self):
      '''None'''
    ...
    def _TextWidget__selectionChanged (self):
      '''None'''
    ...
    def _TextWidget__selectionPossiblyFinished (self):
      '''None'''
    ...
    def _TextWidget__startSelectionFinishedTimer (self):
      '''None'''
    ...
    def _TextWidget__textChanged (self, text):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _eventPosition (self, event):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def activatedSignal (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def clearUndo (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def editingFinishedSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getCharacterWidth (self):
      '''None'''
    ...
    def getCursorPosition (self):
      '''None'''
    ...
    def getDisplayMode (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEditable (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getErrored (self):
      '''None'''
    ...
    def getFixedCharacterWidth (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getPath (self):
      '''None'''
    ...
    def getPreferredCharacterWidth (self):
      '''None'''
    ...
    def getSelection (self):
      '''None'''
    ...
    def getText (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def grabFocus (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def path (self):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def selectingFinishedSignal (self):
      '''None'''
    ...
    def selectionChangedSignal (self):
      '''None'''
    ...
    def setCharacterWidth (self, numCharacters):
      '''None'''
    ...
    def setCursorPosition (self, position):
      '''None'''
    ...
    def setDisplayMode (self, displayMode):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEditable (self, editable):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setErrored (self, errored):
      '''None'''
    ...
    def setFixedCharacterWidth (self, numCharacters):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setPath (self, path):
      '''None'''
    ...
    def setPreferredCharacterWidth (self, numCharacters):
      '''None'''
    ...
    def setSelection (self, start, end):
      '''None'''
    ...
    def setText (self, text):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def textChangedSignal (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def Playback (*args):
      '''

'''      
    ...

class Playback:
    def State (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def _Playback__incrementFrame (self, increment):
      '''None'''
    ...
    def _Playback__instances (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Playback__timerCallback (self):
      '''None'''
    ...
    def acquire (context):
      '''None'''
    ...
    def context (self):
      '''None'''
    ...
    def frameRangeChangedSignal (self):
      '''None'''
    ...
    def getFrameRange (self):
      '''None'''
    ...
    def getState (self):
      '''None'''
    ...
    def incrementFrame (self, increment=1):
      '''None'''
    ...
    def setFrameRange (self, startFrame, endFrame):
      '''None'''
    ...
    def setState (self, state):
      '''None'''
    ...
    def stateChangedSignal (self):
      '''None'''
    ...

def PlugAdder (*args):
      '''
__init__(_object*)

'''      
    ...

class PlugAdder:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ButtonSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DirtyType (self, *args, **kwargs):
      '''None'''
    ...
    def DragBeginSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DragDropSignal (self, *args, **kwargs):
      '''None'''
    ...
    def EnterLeaveSignal (self, *args, **kwargs):
      '''None'''
    ...
    def IdleSignal (self, *args, **kwargs):
      '''None'''
    ...
    def KeySignal (self, *args, **kwargs):
      '''None'''
    ...
    def Layer (self, *args, **kwargs):
      '''None'''
    ...
    def MenuSignal (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def PlugMenuSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def RenderReason (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def VisibilityChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _dirty (self, *args, **kwargs):
      '''
_dirty( (Gadget)arg1, (DirtyType)arg2) -> None :

    C++ signature :
        void _dirty(GafferUI::Gadget {lvalue},GafferUI::Gadget::DirtyType)'''
    ...
    def _idleSignalAccessedSignal (self, *args, **kwargs):
      '''
_idleSignalAccessedSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} _idleSignalAccessedSignal()'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (PlugAdder)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(GafferUI::PlugAdder,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (PlugAdder)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(GafferUI::PlugAdder,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def bound (self, *args, **kwargs):
      '''
bound( (PlugAdder)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > bound(GafferUI::PlugAdder)'''
    ...
    def buttonDoubleClickSignal (self, *args, **kwargs):
      '''
buttonDoubleClickSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonDoubleClickSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonPressSignal (self, *args, **kwargs):
      '''
buttonPressSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonReleaseSignal (self, *args, **kwargs):
      '''
buttonReleaseSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def canCreateConnection (self, *args, **kwargs):
      '''
canCreateConnection( (PlugAdder)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool canCreateConnection(GafferUI::PlugAdder,Gaffer::Plug const*)'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createConnection (self, *args, **kwargs):
      '''
createConnection( (PlugAdder)arg1, (Plug)arg2) -> None :

    C++ signature :
        void createConnection(GafferUI::PlugAdder {lvalue},Gaffer::Plug*)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def dragBeginSignal (self, *args, **kwargs):
      '''
dragBeginSignal( (Gadget)arg1) -> DragBeginSignal :

    C++ signature :
        Gaffer::Signals::Signal<boost::intrusive_ptr<IECore::RunTimeTyped> (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<boost::intrusive_ptr<IECore::RunTimeTyped> > > {lvalue} dragBeginSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEndSignal (self, *args, **kwargs):
      '''
dragEndSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEndSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEnterSignal (self, *args, **kwargs):
      '''
dragEnterSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEnterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragLeaveSignal (self, *args, **kwargs):
      '''
dragLeaveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragLeaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragMoveSignal (self, *args, **kwargs):
      '''
dragMoveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dropSignal (self, *args, **kwargs):
      '''
dropSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dropSignal(GafferUI::Gadget {lvalue})'''
    ...
    def enabled (self, *args, **kwargs):
      '''
enabled( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool enabled(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def enterSignal (self, *args, **kwargs):
      '''
enterSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} enterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def fullTransform (self, *args, **kwargs):
      '''
fullTransform( (Gadget)arg1 [, (Gadget)arg2]) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> fullTransform(GafferUI::Gadget {lvalue} [,GafferUI::Gadget const*])'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getEnabled (self, *args, **kwargs):
      '''
getEnabled( (Gadget)arg1) -> bool :

    C++ signature :
        bool getEnabled(GafferUI::Gadget {lvalue})'''
    ...
    def getHighlighted (self, *args, **kwargs):
      '''
getHighlighted( (Gadget)arg1) -> bool :

    C++ signature :
        bool getHighlighted(GafferUI::Gadget {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getStyle (self, *args, **kwargs):
      '''
getStyle( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> getStyle(GafferUI::Gadget {lvalue})'''
    ...
    def getToolTip (self, *args, **kwargs):
      '''
getToolTip( (PlugAdder)arg1, (LineSegment3f)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > getToolTip(GafferUI::PlugAdder,IECore::LineSegment<Imath_3_1::Vec3<float> >)'''
    ...
    def getTransform (self, *args, **kwargs):
      '''
getTransform( (Gadget)arg1) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> getTransform(GafferUI::Gadget {lvalue})'''
    ...
    def getVisible (self, *args, **kwargs):
      '''
getVisible( (Gadget)arg1) -> bool :

    C++ signature :
        bool getVisible(GafferUI::Gadget {lvalue})'''
    ...
    def idleSignal (self, *args, **kwargs):
      '''
idleSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} idleSignal()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (PlugAdder)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::PlugAdder {lvalue},IECore::TypeId)

isInstanceOf( (PlugAdder)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::PlugAdder {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keyPressSignal (self, *args, **kwargs):
      '''
keyPressSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keyReleaseSignal (self, *args, **kwargs):
      '''
keyReleaseSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def leaveSignal (self, *args, **kwargs):
      '''
leaveSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} leaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def menuSignal (self, *args, **kwargs):
      '''
menuSignal() -> MenuSignal :

    C++ signature :
        Gaffer::Signals::Signal<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&), Gaffer::Signals::DefaultCombiner<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > {lvalue} menuSignal()'''
    ...
    def mouseMoveSignal (self, *args, **kwargs):
      '''
mouseMoveSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} mouseMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plugMenuSignal (self, *args, **kwargs):
      '''
plugMenuSignal() -> PlugMenuSignal :

    C++ signature :
        Gaffer::Signals::Signal<Gaffer::Plug* (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<Gaffer::Plug*, std::allocator<Gaffer::Plug*> > const&), Gaffer::Signals::DefaultCombiner<Gaffer::Plug*> > {lvalue} plugMenuSignal()'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setEnabled (self, *args, **kwargs):
      '''
setEnabled( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnabled(GafferUI::Gadget {lvalue},bool)'''
    ...
    def setHighlighted (self, *args, **kwargs):
      '''
setHighlighted( (PlugAdder)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHighlighted(GafferUI::PlugAdder {lvalue},bool)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setStyle (self, *args, **kwargs):
      '''
setStyle( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setStyle(GafferUI::Gadget {lvalue},boost::intrusive_ptr<GafferUI::Style const>)'''
    ...
    def setToolTip (self, *args, **kwargs):
      '''
setToolTip( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setToolTip(GafferUI::Gadget {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def setTransform (self, *args, **kwargs):
      '''
setTransform( (Gadget)arg1, (M44f)arg2) -> None :

    C++ signature :
        void setTransform(GafferUI::Gadget {lvalue},Imath_3_1::Matrix44<float>)'''
    ...
    def setVisible (self, *args, **kwargs):
      '''
setVisible( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setVisible(GafferUI::Gadget {lvalue},bool)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def style (self, *args, **kwargs):
      '''
style( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> style(GafferUI::Gadget {lvalue})'''
    ...
    def transformedBound (self, *args, **kwargs):
      '''
transformedBound( (Gadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue})

transformedBound( (Gadget)arg1, (Gadget)arg2) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue},GafferUI::Gadget const*)'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (PlugAdder)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(GafferUI::PlugAdder {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (PlugAdder)arg1) -> str :

    C++ signature :
        char const* typeName(GafferUI::PlugAdder {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def updateDragEndPoint (self, *args, **kwargs):
      '''
updateDragEndPoint( (PlugAdder)arg1, (V3f)arg2, (V3f)arg3) -> None :

    C++ signature :
        void updateDragEndPoint(GafferUI::PlugAdder {lvalue},Imath_3_1::Vec3<float>,Imath_3_1::Vec3<float>)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...
    def visibilityChangedSignal (self, *args, **kwargs):
      '''
visibilityChangedSignal( (Gadget)arg1) -> VisibilityChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} visibilityChangedSignal(GafferUI::Gadget {lvalue})'''
    ...
    def visible (self, *args, **kwargs):
      '''
visible( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool visible(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def wheelSignal (self, *args, **kwargs):
      '''
wheelSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} wheelSignal(GafferUI::Gadget {lvalue})'''
    ...

def PlugGadget (*args):
      '''

'''      
    ...

class PlugGadget:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ButtonSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DirtyType (self, *args, **kwargs):
      '''None'''
    ...
    def DragBeginSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DragDropSignal (self, *args, **kwargs):
      '''None'''
    ...
    def EnterLeaveSignal (self, *args, **kwargs):
      '''None'''
    ...
    def IdleSignal (self, *args, **kwargs):
      '''None'''
    ...
    def KeySignal (self, *args, **kwargs):
      '''None'''
    ...
    def Layer (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def RenderReason (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def VisibilityChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _dirty (self, *args, **kwargs):
      '''
_dirty( (Gadget)arg1, (DirtyType)arg2) -> None :

    C++ signature :
        void _dirty(GafferUI::Gadget {lvalue},GafferUI::Gadget::DirtyType)'''
    ...
    def _idleSignalAccessedSignal (self, *args, **kwargs):
      '''
_idleSignalAccessedSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} _idleSignalAccessedSignal()'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (PlugGadget)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(GafferUI::PlugGadget,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (PlugGadget)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(GafferUI::PlugGadget,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def bound (self, *args, **kwargs):
      '''
bound( (PlugGadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > bound(GafferUI::PlugGadget)'''
    ...
    def buttonDoubleClickSignal (self, *args, **kwargs):
      '''
buttonDoubleClickSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonDoubleClickSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonPressSignal (self, *args, **kwargs):
      '''
buttonPressSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonReleaseSignal (self, *args, **kwargs):
      '''
buttonReleaseSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def dragBeginSignal (self, *args, **kwargs):
      '''
dragBeginSignal( (Gadget)arg1) -> DragBeginSignal :

    C++ signature :
        Gaffer::Signals::Signal<boost::intrusive_ptr<IECore::RunTimeTyped> (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<boost::intrusive_ptr<IECore::RunTimeTyped> > > {lvalue} dragBeginSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEndSignal (self, *args, **kwargs):
      '''
dragEndSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEndSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEnterSignal (self, *args, **kwargs):
      '''
dragEnterSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEnterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragLeaveSignal (self, *args, **kwargs):
      '''
dragLeaveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragLeaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragMoveSignal (self, *args, **kwargs):
      '''
dragMoveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dropSignal (self, *args, **kwargs):
      '''
dropSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dropSignal(GafferUI::Gadget {lvalue})'''
    ...
    def enabled (self, *args, **kwargs):
      '''
enabled( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool enabled(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def enterSignal (self, *args, **kwargs):
      '''
enterSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} enterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def fullTransform (self, *args, **kwargs):
      '''
fullTransform( (Gadget)arg1 [, (Gadget)arg2]) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> fullTransform(GafferUI::Gadget {lvalue} [,GafferUI::Gadget const*])'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getContext (self, *args, **kwargs):
      '''
getContext( (PlugGadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Context> getContext(GafferUI::PlugGadget {lvalue})'''
    ...
    def getEnabled (self, *args, **kwargs):
      '''
getEnabled( (Gadget)arg1) -> bool :

    C++ signature :
        bool getEnabled(GafferUI::Gadget {lvalue})'''
    ...
    def getHighlighted (self, *args, **kwargs):
      '''
getHighlighted( (Gadget)arg1) -> bool :

    C++ signature :
        bool getHighlighted(GafferUI::Gadget {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getPlug (self, *args, **kwargs):
      '''
getPlug( (PlugGadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getPlug(GafferUI::PlugGadget {lvalue})'''
    ...
    def getStyle (self, *args, **kwargs):
      '''
getStyle( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> getStyle(GafferUI::Gadget {lvalue})'''
    ...
    def getToolTip (self, *args, **kwargs):
      '''
getToolTip( (PlugGadget)arg1, (LineSegment3f)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > getToolTip(GafferUI::PlugGadget,IECore::LineSegment<Imath_3_1::Vec3<float> >)'''
    ...
    def getTransform (self, *args, **kwargs):
      '''
getTransform( (Gadget)arg1) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> getTransform(GafferUI::Gadget {lvalue})'''
    ...
    def getVisible (self, *args, **kwargs):
      '''
getVisible( (Gadget)arg1) -> bool :

    C++ signature :
        bool getVisible(GafferUI::Gadget {lvalue})'''
    ...
    def idleSignal (self, *args, **kwargs):
      '''
idleSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} idleSignal()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (PlugGadget)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::PlugGadget {lvalue},IECore::TypeId)

isInstanceOf( (PlugGadget)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::PlugGadget {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keyPressSignal (self, *args, **kwargs):
      '''
keyPressSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keyReleaseSignal (self, *args, **kwargs):
      '''
keyReleaseSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def leaveSignal (self, *args, **kwargs):
      '''
leaveSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} leaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def mouseMoveSignal (self, *args, **kwargs):
      '''
mouseMoveSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} mouseMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setContext (self, *args, **kwargs):
      '''
setContext( (PlugGadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setContext(GafferUI::PlugGadget {lvalue},boost::intrusive_ptr<Gaffer::Context>)'''
    ...
    def setEnabled (self, *args, **kwargs):
      '''
setEnabled( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnabled(GafferUI::Gadget {lvalue},bool)'''
    ...
    def setHighlighted (self, *args, **kwargs):
      '''
setHighlighted( (PlugGadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHighlighted(GafferUI::PlugGadget {lvalue},bool)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setPlug (self, *args, **kwargs):
      '''
setPlug( (PlugGadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setPlug(GafferUI::PlugGadget {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setStyle (self, *args, **kwargs):
      '''
setStyle( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setStyle(GafferUI::Gadget {lvalue},boost::intrusive_ptr<GafferUI::Style const>)'''
    ...
    def setToolTip (self, *args, **kwargs):
      '''
setToolTip( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setToolTip(GafferUI::Gadget {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def setTransform (self, *args, **kwargs):
      '''
setTransform( (Gadget)arg1, (M44f)arg2) -> None :

    C++ signature :
        void setTransform(GafferUI::Gadget {lvalue},Imath_3_1::Matrix44<float>)'''
    ...
    def setVisible (self, *args, **kwargs):
      '''
setVisible( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setVisible(GafferUI::Gadget {lvalue},bool)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def style (self, *args, **kwargs):
      '''
style( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> style(GafferUI::Gadget {lvalue})'''
    ...
    def transformedBound (self, *args, **kwargs):
      '''
transformedBound( (Gadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue})

transformedBound( (Gadget)arg1, (Gadget)arg2) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue},GafferUI::Gadget const*)'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (PlugGadget)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(GafferUI::PlugGadget {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (PlugGadget)arg1) -> str :

    C++ signature :
        char const* typeName(GafferUI::PlugGadget {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...
    def visibilityChangedSignal (self, *args, **kwargs):
      '''
visibilityChangedSignal( (Gadget)arg1) -> VisibilityChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} visibilityChangedSignal(GafferUI::Gadget {lvalue})'''
    ...
    def visible (self, *args, **kwargs):
      '''
visible( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool visible(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def wheelSignal (self, *args, **kwargs):
      '''
wheelSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} wheelSignal(GafferUI::Gadget {lvalue})'''
    ...

def PlugLayout (*args):
      '''

'''      
    ...

class PlugLayout:
    def _PlugLayout__applyContext (self, widget, context):
      '''None'''
    ...
    def _PlugLayout__childAddedOrRemoved (self, *unusedArgs):
      '''None'''
    ...
    def _PlugLayout__contextChanged (self, context, name):
      '''None'''
    ...
    def _PlugLayout__createCustomWidget (self, name):
      '''None'''
    ...
    def _PlugLayout__createPlugWidget (self, plug):
      '''None'''
    ...
    def _PlugLayout__import (self, path):
      '''None'''
    ...
    def _PlugLayout__itemMetadataValue (self, item, name):
      '''None'''
    ...
    def _PlugLayout__metadataValue (plugOrNode, name):
      '''None'''
    ...
    def _PlugLayout__node (self):
      '''None'''
    ...
    def _PlugLayout__nodeMetadataChanged (self, node, key, reason):
      '''None'''
    ...
    def _PlugLayout__parentMetadataChanged (self, key):
      '''None'''
    ...
    def _PlugLayout__plugDirtied (self, plug):
      '''None'''
    ...
    def _PlugLayout__plugMetadataChanged (self, plug, key, reason):
      '''None'''
    ...
    def _PlugLayout__sectionPath (self, item):
      '''None'''
    ...
    def _PlugLayout__staticItemMetadataValue (item, name, parent, layoutName):
      '''None'''
    ...
    def _PlugLayout__staticSectionPath (item, parent, layoutName):
      '''None'''
    ...
    def _PlugLayout__update (self):
      '''None'''
    ...
    def _PlugLayout__updateActivations (self):
      '''None'''
    ...
    def _PlugLayout__updateLayout (self):
      '''None'''
    ...
    def _PlugLayout__updateLazily (self):
      '''None'''
    ...
    def _PlugLayout__updateSummariesWalk (self, section):
      '''None'''
    ...
    def _PlugLayout__widgetPlugValuesChanged (widget):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def customWidget (self, name):
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def layoutOrder (parent, includeCustomWidgets=False, section=None, layoutName='layout', rootSection=''):
      '''None'''
    ...
    def layoutSections (parent, includeCustomWidgets=False, layoutName='layout'):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def plugValueWidget (self, childPlug):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def PlugPopup (*args):
      '''

'''      
    ...

class PlugPopup:
    def SizeMode (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def _PlugPopup__colorPlugValueWidget (plugValueWidget):
      '''None'''
    ...
    def _PlugPopup__firstTextWidget (plugValueWidget):
      '''None'''
    ...
    def _PlugPopup__visibilityChanged (self, unused):
      '''None'''
    ...
    def _PopupWindow__keyPress (self, widget, event):
      '''None'''
    ...
    def _PopupWindow__paintEvent (self, event):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _Window__caughtKeys ():
      '''None'''
    ...
    def _Window__caughtKeysSet (self, *args, **kwargs):
      '''None'''
    ...
    def _Window__constrainToScreen (self, position):
      '''None'''
    ...
    def _Window__keyPress (self, widget, event):
      '''None'''
    ...
    def _acceptsClose (self):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _revealDescendant (self, descendant):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def addChild (self, child):
      '''None'''
    ...
    def addChildWindow (self, childWindow, removeOnClose=False):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childWindows (self):
      '''None'''
    ...
    def close (self):
      '''None'''
    ...
    def closedSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getChild (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getFullScreen (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getIcon (self):
      '''None'''
    ...
    def getPosition (self):
      '''None'''
    ...
    def getResizeable (self):
      '''None'''
    ...
    def getSizeMode (self):
      '''None'''
    ...
    def getTitle (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def plugValueWidget (self):
      '''None'''
    ...
    def popup (self, center=None):
      '''None'''
    ...
    def preCloseSignal (self):
      '''None'''
    ...
    def removeChild (self, child):
      '''None'''
    ...
    def resizeToFitChild (self, shrink=True, expand=True):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setChild (self, child):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setFullScreen (self, fullScreen):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setIcon (self, imageOrImageFileName):
      '''None'''
    ...
    def setPosition (self, position, forcePosition=False):
      '''None'''
    ...
    def setResizeable (self, resizeable):
      '''None'''
    ...
    def setSizeMode (self, sizeMode):
      '''None'''
    ...
    def setTitle (self, title):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def PlugValueWidget (*args):
      '''

'''      
    ...

class PlugValueWidget:
    def MultiplePlugTypesError (self, *args, **kwargs):
      '''None'''
    ...
    def MultiplePlugsError (self, *args, **kwargs):
      '''None'''
    ...
    def MultipleWidgetCreatorsError (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__applyPreset (self, presetName, *unused):
      '''None'''
    ...
    def _PlugValueWidget__applyReadOnly (self, readOnly):
      '''None'''
    ...
    def _PlugValueWidget__applyUserDefaults (self):
      '''None'''
    ...
    def _PlugValueWidget__auxiliaryPlugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__buttonPress (self, widget, event, buttonMask):
      '''None'''
    ...
    def _PlugValueWidget__callLegacyUpdateMethods (self):
      '''None'''
    ...
    def _PlugValueWidget__callUpdateFromValues (self):
      '''None'''
    ...
    def _PlugValueWidget__contextChanged (self, context, key):
      '''None'''
    ...
    def _PlugValueWidget__contextMenu (self, *unused):
      '''None'''
    ...
    def _PlugValueWidget__copyValue (self):
      '''None'''
    ...
    def _PlugValueWidget__creator (plug, typeMetadata):
      '''None'''
    ...
    def _PlugValueWidget__defaultContext (graphComponent):
      '''None'''
    ...
    def _PlugValueWidget__dragEnter (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__dragLeave (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__drop (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__editInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__fallbackContext (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__nodeMetadataChanged (self, nodeTypeId, key, node):
      '''None'''
    ...
    def _PlugValueWidget__plugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugInputChanged (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugMetadataChanged (self, plug, key, reason):
      '''None'''
    ...
    def _PlugValueWidget__plugTypesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _PlugValueWidget__popupMenuSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__presetsSubMenu (self):
      '''None'''
    ...
    def _PlugValueWidget__removeInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__setPlugsInternal (self, plugs, callUpdateMethods):
      '''None'''
    ...
    def _PlugValueWidget__setValues (self, values):
      '''None'''
    ...
    def _PlugValueWidget__updateContextConnection (self):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackground (self, plugs, auxiliaryPlugs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPlug (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPostCall (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPreCall (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _addPopupMenu (self, widget=None, buttons=GafferUI._GafferUI.Buttons.Right):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _auxiliaryPlugs (self, plug):
      '''None'''
    ...
    def _blockedUpdateFromValues (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _convertValue (self, value):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _editable (self, canEditAnimation=False):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _plugConnections (self):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _popupMenuDefinition (self):
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _requestUpdateFromValues (self, lazy=True):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromEditable (self):
      '''None'''
    ...
    def _updateFromMetadata (self):
      '''None'''
    ...
    def _updateFromValues (self, values, exception):
      '''None'''
    ...
    def _valuesDependOnContext (self):
      '''None'''
    ...
    def _valuesForUpdate (plugs, auxiliaryPlugs):
      '''None'''
    ...
    def acquire (plug):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childPlugValueWidget (self, childPlug):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (plugs, typeMetadata='plugValueWidget:type'):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getPlug (self):
      '''None'''
    ...
    def getPlugs (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def hasLabel (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def popupMenuSignal ():
      '''None'''
    ...
    def registerType (plugClassOrTypeId, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setPlug (self, plug):
      '''None'''
    ...
    def setPlugs (self, plugs):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def PlugWidget (*args):
      '''

'''      
    ...

class PlugWidget:
    def _PlugWidget__labelDragEnter (self, label, event):
      '''None'''
    ...
    def _PlugWidget__labelDragLeave (self, label, event):
      '''None'''
    ...
    def _PlugWidget__labelDrop (self, label, event):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def acquire (plug):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def labelPlugValueWidget (self):
      '''None'''
    ...
    def labelWidth ():
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def plugValueWidget (self):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def Pointer (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fileName, Imath_3_1::Vec2<int> hotspot=V2i(-1, -1))

'''      
    ...

class Pointer:
    def ChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def changedSignal (self, *args, **kwargs):
      '''
changedSignal() -> ShaderCompiledSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::DefaultCombiner<void> > {lvalue} changedSignal()'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def fileName (self, *args, **kwargs):
      '''
fileName( (Pointer)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fileName(GafferUI::Pointer {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCurrent (self, *args, **kwargs):
      '''
getCurrent() -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Pointer> getCurrent()'''
    ...
    def hotspot (self, *args, **kwargs):
      '''
hotspot( (Pointer)arg1) -> V2i :

    C++ signature :
        Imath_3_1::Vec2<int> hotspot(GafferUI::Pointer {lvalue})'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerPointer (self, *args, **kwargs):
      '''
registerPointer( (object)arg1, (object)arg2) -> None :

    C++ signature :
        void registerPointer(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,boost::intrusive_ptr<GafferUI::Pointer const>)'''
    ...
    def setCurrent (self, *args, **kwargs):
      '''
setCurrent( (object)arg1) -> None :

    C++ signature :
        void setCurrent(boost::intrusive_ptr<GafferUI::Pointer const>)

setCurrent( (object)arg1) -> None :

    C++ signature :
        void setCurrent(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...

def PopupWindow (*args):
      '''

'''      
    ...

class PopupWindow:
    def SizeMode (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def _PopupWindow__keyPress (self, widget, event):
      '''None'''
    ...
    def _PopupWindow__paintEvent (self, event):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _Window__caughtKeys ():
      '''None'''
    ...
    def _Window__caughtKeysSet (self, *args, **kwargs):
      '''None'''
    ...
    def _Window__constrainToScreen (self, position):
      '''None'''
    ...
    def _Window__keyPress (self, widget, event):
      '''None'''
    ...
    def _acceptsClose (self):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _revealDescendant (self, descendant):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def addChild (self, child):
      '''None'''
    ...
    def addChildWindow (self, childWindow, removeOnClose=False):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childWindows (self):
      '''None'''
    ...
    def close (self):
      '''None'''
    ...
    def closedSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getChild (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getFullScreen (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getIcon (self):
      '''None'''
    ...
    def getPosition (self):
      '''None'''
    ...
    def getResizeable (self):
      '''None'''
    ...
    def getSizeMode (self):
      '''None'''
    ...
    def getTitle (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def popup (self, center=None):
      '''None'''
    ...
    def preCloseSignal (self):
      '''None'''
    ...
    def removeChild (self, child):
      '''None'''
    ...
    def resizeToFitChild (self, shrink=True, expand=True):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setChild (self, child):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setFullScreen (self, fullScreen):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setIcon (self, imageOrImageFileName):
      '''None'''
    ...
    def setPosition (self, position, forcePosition=False):
      '''None'''
    ...
    def setResizeable (self, resizeable):
      '''None'''
    ...
    def setSizeMode (self, sizeMode):
      '''None'''
    ...
    def setTitle (self, title):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def PreferencesUI (*args):
      '''

'''      
    ...

def PresetsPlugValueWidget (*args):
      '''

'''      
    ...

class PresetsPlugValueWidget:
    def MultiplePlugTypesError (self, *args, **kwargs):
      '''None'''
    ...
    def MultiplePlugsError (self, *args, **kwargs):
      '''None'''
    ...
    def MultipleWidgetCreatorsError (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__applyPreset (self, presetName, *unused):
      '''None'''
    ...
    def _PlugValueWidget__applyReadOnly (self, readOnly):
      '''None'''
    ...
    def _PlugValueWidget__applyUserDefaults (self):
      '''None'''
    ...
    def _PlugValueWidget__auxiliaryPlugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__buttonPress (self, widget, event, buttonMask):
      '''None'''
    ...
    def _PlugValueWidget__callLegacyUpdateMethods (self):
      '''None'''
    ...
    def _PlugValueWidget__callUpdateFromValues (self):
      '''None'''
    ...
    def _PlugValueWidget__contextChanged (self, context, key):
      '''None'''
    ...
    def _PlugValueWidget__contextMenu (self, *unused):
      '''None'''
    ...
    def _PlugValueWidget__copyValue (self):
      '''None'''
    ...
    def _PlugValueWidget__creator (plug, typeMetadata):
      '''None'''
    ...
    def _PlugValueWidget__defaultContext (graphComponent):
      '''None'''
    ...
    def _PlugValueWidget__dragEnter (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__dragLeave (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__drop (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__editInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__fallbackContext (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__nodeMetadataChanged (self, nodeTypeId, key, node):
      '''None'''
    ...
    def _PlugValueWidget__plugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugInputChanged (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugMetadataChanged (self, plug, key, reason):
      '''None'''
    ...
    def _PlugValueWidget__plugTypesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _PlugValueWidget__popupMenuSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__presetsSubMenu (self):
      '''None'''
    ...
    def _PlugValueWidget__removeInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__setPlugsInternal (self, plugs, callUpdateMethods):
      '''None'''
    ...
    def _PlugValueWidget__setValues (self, values):
      '''None'''
    ...
    def _PlugValueWidget__updateContextConnection (self):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackground (self, plugs, auxiliaryPlugs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPlug (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPostCall (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPreCall (self, *args, **kwargs):
      '''None'''
    ...
    def _PresetsPlugValueWidget__applyCustomPreset (self, unused):
      '''None'''
    ...
    def _PresetsPlugValueWidget__applyPreset (self, unused, preset):
      '''None'''
    ...
    def _PresetsPlugValueWidget__isCustom (self):
      '''None'''
    ...
    def _PresetsPlugValueWidget__menuDefinition (self):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _addPopupMenu (self, widget=None, buttons=GafferUI._GafferUI.Buttons.Right):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _auxiliaryPlugs (self, plug):
      '''None'''
    ...
    def _blockedUpdateFromValues (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _convertValue (self, value):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _editable (self, canEditAnimation=False):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _plugConnections (self):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _popupMenuDefinition (self):
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _requestUpdateFromValues (self, lazy=True):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromEditable (self):
      '''None'''
    ...
    def _updateFromMetadata (self):
      '''None'''
    ...
    def _updateFromValues (self, values, exception):
      '''None'''
    ...
    def _valuesDependOnContext (self):
      '''None'''
    ...
    def _valuesForUpdate (plugs, auxiliaryPlugs):
      '''None'''
    ...
    def acquire (plug):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childPlugValueWidget (self, childPlug):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (plugs, typeMetadata='plugValueWidget:type'):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getPlug (self):
      '''None'''
    ...
    def getPlugs (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def hasLabel (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def menu (self):
      '''None'''
    ...
    def menuButton (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def popupMenuSignal ():
      '''None'''
    ...
    def registerType (plugClassOrTypeId, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setPlug (self, plug):
      '''None'''
    ...
    def setPlugs (self, plugs):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def ProgressBar (*args):
      '''

'''      
    ...

class ProgressBar:
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getProgress (self):
      '''None'''
    ...
    def getRange (self):
      '''None'''
    ...
    def getText (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setProgress (self, progress):
      '''None'''
    ...
    def setRange (self, range):
      '''None'''
    ...
    def setText (self, text):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def PythonEditor (*args):
      '''

'''      
    ...

class PythonEditor:
    def Settings (name, script):
      '''None'''
    ...
    def _Editor__contextChanged (self, context, key):
      '''None'''
    ...
    def _Editor__enter (self, widget):
      '''None'''
    ...
    def _Editor__leave (self, widget):
      '''None'''
    ...
    def _Editor__namesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Editor__setContextInternal (self, context, callUpdate):
      '''None'''
    ...
    def _PythonEditor__activated (self, widget):
      '''None'''
    ...
    def _PythonEditor__codeToHTML (self, code):
      '''None'''
    ...
    def _PythonEditor__contextMenu (self, widget):
      '''None'''
    ...
    def _PythonEditor__dropText (self, widget, dragData):
      '''None'''
    ...
    def _PythonEditor__exceptionToHTML (self):
      '''None'''
    ...
    def _PythonEditor__outputRedirection (self):
      '''None'''
    ...
    def _PythonEditor__syntaxErrorToHTML (self, syntaxError):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _contextChangedConnection (self):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromContext (self, modifiedItems):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (name, scriptNode):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def execute (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getTitle (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def inputWidget (self):
      '''None'''
    ...
    def instanceCreatedSignal ():
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def namespace (self):
      '''None'''
    ...
    def outputWidget (self):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def registerType (name, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def scriptNode (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setTitle (self, title):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def titleChangedSignal (self):
      '''None'''
    ...
    def types ():
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def RampPlugValueWidget (*args):
      '''

'''      
    ...

class RampPlugValueWidget:
    def MultiplePlugTypesError (self, *args, **kwargs):
      '''None'''
    ...
    def MultiplePlugsError (self, *args, **kwargs):
      '''None'''
    ...
    def MultipleWidgetCreatorsError (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__applyPreset (self, presetName, *unused):
      '''None'''
    ...
    def _PlugValueWidget__applyReadOnly (self, readOnly):
      '''None'''
    ...
    def _PlugValueWidget__applyUserDefaults (self):
      '''None'''
    ...
    def _PlugValueWidget__auxiliaryPlugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__buttonPress (self, widget, event, buttonMask):
      '''None'''
    ...
    def _PlugValueWidget__callLegacyUpdateMethods (self):
      '''None'''
    ...
    def _PlugValueWidget__callUpdateFromValues (self):
      '''None'''
    ...
    def _PlugValueWidget__contextChanged (self, context, key):
      '''None'''
    ...
    def _PlugValueWidget__contextMenu (self, *unused):
      '''None'''
    ...
    def _PlugValueWidget__copyValue (self):
      '''None'''
    ...
    def _PlugValueWidget__creator (plug, typeMetadata):
      '''None'''
    ...
    def _PlugValueWidget__defaultContext (graphComponent):
      '''None'''
    ...
    def _PlugValueWidget__dragEnter (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__dragLeave (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__drop (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__editInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__fallbackContext (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__nodeMetadataChanged (self, nodeTypeId, key, node):
      '''None'''
    ...
    def _PlugValueWidget__plugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugInputChanged (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugMetadataChanged (self, plug, key, reason):
      '''None'''
    ...
    def _PlugValueWidget__plugTypesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _PlugValueWidget__popupMenuSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__presetsSubMenu (self):
      '''None'''
    ...
    def _PlugValueWidget__removeInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__setPlugsInternal (self, plugs, callUpdateMethods):
      '''None'''
    ...
    def _PlugValueWidget__setValues (self, values):
      '''None'''
    ...
    def _PlugValueWidget__updateContextConnection (self):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackground (self, plugs, auxiliaryPlugs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPlug (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPostCall (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPreCall (self, *args, **kwargs):
      '''None'''
    ...
    def _RampPlugValueWidget__drawModeChanged (self, drawModeWidget):
      '''None'''
    ...
    def _RampPlugValueWidget__indexRemoved (self, slider, index):
      '''None'''
    ...
    def _RampPlugValueWidget__positionsChanged (self, slider, reason):
      '''None'''
    ...
    def _RampPlugValueWidget__selectedIndexChanged (self, slider):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _addPopupMenu (self, widget=None, buttons=GafferUI._GafferUI.Buttons.Right):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _auxiliaryPlugs (self, plug):
      '''None'''
    ...
    def _blockedUpdateFromValues (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _convertValue (self, value):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _editable (self, canEditAnimation=False):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _plugConnections (self):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _popupMenuDefinition (self):
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _requestUpdateFromValues (self, lazy=True):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromEditable (self):
      '''None'''
    ...
    def _updateFromMetadata (self):
      '''None'''
    ...
    def _updateFromValues (self, values, exception):
      '''None'''
    ...
    def _valuesDependOnContext (self):
      '''None'''
    ...
    def _valuesForUpdate (plugs, auxiliaryPlugs):
      '''None'''
    ...
    def acquire (plug):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childPlugValueWidget (self, childPlug):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (plugs, typeMetadata='plugValueWidget:type'):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getPlug (self):
      '''None'''
    ...
    def getPlugs (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def hasLabel (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def popupMenuSignal ():
      '''None'''
    ...
    def registerType (plugClassOrTypeId, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setPlug (self, plug):
      '''None'''
    ...
    def setPlugs (self, plugs):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def RandomChoiceUI (*args):
      '''

'''      
    ...

def RandomUI (*args):
      '''

'''      
    ...

def ReferenceUI (*args):
      '''

'''      
    ...

def RefreshPlugValueWidget (*args):
      '''

'''      
    ...

class RefreshPlugValueWidget:
    def MultiplePlugTypesError (self, *args, **kwargs):
      '''None'''
    ...
    def MultiplePlugsError (self, *args, **kwargs):
      '''None'''
    ...
    def MultipleWidgetCreatorsError (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__applyPreset (self, presetName, *unused):
      '''None'''
    ...
    def _PlugValueWidget__applyReadOnly (self, readOnly):
      '''None'''
    ...
    def _PlugValueWidget__applyUserDefaults (self):
      '''None'''
    ...
    def _PlugValueWidget__auxiliaryPlugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__buttonPress (self, widget, event, buttonMask):
      '''None'''
    ...
    def _PlugValueWidget__callLegacyUpdateMethods (self):
      '''None'''
    ...
    def _PlugValueWidget__callUpdateFromValues (self):
      '''None'''
    ...
    def _PlugValueWidget__contextChanged (self, context, key):
      '''None'''
    ...
    def _PlugValueWidget__contextMenu (self, *unused):
      '''None'''
    ...
    def _PlugValueWidget__copyValue (self):
      '''None'''
    ...
    def _PlugValueWidget__creator (plug, typeMetadata):
      '''None'''
    ...
    def _PlugValueWidget__defaultContext (graphComponent):
      '''None'''
    ...
    def _PlugValueWidget__dragEnter (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__dragLeave (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__drop (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__editInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__fallbackContext (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__nodeMetadataChanged (self, nodeTypeId, key, node):
      '''None'''
    ...
    def _PlugValueWidget__plugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugInputChanged (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugMetadataChanged (self, plug, key, reason):
      '''None'''
    ...
    def _PlugValueWidget__plugTypesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _PlugValueWidget__popupMenuSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__presetsSubMenu (self):
      '''None'''
    ...
    def _PlugValueWidget__removeInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__setPlugsInternal (self, plugs, callUpdateMethods):
      '''None'''
    ...
    def _PlugValueWidget__setValues (self, values):
      '''None'''
    ...
    def _PlugValueWidget__updateContextConnection (self):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackground (self, plugs, auxiliaryPlugs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPlug (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPostCall (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPreCall (self, *args, **kwargs):
      '''None'''
    ...
    def _RefreshPlugValueWidget__clicked (self, widget):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _addPopupMenu (self, widget=None, buttons=GafferUI._GafferUI.Buttons.Right):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _auxiliaryPlugs (self, plug):
      '''None'''
    ...
    def _blockedUpdateFromValues (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _convertValue (self, value):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _editable (self, canEditAnimation=False):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _plugConnections (self):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _popupMenuDefinition (self):
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _requestUpdateFromValues (self, lazy=True):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromEditable (self):
      '''None'''
    ...
    def _updateFromMetadata (self):
      '''None'''
    ...
    def _updateFromValues (self, values, exception):
      '''None'''
    ...
    def _valuesDependOnContext (self):
      '''None'''
    ...
    def _valuesForUpdate (plugs, auxiliaryPlugs):
      '''None'''
    ...
    def acquire (plug):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childPlugValueWidget (self, childPlug):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (plugs, typeMetadata='plugValueWidget:type'):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getPlug (self):
      '''None'''
    ...
    def getPlugs (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def hasLabel (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def popupMenuSignal ():
      '''None'''
    ...
    def registerType (plugClassOrTypeId, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setPlug (self, plug):
      '''None'''
    ...
    def setPlugs (self, plugs):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def ScaleHandle (*args):
      '''
__init__(_object*, GafferUI::Style::Axes)

'''      
    ...

class ScaleHandle:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ButtonSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DirtyType (self, *args, **kwargs):
      '''None'''
    ...
    def DragBeginSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DragDropSignal (self, *args, **kwargs):
      '''None'''
    ...
    def EnterLeaveSignal (self, *args, **kwargs):
      '''None'''
    ...
    def IdleSignal (self, *args, **kwargs):
      '''None'''
    ...
    def KeySignal (self, *args, **kwargs):
      '''None'''
    ...
    def Layer (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def RenderReason (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def VisibilityChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _dirty (self, *args, **kwargs):
      '''
_dirty( (Gadget)arg1, (DirtyType)arg2) -> None :

    C++ signature :
        void _dirty(GafferUI::Gadget {lvalue},GafferUI::Gadget::DirtyType)'''
    ...
    def _idleSignalAccessedSignal (self, *args, **kwargs):
      '''
_idleSignalAccessedSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} _idleSignalAccessedSignal()'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (ScaleHandle)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(GafferUI::ScaleHandle,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (ScaleHandle)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(GafferUI::ScaleHandle,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def bound (self, *args, **kwargs):
      '''
bound( (ScaleHandle)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > bound(GafferUI::ScaleHandle)'''
    ...
    def buttonDoubleClickSignal (self, *args, **kwargs):
      '''
buttonDoubleClickSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonDoubleClickSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonPressSignal (self, *args, **kwargs):
      '''
buttonPressSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonReleaseSignal (self, *args, **kwargs):
      '''
buttonReleaseSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def dragBeginSignal (self, *args, **kwargs):
      '''
dragBeginSignal( (Gadget)arg1) -> DragBeginSignal :

    C++ signature :
        Gaffer::Signals::Signal<boost::intrusive_ptr<IECore::RunTimeTyped> (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<boost::intrusive_ptr<IECore::RunTimeTyped> > > {lvalue} dragBeginSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEndSignal (self, *args, **kwargs):
      '''
dragEndSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEndSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEnterSignal (self, *args, **kwargs):
      '''
dragEnterSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEnterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragLeaveSignal (self, *args, **kwargs):
      '''
dragLeaveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragLeaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragMoveSignal (self, *args, **kwargs):
      '''
dragMoveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dropSignal (self, *args, **kwargs):
      '''
dropSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dropSignal(GafferUI::Gadget {lvalue})'''
    ...
    def enabled (self, *args, **kwargs):
      '''
enabled( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool enabled(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def enterSignal (self, *args, **kwargs):
      '''
enterSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} enterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def fullTransform (self, *args, **kwargs):
      '''
fullTransform( (Gadget)arg1 [, (Gadget)arg2]) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> fullTransform(GafferUI::Gadget {lvalue} [,GafferUI::Gadget const*])'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getAxes (self, *args, **kwargs):
      '''
getAxes( (ScaleHandle)arg1) -> Axes :

    C++ signature :
        GafferUI::Style::Axes getAxes(GafferUI::ScaleHandle {lvalue})'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getEnabled (self, *args, **kwargs):
      '''
getEnabled( (Gadget)arg1) -> bool :

    C++ signature :
        bool getEnabled(GafferUI::Gadget {lvalue})'''
    ...
    def getHighlighted (self, *args, **kwargs):
      '''
getHighlighted( (Gadget)arg1) -> bool :

    C++ signature :
        bool getHighlighted(GafferUI::Gadget {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getRasterScale (self, *args, **kwargs):
      '''
getRasterScale( (Handle)arg1) -> float :

    C++ signature :
        float getRasterScale(GafferUI::Handle {lvalue})'''
    ...
    def getStyle (self, *args, **kwargs):
      '''
getStyle( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> getStyle(GafferUI::Gadget {lvalue})'''
    ...
    def getToolTip (self, *args, **kwargs):
      '''
getToolTip( (ScaleHandle)arg1, (LineSegment3f)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > getToolTip(GafferUI::ScaleHandle,IECore::LineSegment<Imath_3_1::Vec3<float> >)'''
    ...
    def getTransform (self, *args, **kwargs):
      '''
getTransform( (Gadget)arg1) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> getTransform(GafferUI::Gadget {lvalue})'''
    ...
    def getVisible (self, *args, **kwargs):
      '''
getVisible( (Gadget)arg1) -> bool :

    C++ signature :
        bool getVisible(GafferUI::Gadget {lvalue})'''
    ...
    def idleSignal (self, *args, **kwargs):
      '''
idleSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} idleSignal()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (ScaleHandle)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::ScaleHandle {lvalue},IECore::TypeId)

isInstanceOf( (ScaleHandle)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::ScaleHandle {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keyPressSignal (self, *args, **kwargs):
      '''
keyPressSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keyReleaseSignal (self, *args, **kwargs):
      '''
keyReleaseSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def leaveSignal (self, *args, **kwargs):
      '''
leaveSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} leaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def mouseMoveSignal (self, *args, **kwargs):
      '''
mouseMoveSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} mouseMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def scaling (self, *args, **kwargs):
      '''
scaling( (ScaleHandle)arg1, (DragDropEvent)arg2) -> V3f :

    C++ signature :
        Imath_3_1::Vec3<float> scaling(GafferUI::ScaleHandle {lvalue},GafferUI::DragDropEvent)'''
    ...
    def setAxes (self, *args, **kwargs):
      '''
setAxes( (ScaleHandle)arg1, (Axes)arg2) -> None :

    C++ signature :
        void setAxes(GafferUI::ScaleHandle {lvalue},GafferUI::Style::Axes)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setEnabled (self, *args, **kwargs):
      '''
setEnabled( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnabled(GafferUI::Gadget {lvalue},bool)'''
    ...
    def setHighlighted (self, *args, **kwargs):
      '''
setHighlighted( (ScaleHandle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHighlighted(GafferUI::ScaleHandle {lvalue},bool)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setRasterScale (self, *args, **kwargs):
      '''
setRasterScale( (Handle)arg1, (float)arg2) -> None :

    C++ signature :
        void setRasterScale(GafferUI::Handle {lvalue},float)'''
    ...
    def setStyle (self, *args, **kwargs):
      '''
setStyle( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setStyle(GafferUI::Gadget {lvalue},boost::intrusive_ptr<GafferUI::Style const>)'''
    ...
    def setToolTip (self, *args, **kwargs):
      '''
setToolTip( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setToolTip(GafferUI::Gadget {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def setTransform (self, *args, **kwargs):
      '''
setTransform( (Gadget)arg1, (M44f)arg2) -> None :

    C++ signature :
        void setTransform(GafferUI::Gadget {lvalue},Imath_3_1::Matrix44<float>)'''
    ...
    def setVisible (self, *args, **kwargs):
      '''
setVisible( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setVisible(GafferUI::Gadget {lvalue},bool)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def style (self, *args, **kwargs):
      '''
style( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> style(GafferUI::Gadget {lvalue})'''
    ...
    def transformedBound (self, *args, **kwargs):
      '''
transformedBound( (Gadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue})

transformedBound( (Gadget)arg1, (Gadget)arg2) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue},GafferUI::Gadget const*)'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (ScaleHandle)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(GafferUI::ScaleHandle {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (ScaleHandle)arg1) -> str :

    C++ signature :
        char const* typeName(GafferUI::ScaleHandle {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...
    def visibilityChangedSignal (self, *args, **kwargs):
      '''
visibilityChangedSignal( (Gadget)arg1) -> VisibilityChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} visibilityChangedSignal(GafferUI::Gadget {lvalue})'''
    ...
    def visible (self, *args, **kwargs):
      '''
visible( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool visible(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def wheelSignal (self, *args, **kwargs):
      '''
wheelSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} wheelSignal(GafferUI::Gadget {lvalue})'''
    ...

def ScriptEditor (*args):
      '''

'''      
    ...

class ScriptEditor:
    def Settings (name, script):
      '''None'''
    ...
    def _Editor__contextChanged (self, context, key):
      '''None'''
    ...
    def _Editor__enter (self, widget):
      '''None'''
    ...
    def _Editor__leave (self, widget):
      '''None'''
    ...
    def _Editor__namesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Editor__setContextInternal (self, context, callUpdate):
      '''None'''
    ...
    def _PythonEditor__activated (self, widget):
      '''None'''
    ...
    def _PythonEditor__codeToHTML (self, code):
      '''None'''
    ...
    def _PythonEditor__contextMenu (self, widget):
      '''None'''
    ...
    def _PythonEditor__dropText (self, widget, dragData):
      '''None'''
    ...
    def _PythonEditor__exceptionToHTML (self):
      '''None'''
    ...
    def _PythonEditor__outputRedirection (self):
      '''None'''
    ...
    def _PythonEditor__syntaxErrorToHTML (self, syntaxError):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _contextChangedConnection (self):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromContext (self, modifiedItems):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (name, scriptNode):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def execute (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getTitle (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def inputWidget (self):
      '''None'''
    ...
    def instanceCreatedSignal ():
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def namespace (self):
      '''None'''
    ...
    def outputWidget (self):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def registerType (name, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def scriptNode (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setTitle (self, title):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def titleChangedSignal (self):
      '''None'''
    ...
    def types ():
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def ScriptNodeUI (*args):
      '''

'''      
    ...

def ScriptWindow (*args):
      '''

'''      
    ...

class ScriptWindow:
    def SizeMode (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def _ScriptWindow__automaticallyCreatedInstances (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _ScriptWindow__closed (self, widget):
      '''None'''
    ...
    def _ScriptWindow__instances (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _ScriptWindow__scriptAdded (scriptContainer, script):
      '''None'''
    ...
    def _ScriptWindow__staticScriptRemoved (scriptContainer, script):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _Window__caughtKeys ():
      '''None'''
    ...
    def _Window__caughtKeysSet (self, *args, **kwargs):
      '''set() -> new empty set object
set(iterable) -> new set object

Build an unordered collection of unique elements.'''
    ...
    def _Window__constrainToScreen (self, position):
      '''None'''
    ...
    def _Window__keyPress (self, widget, event):
      '''None'''
    ...
    def _acceptsClose (self):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _revealDescendant (self, descendant):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _setTitle (self, title):
      '''None'''
    ...
    def acquire (script, createIfNecessary=True):
      '''None'''
    ...
    def addChild (self, child):
      '''None'''
    ...
    def addChildWindow (self, childWindow, removeOnClose=False):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childWindows (self):
      '''None'''
    ...
    def close (self):
      '''None'''
    ...
    def closedSignal (self):
      '''None'''
    ...
    def connect (applicationRoot):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getChild (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getFullScreen (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getIcon (self):
      '''None'''
    ...
    def getLayout (self):
      '''None'''
    ...
    def getPosition (self):
      '''None'''
    ...
    def getResizeable (self):
      '''None'''
    ...
    def getSizeMode (self):
      '''None'''
    ...
    def getTitle (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def menuBar (self):
      '''None'''
    ...
    def menuDefinition (applicationOrApplicationRoot):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def preCloseSignal (self):
      '''None'''
    ...
    def removeChild (self, child):
      '''None'''
    ...
    def resizeToFitChild (self, shrink=True, expand=True):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def scriptNode (self):
      '''None'''
    ...
    def setChild (self, child):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setFullScreen (self, fullScreen):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setIcon (self, imageOrImageFileName):
      '''None'''
    ...
    def setLayout (self, compoundEditor):
      '''None'''
    ...
    def setPosition (self, position, forcePosition=False):
      '''None'''
    ...
    def setResizeable (self, resizeable):
      '''None'''
    ...
    def setSizeMode (self, sizeMode):
      '''None'''
    ...
    def setTitle (self, title):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def titleChangedSignal (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

class ScrollMode:
    def Always (self, *args, **kwargs):
      '''An enumeration.'''
    ...
    def Automatic (self, *args, **kwargs):
      '''An enumeration.'''
    ...
    def Never (self, *args, **kwargs):
      '''An enumeration.'''
    ...
    def name (self, *args, **kwargs):
      '''The name of the Enum member.'''
    ...
    def value (self, *args, **kwargs):
      '''The value of the Enum member.'''
    ...

def ScrolledContainer (*args):
      '''

'''      
    ...

class ScrolledContainer:
    def ScrollMode (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _revealDescendant (self, descendant):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def addChild (self, child):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getChild (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getHorizontalMode (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVerticalMode (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def removeChild (self, child):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setChild (self, child):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setHorizontalMode (self, mode):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVerticalMode (self, mode):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def SelectionMenu (*args):
      '''

'''      
    ...

class SelectionMenu:
    def _SelectionMenu__changed (self, index):
      '''None'''
    ...
    def _SelectionMenu__palette (self, *args, **kwargs):
      '''None'''
    ...
    def _SelectionMenu__selected (self, index):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def addItem (self, itemName, imageOrImageFileName=None):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentIndexChangedSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getCurrentIndex (self):
      '''None'''
    ...
    def getCurrentItem (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getIcon (self, index):
      '''None'''
    ...
    def getItem (self, index):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getTotal (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def insertItem (self, index, itemName, imageOrImageFileName=None):
      '''None'''
    ...
    def insertSeparator (self, index):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def removeIndex (self, index):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def selectedSignal (self):
      '''None'''
    ...
    def setCurrentIndex (self, index):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setIcon (self, index, imageOrImageFileName):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def ShowURL (*args):
      '''

'''      
    ...

def ShufflePlugValueWidget (*args):
      '''

'''      
    ...

class ShufflePlugValueWidget:
    def MultiplePlugTypesError (self, *args, **kwargs):
      '''None'''
    ...
    def MultiplePlugsError (self, *args, **kwargs):
      '''None'''
    ...
    def MultipleWidgetCreatorsError (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__applyPreset (self, presetName, *unused):
      '''None'''
    ...
    def _PlugValueWidget__applyReadOnly (self, readOnly):
      '''None'''
    ...
    def _PlugValueWidget__applyUserDefaults (self):
      '''None'''
    ...
    def _PlugValueWidget__auxiliaryPlugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__buttonPress (self, widget, event, buttonMask):
      '''None'''
    ...
    def _PlugValueWidget__callLegacyUpdateMethods (self):
      '''None'''
    ...
    def _PlugValueWidget__callUpdateFromValues (self):
      '''None'''
    ...
    def _PlugValueWidget__contextChanged (self, context, key):
      '''None'''
    ...
    def _PlugValueWidget__contextMenu (self, *unused):
      '''None'''
    ...
    def _PlugValueWidget__copyValue (self):
      '''None'''
    ...
    def _PlugValueWidget__creator (plug, typeMetadata):
      '''None'''
    ...
    def _PlugValueWidget__defaultContext (graphComponent):
      '''None'''
    ...
    def _PlugValueWidget__dragEnter (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__dragLeave (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__drop (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__editInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__fallbackContext (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__nodeMetadataChanged (self, nodeTypeId, key, node):
      '''None'''
    ...
    def _PlugValueWidget__plugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugInputChanged (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugMetadataChanged (self, plug, key, reason):
      '''None'''
    ...
    def _PlugValueWidget__plugTypesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _PlugValueWidget__popupMenuSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__presetsSubMenu (self):
      '''None'''
    ...
    def _PlugValueWidget__removeInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__setPlugsInternal (self, plugs, callUpdateMethods):
      '''None'''
    ...
    def _PlugValueWidget__setValues (self, values):
      '''None'''
    ...
    def _PlugValueWidget__updateContextConnection (self):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackground (self, plugs, auxiliaryPlugs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPlug (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPostCall (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPreCall (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _addPopupMenu (self, widget=None, buttons=GafferUI._GafferUI.Buttons.Right):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _auxiliaryPlugs (self, plug):
      '''None'''
    ...
    def _blockedUpdateFromValues (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _convertValue (self, value):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _editable (self, canEditAnimation=False):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _plugConnections (self):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _popupMenuDefinition (self):
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _requestUpdateFromValues (self, lazy=True):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromEditable (self):
      '''None'''
    ...
    def _updateFromMetadata (self):
      '''None'''
    ...
    def _updateFromValues (self, values, exception):
      '''None'''
    ...
    def _valuesDependOnContext (self):
      '''None'''
    ...
    def _valuesForUpdate (plugs, auxiliaryPlugs):
      '''None'''
    ...
    def acquire (plug):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childPlugValueWidget (self, childPlug):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (plugs, typeMetadata='plugValueWidget:type'):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getPlug (self):
      '''None'''
    ...
    def getPlugs (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def hasLabel (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def popupMenuSignal ():
      '''None'''
    ...
    def registerType (plugClassOrTypeId, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setPlug (self, plug):
      '''None'''
    ...
    def setPlugs (self, plugs):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def ShufflesPlugValueWidget (*args):
      '''

'''      
    ...

class ShufflesPlugValueWidget:
    def MultiplePlugTypesError (self, *args, **kwargs):
      '''None'''
    ...
    def MultiplePlugsError (self, *args, **kwargs):
      '''None'''
    ...
    def MultipleWidgetCreatorsError (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__applyPreset (self, presetName, *unused):
      '''None'''
    ...
    def _PlugValueWidget__applyReadOnly (self, readOnly):
      '''None'''
    ...
    def _PlugValueWidget__applyUserDefaults (self):
      '''None'''
    ...
    def _PlugValueWidget__auxiliaryPlugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__buttonPress (self, widget, event, buttonMask):
      '''None'''
    ...
    def _PlugValueWidget__callLegacyUpdateMethods (self):
      '''None'''
    ...
    def _PlugValueWidget__callUpdateFromValues (self):
      '''None'''
    ...
    def _PlugValueWidget__contextChanged (self, context, key):
      '''None'''
    ...
    def _PlugValueWidget__contextMenu (self, *unused):
      '''None'''
    ...
    def _PlugValueWidget__copyValue (self):
      '''None'''
    ...
    def _PlugValueWidget__creator (plug, typeMetadata):
      '''None'''
    ...
    def _PlugValueWidget__defaultContext (graphComponent):
      '''None'''
    ...
    def _PlugValueWidget__dragEnter (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__dragLeave (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__drop (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__editInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__fallbackContext (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__nodeMetadataChanged (self, nodeTypeId, key, node):
      '''None'''
    ...
    def _PlugValueWidget__plugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugInputChanged (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugMetadataChanged (self, plug, key, reason):
      '''None'''
    ...
    def _PlugValueWidget__plugTypesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _PlugValueWidget__popupMenuSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__presetsSubMenu (self):
      '''None'''
    ...
    def _PlugValueWidget__removeInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__setPlugsInternal (self, plugs, callUpdateMethods):
      '''None'''
    ...
    def _PlugValueWidget__setValues (self, values):
      '''None'''
    ...
    def _PlugValueWidget__updateContextConnection (self):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackground (self, plugs, auxiliaryPlugs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPlug (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPostCall (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPreCall (self, *args, **kwargs):
      '''None'''
    ...
    def _ShufflesPlugValueWidget__addButtonClicked (self, button):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _addPopupMenu (self, widget=None, buttons=GafferUI._GafferUI.Buttons.Right):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _auxiliaryPlugs (self, plug):
      '''None'''
    ...
    def _blockedUpdateFromValues (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _convertValue (self, value):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _editable (self, canEditAnimation=False):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _plugConnections (self):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _popupMenuDefinition (self):
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _requestUpdateFromValues (self, lazy=True):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromEditable (self):
      '''None'''
    ...
    def _updateFromMetadata (self):
      '''None'''
    ...
    def _updateFromValues (self, values, exception):
      '''None'''
    ...
    def _valuesDependOnContext (self):
      '''None'''
    ...
    def _valuesForUpdate (plugs, auxiliaryPlugs):
      '''None'''
    ...
    def acquire (plug):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childPlugValueWidget (self, childPlug):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (plugs, typeMetadata='plugValueWidget:type'):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getPlug (self):
      '''None'''
    ...
    def getPlugs (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def hasLabel (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def popupMenuSignal ():
      '''None'''
    ...
    def registerType (plugClassOrTypeId, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setPlug (self, plug):
      '''None'''
    ...
    def setPlugs (self, plugs):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def Slider (*args):
      '''

'''      
    ...

class Slider:
    def ValueChangedReason (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def _Slider__buttonPress (self, widget, event):
      '''None'''
    ...
    def _Slider__dragBegin (self, widget, event):
      '''None'''
    ...
    def _Slider__dragEnd (self, widget, event):
      '''None'''
    ...
    def _Slider__dragEnter (self, widget, event):
      '''None'''
    ...
    def _Slider__dragMove (self, widget, event):
      '''None'''
    ...
    def _Slider__draw (self, painter):
      '''None'''
    ...
    def _Slider__emitValueChanged (self, reason):
      '''None'''
    ...
    def _Slider__eventValue (self, event):
      '''None'''
    ...
    def _Slider__indexUnderMouse (self):
      '''None'''
    ...
    def _Slider__keyPress (self, widget, event):
      '''None'''
    ...
    def _Slider__leave (self, widget):
      '''None'''
    ...
    def _Slider__mouseMove (self, widget, event):
      '''None'''
    ...
    def _Slider__setValueInternal (self, index, value, reason):
      '''None'''
    ...
    def _Slider__setValuesInternal (self, values, reason):
      '''None'''
    ...
    def _Slider__valueToPosition (self, value):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _drawBackground (self, painter):
      '''None'''
    ...
    def _drawValue (self, painter, value, position, state):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def changesShouldBeMerged (firstReason, secondReason):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getHoverPositionVisible (self):
      '''None'''
    ...
    def getIncrement (self):
      '''None'''
    ...
    def getMinimumSize (self):
      '''None'''
    ...
    def getRange (self):
      '''None'''
    ...
    def getSelectedIndex (self):
      '''None'''
    ...
    def getSizeEditable (self):
      '''None'''
    ...
    def getSnapIncrement (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getValue (self):
      '''None'''
    ...
    def getValues (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def indexRemovedSignal (self):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def selectedIndexChangedSignal (self):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setHoverPositionVisible (self, visible):
      '''None'''
    ...
    def setIncrement (self, increment):
      '''None'''
    ...
    def setMinimumSize (self, minimumSize):
      '''None'''
    ...
    def setRange (self, min, max, hardMin=None, hardMax=None):
      '''None'''
    ...
    def setSelectedIndex (self, index):
      '''None'''
    ...
    def setSizeEditable (self, editable):
      '''None'''
    ...
    def setSnapIncrement (self, increment):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setValue (self, value):
      '''None'''
    ...
    def setValues (self, values):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def valueChangedSignal (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def Spacer (*args):
      '''

'''      
    ...

class Spacer:
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def SpacerGadget (*args):
      '''
__init__(_object*, Imath_3_1::Box<Imath_3_1::Vec3<float> >)

'''      
    ...

class SpacerGadget:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ButtonSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DirtyType (self, *args, **kwargs):
      '''None'''
    ...
    def DragBeginSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DragDropSignal (self, *args, **kwargs):
      '''None'''
    ...
    def EnterLeaveSignal (self, *args, **kwargs):
      '''None'''
    ...
    def IdleSignal (self, *args, **kwargs):
      '''None'''
    ...
    def KeySignal (self, *args, **kwargs):
      '''None'''
    ...
    def Layer (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def RenderReason (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def VisibilityChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _dirty (self, *args, **kwargs):
      '''
_dirty( (Gadget)arg1, (DirtyType)arg2) -> None :

    C++ signature :
        void _dirty(GafferUI::Gadget {lvalue},GafferUI::Gadget::DirtyType)'''
    ...
    def _idleSignalAccessedSignal (self, *args, **kwargs):
      '''
_idleSignalAccessedSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} _idleSignalAccessedSignal()'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (SpacerGadget)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(GafferUI::SpacerGadget,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (SpacerGadget)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(GafferUI::SpacerGadget,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def bound (self, *args, **kwargs):
      '''
bound( (SpacerGadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > bound(GafferUI::SpacerGadget)'''
    ...
    def buttonDoubleClickSignal (self, *args, **kwargs):
      '''
buttonDoubleClickSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonDoubleClickSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonPressSignal (self, *args, **kwargs):
      '''
buttonPressSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonReleaseSignal (self, *args, **kwargs):
      '''
buttonReleaseSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def dragBeginSignal (self, *args, **kwargs):
      '''
dragBeginSignal( (Gadget)arg1) -> DragBeginSignal :

    C++ signature :
        Gaffer::Signals::Signal<boost::intrusive_ptr<IECore::RunTimeTyped> (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<boost::intrusive_ptr<IECore::RunTimeTyped> > > {lvalue} dragBeginSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEndSignal (self, *args, **kwargs):
      '''
dragEndSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEndSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEnterSignal (self, *args, **kwargs):
      '''
dragEnterSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEnterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragLeaveSignal (self, *args, **kwargs):
      '''
dragLeaveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragLeaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragMoveSignal (self, *args, **kwargs):
      '''
dragMoveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dropSignal (self, *args, **kwargs):
      '''
dropSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dropSignal(GafferUI::Gadget {lvalue})'''
    ...
    def enabled (self, *args, **kwargs):
      '''
enabled( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool enabled(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def enterSignal (self, *args, **kwargs):
      '''
enterSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} enterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def fullTransform (self, *args, **kwargs):
      '''
fullTransform( (Gadget)arg1 [, (Gadget)arg2]) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> fullTransform(GafferUI::Gadget {lvalue} [,GafferUI::Gadget const*])'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getEnabled (self, *args, **kwargs):
      '''
getEnabled( (Gadget)arg1) -> bool :

    C++ signature :
        bool getEnabled(GafferUI::Gadget {lvalue})'''
    ...
    def getHighlighted (self, *args, **kwargs):
      '''
getHighlighted( (Gadget)arg1) -> bool :

    C++ signature :
        bool getHighlighted(GafferUI::Gadget {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getSize (self, *args, **kwargs):
      '''
getSize( (SpacerGadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > getSize(GafferUI::SpacerGadget {lvalue})'''
    ...
    def getStyle (self, *args, **kwargs):
      '''
getStyle( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> getStyle(GafferUI::Gadget {lvalue})'''
    ...
    def getToolTip (self, *args, **kwargs):
      '''
getToolTip( (SpacerGadget)arg1, (LineSegment3f)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > getToolTip(GafferUI::SpacerGadget,IECore::LineSegment<Imath_3_1::Vec3<float> >)'''
    ...
    def getTransform (self, *args, **kwargs):
      '''
getTransform( (Gadget)arg1) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> getTransform(GafferUI::Gadget {lvalue})'''
    ...
    def getVisible (self, *args, **kwargs):
      '''
getVisible( (Gadget)arg1) -> bool :

    C++ signature :
        bool getVisible(GafferUI::Gadget {lvalue})'''
    ...
    def idleSignal (self, *args, **kwargs):
      '''
idleSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} idleSignal()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (SpacerGadget)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::SpacerGadget {lvalue},IECore::TypeId)

isInstanceOf( (SpacerGadget)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::SpacerGadget {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keyPressSignal (self, *args, **kwargs):
      '''
keyPressSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keyReleaseSignal (self, *args, **kwargs):
      '''
keyReleaseSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def leaveSignal (self, *args, **kwargs):
      '''
leaveSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} leaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def mouseMoveSignal (self, *args, **kwargs):
      '''
mouseMoveSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} mouseMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setEnabled (self, *args, **kwargs):
      '''
setEnabled( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnabled(GafferUI::Gadget {lvalue},bool)'''
    ...
    def setHighlighted (self, *args, **kwargs):
      '''
setHighlighted( (SpacerGadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHighlighted(GafferUI::SpacerGadget {lvalue},bool)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setSize (self, *args, **kwargs):
      '''
setSize( (SpacerGadget)arg1, (Box3f)arg2) -> None :

    C++ signature :
        void setSize(GafferUI::SpacerGadget {lvalue},Imath_3_1::Box<Imath_3_1::Vec3<float> >)'''
    ...
    def setStyle (self, *args, **kwargs):
      '''
setStyle( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setStyle(GafferUI::Gadget {lvalue},boost::intrusive_ptr<GafferUI::Style const>)'''
    ...
    def setToolTip (self, *args, **kwargs):
      '''
setToolTip( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setToolTip(GafferUI::Gadget {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def setTransform (self, *args, **kwargs):
      '''
setTransform( (Gadget)arg1, (M44f)arg2) -> None :

    C++ signature :
        void setTransform(GafferUI::Gadget {lvalue},Imath_3_1::Matrix44<float>)'''
    ...
    def setVisible (self, *args, **kwargs):
      '''
setVisible( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setVisible(GafferUI::Gadget {lvalue},bool)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def style (self, *args, **kwargs):
      '''
style( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> style(GafferUI::Gadget {lvalue})'''
    ...
    def transformedBound (self, *args, **kwargs):
      '''
transformedBound( (Gadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue})

transformedBound( (Gadget)arg1, (Gadget)arg2) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue},GafferUI::Gadget const*)'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (SpacerGadget)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(GafferUI::SpacerGadget {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (SpacerGadget)arg1) -> str :

    C++ signature :
        char const* typeName(GafferUI::SpacerGadget {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...
    def visibilityChangedSignal (self, *args, **kwargs):
      '''
visibilityChangedSignal( (Gadget)arg1) -> VisibilityChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} visibilityChangedSignal(GafferUI::Gadget {lvalue})'''
    ...
    def visible (self, *args, **kwargs):
      '''
visible( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool visible(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def wheelSignal (self, *args, **kwargs):
      '''
wheelSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} wheelSignal(GafferUI::Gadget {lvalue})'''
    ...

def SplinePlugValueWidget (*args):
      '''

'''      
    ...

class SplinePlugValueWidget:
    def MultiplePlugTypesError (self, *args, **kwargs):
      '''None'''
    ...
    def MultiplePlugsError (self, *args, **kwargs):
      '''None'''
    ...
    def MultipleWidgetCreatorsError (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__applyPreset (self, presetName, *unused):
      '''None'''
    ...
    def _PlugValueWidget__applyReadOnly (self, readOnly):
      '''None'''
    ...
    def _PlugValueWidget__applyUserDefaults (self):
      '''None'''
    ...
    def _PlugValueWidget__auxiliaryPlugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__buttonPress (self, widget, event, buttonMask):
      '''None'''
    ...
    def _PlugValueWidget__callLegacyUpdateMethods (self):
      '''None'''
    ...
    def _PlugValueWidget__callUpdateFromValues (self):
      '''None'''
    ...
    def _PlugValueWidget__contextChanged (self, context, key):
      '''None'''
    ...
    def _PlugValueWidget__contextMenu (self, *unused):
      '''None'''
    ...
    def _PlugValueWidget__copyValue (self):
      '''None'''
    ...
    def _PlugValueWidget__creator (plug, typeMetadata):
      '''None'''
    ...
    def _PlugValueWidget__defaultContext (graphComponent):
      '''None'''
    ...
    def _PlugValueWidget__dragEnter (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__dragLeave (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__drop (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__editInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__fallbackContext (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__nodeMetadataChanged (self, nodeTypeId, key, node):
      '''None'''
    ...
    def _PlugValueWidget__plugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugInputChanged (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugMetadataChanged (self, plug, key, reason):
      '''None'''
    ...
    def _PlugValueWidget__plugTypesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _PlugValueWidget__popupMenuSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__presetsSubMenu (self):
      '''None'''
    ...
    def _PlugValueWidget__removeInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__setPlugsInternal (self, plugs, callUpdateMethods):
      '''None'''
    ...
    def _PlugValueWidget__setValues (self, values):
      '''None'''
    ...
    def _PlugValueWidget__updateContextConnection (self):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackground (self, plugs, auxiliaryPlugs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPlug (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPostCall (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPreCall (self, *args, **kwargs):
      '''None'''
    ...
    def _SplinePlugValueWidget__buttonPress (self, button, event):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _addPopupMenu (self, widget=None, buttons=GafferUI._GafferUI.Buttons.Right):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _auxiliaryPlugs (self, plug):
      '''None'''
    ...
    def _blockedUpdateFromValues (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _convertValue (self, value):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _editable (self, canEditAnimation=False):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _plugConnections (self):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _popupMenuDefinition (self):
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _requestUpdateFromValues (self, lazy=True):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromEditable (self):
      '''None'''
    ...
    def _updateFromMetadata (self):
      '''None'''
    ...
    def _updateFromValues (self, values, exception):
      '''None'''
    ...
    def _valuesDependOnContext (self):
      '''None'''
    ...
    def _valuesForUpdate (plugs, auxiliaryPlugs):
      '''None'''
    ...
    def acquire (plug):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childPlugValueWidget (self, childPlug):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (plugs, typeMetadata='plugValueWidget:type'):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getPlug (self):
      '''None'''
    ...
    def getPlugs (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def hasLabel (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def popupMenuSignal ():
      '''None'''
    ...
    def registerType (plugClassOrTypeId, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setPlug (self, plug):
      '''None'''
    ...
    def setPlugs (self, plugs):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def splineWidget (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def SplineWidget (*args):
      '''

'''      
    ...

class SplineWidget:
    def DrawMode (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def _SplineWidget__paintEvent (self, event):
      '''None'''
    ...
    def _SplineWidget__paintRamp (self, painter):
      '''None'''
    ...
    def _SplineWidget__paintSplines (self, painter):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getDrawMode (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getSpline (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setDrawMode (self, drawMode):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setSpline (self, spline):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def SplitContainer (*args):
      '''

'''      
    ...

class SplitContainer:
    def Orientation (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def _SplitContainer__applySizePolicy (self, widget):
      '''None'''
    ...
    def _SplitContainer__updateStyles (self):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _revealDescendant (self, descendant):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def addChild (self, child):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def append (self, child):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getOrientation (self):
      '''None'''
    ...
    def getSizes (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def handle (self, index):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def index (self, child):
      '''None'''
    ...
    def insert (self, index, child):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def remove (self, child):
      '''None'''
    ...
    def removeChild (self, child):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setOrientation (self, orientation):
      '''None'''
    ...
    def setSizes (self, sizes):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def SpreadsheetUI (*args):
      '''

'''      
    ...

def StandardConnectionGadget (*args):
      '''
__init__(_object*, boost::intrusive_ptr<GafferUI::Nodule>, boost::intrusive_ptr<GafferUI::Nodule>)

'''      
    ...

class StandardConnectionGadget:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ButtonSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DirtyType (self, *args, **kwargs):
      '''None'''
    ...
    def DragBeginSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DragDropSignal (self, *args, **kwargs):
      '''None'''
    ...
    def EnterLeaveSignal (self, *args, **kwargs):
      '''None'''
    ...
    def IdleSignal (self, *args, **kwargs):
      '''None'''
    ...
    def KeySignal (self, *args, **kwargs):
      '''None'''
    ...
    def Layer (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def RenderReason (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def VisibilityChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _dirty (self, *args, **kwargs):
      '''
_dirty( (Gadget)arg1, (DirtyType)arg2) -> None :

    C++ signature :
        void _dirty(GafferUI::Gadget {lvalue},GafferUI::Gadget::DirtyType)'''
    ...
    def _idleSignalAccessedSignal (self, *args, **kwargs):
      '''
_idleSignalAccessedSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} _idleSignalAccessedSignal()'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (StandardConnectionGadget)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(GafferUI::StandardConnectionGadget,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (StandardConnectionGadget)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(GafferUI::StandardConnectionGadget,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def bound (self, *args, **kwargs):
      '''
bound( (StandardConnectionGadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > bound(GafferUI::StandardConnectionGadget)'''
    ...
    def buttonDoubleClickSignal (self, *args, **kwargs):
      '''
buttonDoubleClickSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonDoubleClickSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonPressSignal (self, *args, **kwargs):
      '''
buttonPressSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonReleaseSignal (self, *args, **kwargs):
      '''
buttonReleaseSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def canCreateConnection (self, *args, **kwargs):
      '''
canCreateConnection( (StandardConnectionGadget)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool canCreateConnection(GafferUI::StandardConnectionGadget,Gaffer::Plug const*)'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def create (self, *args, **kwargs):
      '''
create( (object)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::ConnectionGadget> create(boost::intrusive_ptr<GafferUI::Nodule>,boost::intrusive_ptr<GafferUI::Nodule>)'''
    ...
    def createConnection (self, *args, **kwargs):
      '''
createConnection( (StandardConnectionGadget)arg1, (Plug)arg2) -> None :

    C++ signature :
        void createConnection(GafferUI::StandardConnectionGadget {lvalue},Gaffer::Plug*)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def dragBeginSignal (self, *args, **kwargs):
      '''
dragBeginSignal( (Gadget)arg1) -> DragBeginSignal :

    C++ signature :
        Gaffer::Signals::Signal<boost::intrusive_ptr<IECore::RunTimeTyped> (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<boost::intrusive_ptr<IECore::RunTimeTyped> > > {lvalue} dragBeginSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEndSignal (self, *args, **kwargs):
      '''
dragEndSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEndSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEnterSignal (self, *args, **kwargs):
      '''
dragEnterSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEnterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragLeaveSignal (self, *args, **kwargs):
      '''
dragLeaveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragLeaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragMoveSignal (self, *args, **kwargs):
      '''
dragMoveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dropSignal (self, *args, **kwargs):
      '''
dropSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dropSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dstNodule (self, *args, **kwargs):
      '''
dstNodule( (ConnectionGadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Nodule> dstNodule(GafferUI::ConnectionGadget {lvalue})'''
    ...
    def enabled (self, *args, **kwargs):
      '''
enabled( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool enabled(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def enterSignal (self, *args, **kwargs):
      '''
enterSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} enterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def fullTransform (self, *args, **kwargs):
      '''
fullTransform( (Gadget)arg1 [, (Gadget)arg2]) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> fullTransform(GafferUI::Gadget {lvalue} [,GafferUI::Gadget const*])'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getEnabled (self, *args, **kwargs):
      '''
getEnabled( (Gadget)arg1) -> bool :

    C++ signature :
        bool getEnabled(GafferUI::Gadget {lvalue})'''
    ...
    def getHighlighted (self, *args, **kwargs):
      '''
getHighlighted( (Gadget)arg1) -> bool :

    C++ signature :
        bool getHighlighted(GafferUI::Gadget {lvalue})'''
    ...
    def getMinimised (self, *args, **kwargs):
      '''
getMinimised( (ConnectionGadget)arg1) -> bool :

    C++ signature :
        bool getMinimised(GafferUI::ConnectionGadget {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getStyle (self, *args, **kwargs):
      '''
getStyle( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> getStyle(GafferUI::Gadget {lvalue})'''
    ...
    def getToolTip (self, *args, **kwargs):
      '''
getToolTip( (StandardConnectionGadget)arg1, (LineSegment3f)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > getToolTip(GafferUI::StandardConnectionGadget,IECore::LineSegment<Imath_3_1::Vec3<float> >)'''
    ...
    def getTransform (self, *args, **kwargs):
      '''
getTransform( (Gadget)arg1) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> getTransform(GafferUI::Gadget {lvalue})'''
    ...
    def getVisible (self, *args, **kwargs):
      '''
getVisible( (Gadget)arg1) -> bool :

    C++ signature :
        bool getVisible(GafferUI::Gadget {lvalue})'''
    ...
    def idleSignal (self, *args, **kwargs):
      '''
idleSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} idleSignal()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (StandardConnectionGadget)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::StandardConnectionGadget {lvalue},IECore::TypeId)

isInstanceOf( (StandardConnectionGadget)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::StandardConnectionGadget {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keyPressSignal (self, *args, **kwargs):
      '''
keyPressSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keyReleaseSignal (self, *args, **kwargs):
      '''
keyReleaseSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def leaveSignal (self, *args, **kwargs):
      '''
leaveSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} leaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def mouseMoveSignal (self, *args, **kwargs):
      '''
mouseMoveSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} mouseMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerConnectionGadget (self, *args, **kwargs):
      '''
registerConnectionGadget( (TypeId)arg1, (object)arg2) -> None :

    C++ signature :
        void registerConnectionGadget(IECore::TypeId,boost::python::api::object)

registerConnectionGadget( (TypeId)arg1, (object)arg2, (object)arg3) -> None :

    C++ signature :
        void registerConnectionGadget(IECore::TypeId,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,boost::python::api::object)'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setEnabled (self, *args, **kwargs):
      '''
setEnabled( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnabled(GafferUI::Gadget {lvalue},bool)'''
    ...
    def setHighlighted (self, *args, **kwargs):
      '''
setHighlighted( (StandardConnectionGadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHighlighted(GafferUI::StandardConnectionGadget {lvalue},bool)'''
    ...
    def setMinimised (self, *args, **kwargs):
      '''
setMinimised( (ConnectionGadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setMinimised(GafferUI::ConnectionGadget {lvalue},bool)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setNodules (self, *args, **kwargs):
      '''
setNodules( (ConnectionGadget)arg1, (object)arg2, (object)arg3) -> None :

    C++ signature :
        void setNodules(GafferUI::ConnectionGadget {lvalue},boost::intrusive_ptr<GafferUI::Nodule>,boost::intrusive_ptr<GafferUI::Nodule>)'''
    ...
    def setStyle (self, *args, **kwargs):
      '''
setStyle( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setStyle(GafferUI::Gadget {lvalue},boost::intrusive_ptr<GafferUI::Style const>)'''
    ...
    def setToolTip (self, *args, **kwargs):
      '''
setToolTip( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setToolTip(GafferUI::Gadget {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def setTransform (self, *args, **kwargs):
      '''
setTransform( (Gadget)arg1, (M44f)arg2) -> None :

    C++ signature :
        void setTransform(GafferUI::Gadget {lvalue},Imath_3_1::Matrix44<float>)'''
    ...
    def setVisible (self, *args, **kwargs):
      '''
setVisible( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setVisible(GafferUI::Gadget {lvalue},bool)'''
    ...
    def srcNodule (self, *args, **kwargs):
      '''
srcNodule( (ConnectionGadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Nodule> srcNodule(GafferUI::ConnectionGadget {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def style (self, *args, **kwargs):
      '''
style( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> style(GafferUI::Gadget {lvalue})'''
    ...
    def transformedBound (self, *args, **kwargs):
      '''
transformedBound( (Gadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue})

transformedBound( (Gadget)arg1, (Gadget)arg2) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue},GafferUI::Gadget const*)'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (StandardConnectionGadget)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(GafferUI::StandardConnectionGadget {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (StandardConnectionGadget)arg1) -> str :

    C++ signature :
        char const* typeName(GafferUI::StandardConnectionGadget {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def updateDragEndPoint (self, *args, **kwargs):
      '''
updateDragEndPoint( (StandardConnectionGadget)arg1, (V3f)arg2, (V3f)arg3) -> None :

    C++ signature :
        void updateDragEndPoint(GafferUI::StandardConnectionGadget {lvalue},Imath_3_1::Vec3<float>,Imath_3_1::Vec3<float>)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...
    def visibilityChangedSignal (self, *args, **kwargs):
      '''
visibilityChangedSignal( (Gadget)arg1) -> VisibilityChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} visibilityChangedSignal(GafferUI::Gadget {lvalue})'''
    ...
    def visible (self, *args, **kwargs):
      '''
visible( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool visible(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def wheelSignal (self, *args, **kwargs):
      '''
wheelSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} wheelSignal(GafferUI::Gadget {lvalue})'''
    ...

def StandardGraphLayout (*args):
      '''
__init__(_object*)

'''      
    ...

class StandardGraphLayout:
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def connectNode (self, *args, **kwargs):
      '''
connectNode( (GraphLayout)arg1, (GraphGadget)arg2, (Node)arg3, (Set)arg4) -> bool :

    C++ signature :
        bool connectNode(GafferUI::GraphLayout,GafferUI::GraphGadget {lvalue},Gaffer::Node {lvalue},Gaffer::Set {lvalue})'''
    ...
    def connectNodes (self, *args, **kwargs):
      '''
connectNodes( (GraphLayout)arg1, (GraphGadget)arg2, (Set)arg3, (Set)arg4) -> bool :

    C++ signature :
        bool connectNodes(GafferUI::GraphLayout,GafferUI::GraphGadget {lvalue},Gaffer::Set {lvalue},Gaffer::Set {lvalue})'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getConnectionScale (self, *args, **kwargs):
      '''
getConnectionScale( (StandardGraphLayout)arg1) -> float :

    C++ signature :
        float getConnectionScale(GafferUI::StandardGraphLayout {lvalue})'''
    ...
    def getNodeSeparationScale (self, *args, **kwargs):
      '''
getNodeSeparationScale( (StandardGraphLayout)arg1) -> float :

    C++ signature :
        float getNodeSeparationScale(GafferUI::StandardGraphLayout {lvalue})'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (StandardGraphLayout)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::StandardGraphLayout {lvalue},IECore::TypeId)

isInstanceOf( (StandardGraphLayout)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::StandardGraphLayout {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def layoutNodes (self, *args, **kwargs):
      '''
layoutNodes( (GraphLayout)arg1, (GraphGadget)graph [, (Set)nodes=None]) -> None :

    C++ signature :
        void layoutNodes(GafferUI::GraphLayout,GafferUI::GraphGadget {lvalue} [,Gaffer::Set*=None])'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def positionNode (self, *args, **kwargs):
      '''
positionNode( (GraphLayout)arg1, (GraphGadget)graph, (Node)node [, (V2f)fallbackPosition=V2f(0, 0)]) -> None :

    C++ signature :
        void positionNode(GafferUI::GraphLayout,GafferUI::GraphGadget {lvalue},Gaffer::Node {lvalue} [,Imath_3_1::Vec2<float>=V2f(0, 0)])'''
    ...
    def positionNodes (self, *args, **kwargs):
      '''
positionNodes( (GraphLayout)arg1, (GraphGadget)graph, (Set)nodes [, (V2f)fallbackPosition=V2f(0, 0)]) -> None :

    C++ signature :
        void positionNodes(GafferUI::GraphLayout,GafferUI::GraphGadget {lvalue},Gaffer::Set {lvalue} [,Imath_3_1::Vec2<float>=V2f(0, 0)])'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def setConnectionScale (self, *args, **kwargs):
      '''
setConnectionScale( (StandardGraphLayout)arg1, (float)arg2) -> None :

    C++ signature :
        void setConnectionScale(GafferUI::StandardGraphLayout {lvalue},float)'''
    ...
    def setNodeSeparationScale (self, *args, **kwargs):
      '''
setNodeSeparationScale( (StandardGraphLayout)arg1, (float)arg2) -> None :

    C++ signature :
        void setNodeSeparationScale(GafferUI::StandardGraphLayout {lvalue},float)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (StandardGraphLayout)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(GafferUI::StandardGraphLayout {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (StandardGraphLayout)arg1) -> str :

    C++ signature :
        char const* typeName(GafferUI::StandardGraphLayout {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...

def StandardNodeGadget (*args):
      '''
__init__(_object*, boost::intrusive_ptr<Gaffer::Node> node)

'''      
    ...

class StandardNodeGadget:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ButtonSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DirtyType (self, *args, **kwargs):
      '''None'''
    ...
    def DragBeginSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DragDropSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Edge (self, *args, **kwargs):
      '''None'''
    ...
    def EnterLeaveSignal (self, *args, **kwargs):
      '''None'''
    ...
    def IdleSignal (self, *args, **kwargs):
      '''None'''
    ...
    def KeySignal (self, *args, **kwargs):
      '''None'''
    ...
    def Layer (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def RenderReason (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def VisibilityChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _dirty (self, *args, **kwargs):
      '''
_dirty( (Gadget)arg1, (DirtyType)arg2) -> None :

    C++ signature :
        void _dirty(GafferUI::Gadget {lvalue},GafferUI::Gadget::DirtyType)'''
    ...
    def _idleSignalAccessedSignal (self, *args, **kwargs):
      '''
_idleSignalAccessedSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} _idleSignalAccessedSignal()'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (StandardNodeGadget)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(GafferUI::StandardNodeGadget,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (StandardNodeGadget)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(GafferUI::StandardNodeGadget,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def bound (self, *args, **kwargs):
      '''
bound( (StandardNodeGadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > bound(GafferUI::StandardNodeGadget)'''
    ...
    def buttonDoubleClickSignal (self, *args, **kwargs):
      '''
buttonDoubleClickSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonDoubleClickSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonPressSignal (self, *args, **kwargs):
      '''
buttonPressSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonReleaseSignal (self, *args, **kwargs):
      '''
buttonReleaseSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def connectionTangent (self, *args, **kwargs):
      '''
connectionTangent( (StandardNodeGadget)arg1, (ConnectionCreator)arg2) -> V3f :

    C++ signature :
        Imath_3_1::Vec3<float> connectionTangent(GafferUI::StandardNodeGadget {lvalue},GafferUI::ConnectionCreator const*)'''
    ...
    def create (self, *args, **kwargs):
      '''
create( (object)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::NodeGadget> create(boost::intrusive_ptr<Gaffer::Node>)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def dragBeginSignal (self, *args, **kwargs):
      '''
dragBeginSignal( (Gadget)arg1) -> DragBeginSignal :

    C++ signature :
        Gaffer::Signals::Signal<boost::intrusive_ptr<IECore::RunTimeTyped> (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<boost::intrusive_ptr<IECore::RunTimeTyped> > > {lvalue} dragBeginSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEndSignal (self, *args, **kwargs):
      '''
dragEndSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEndSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEnterSignal (self, *args, **kwargs):
      '''
dragEnterSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEnterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragLeaveSignal (self, *args, **kwargs):
      '''
dragLeaveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragLeaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragMoveSignal (self, *args, **kwargs):
      '''
dragMoveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dropSignal (self, *args, **kwargs):
      '''
dropSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dropSignal(GafferUI::Gadget {lvalue})'''
    ...
    def enabled (self, *args, **kwargs):
      '''
enabled( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool enabled(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def enterSignal (self, *args, **kwargs):
      '''
enterSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} enterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def fullTransform (self, *args, **kwargs):
      '''
fullTransform( (Gadget)arg1 [, (Gadget)arg2]) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> fullTransform(GafferUI::Gadget {lvalue} [,GafferUI::Gadget const*])'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getContents (self, *args, **kwargs):
      '''
getContents( (StandardNodeGadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Gadget> getContents(GafferUI::StandardNodeGadget {lvalue})'''
    ...
    def getEdgeGadget (self, *args, **kwargs):
      '''
getEdgeGadget( (StandardNodeGadget)arg1, (Edge)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Gadget> getEdgeGadget(GafferUI::StandardNodeGadget {lvalue},GafferUI::StandardNodeGadget::Edge)'''
    ...
    def getEnabled (self, *args, **kwargs):
      '''
getEnabled( (Gadget)arg1) -> bool :

    C++ signature :
        bool getEnabled(GafferUI::Gadget {lvalue})'''
    ...
    def getHighlighted (self, *args, **kwargs):
      '''
getHighlighted( (Gadget)arg1) -> bool :

    C++ signature :
        bool getHighlighted(GafferUI::Gadget {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getStyle (self, *args, **kwargs):
      '''
getStyle( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> getStyle(GafferUI::Gadget {lvalue})'''
    ...
    def getToolTip (self, *args, **kwargs):
      '''
getToolTip( (StandardNodeGadget)arg1, (LineSegment3f)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > getToolTip(GafferUI::StandardNodeGadget,IECore::LineSegment<Imath_3_1::Vec3<float> >)'''
    ...
    def getTransform (self, *args, **kwargs):
      '''
getTransform( (Gadget)arg1) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> getTransform(GafferUI::Gadget {lvalue})'''
    ...
    def getVisible (self, *args, **kwargs):
      '''
getVisible( (Gadget)arg1) -> bool :

    C++ signature :
        bool getVisible(GafferUI::Gadget {lvalue})'''
    ...
    def idleSignal (self, *args, **kwargs):
      '''
idleSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} idleSignal()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (StandardNodeGadget)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::StandardNodeGadget {lvalue},IECore::TypeId)

isInstanceOf( (StandardNodeGadget)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::StandardNodeGadget {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keyPressSignal (self, *args, **kwargs):
      '''
keyPressSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keyReleaseSignal (self, *args, **kwargs):
      '''
keyReleaseSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def leaveSignal (self, *args, **kwargs):
      '''
leaveSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} leaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def mouseMoveSignal (self, *args, **kwargs):
      '''
mouseMoveSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} mouseMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (NodeGadget)arg1) -> object :

    C++ signature :
        Gaffer::Node* node(GafferUI::NodeGadget {lvalue})'''
    ...
    def nodule (self, *args, **kwargs):
      '''
nodule( (StandardNodeGadget)arg1, (Plug)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Nodule> nodule(GafferUI::StandardNodeGadget {lvalue},Gaffer::Plug const*)'''
    ...
    def noduleAddedSignal (self, *args, **kwargs):
      '''
noduleAddedSignal( (NodeGadget)arg1) -> NoduleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::NodeGadget*, GafferUI::Nodule*), Gaffer::Signals::DefaultCombiner<void> > {lvalue} noduleAddedSignal(GafferUI::NodeGadget {lvalue})'''
    ...
    def noduleRemovedSignal (self, *args, **kwargs):
      '''
noduleRemovedSignal( (NodeGadget)arg1) -> NoduleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::NodeGadget*, GafferUI::Nodule*), Gaffer::Signals::DefaultCombiner<void> > {lvalue} noduleRemovedSignal(GafferUI::NodeGadget {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerNodeGadget (self, *args, **kwargs):
      '''
registerNodeGadget( (TypeId)arg1, (object)arg2) -> None :

    C++ signature :
        void registerNodeGadget(IECore::TypeId,boost::python::api::object)

registerNodeGadget( (object)nodeGadgetType, (object)creator [, (TypeId)nodeType=IECore._IECore.TypeId.Invalid]) -> None :

    C++ signature :
        void registerNodeGadget(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,boost::python::api::object [,IECore::TypeId=IECore._IECore.TypeId.Invalid])'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setContents (self, *args, **kwargs):
      '''
setContents( (StandardNodeGadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setContents(GafferUI::StandardNodeGadget {lvalue},boost::intrusive_ptr<GafferUI::Gadget>)'''
    ...
    def setEdgeGadget (self, *args, **kwargs):
      '''
setEdgeGadget( (StandardNodeGadget)arg1, (Edge)arg2, (object)arg3) -> None :

    C++ signature :
        void setEdgeGadget(GafferUI::StandardNodeGadget {lvalue},GafferUI::StandardNodeGadget::Edge,boost::intrusive_ptr<GafferUI::Gadget>)'''
    ...
    def setEnabled (self, *args, **kwargs):
      '''
setEnabled( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnabled(GafferUI::Gadget {lvalue},bool)'''
    ...
    def setHighlighted (self, *args, **kwargs):
      '''
setHighlighted( (StandardNodeGadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHighlighted(GafferUI::StandardNodeGadget {lvalue},bool)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setStyle (self, *args, **kwargs):
      '''
setStyle( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setStyle(GafferUI::Gadget {lvalue},boost::intrusive_ptr<GafferUI::Style const>)'''
    ...
    def setToolTip (self, *args, **kwargs):
      '''
setToolTip( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setToolTip(GafferUI::Gadget {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def setTransform (self, *args, **kwargs):
      '''
setTransform( (Gadget)arg1, (M44f)arg2) -> None :

    C++ signature :
        void setTransform(GafferUI::Gadget {lvalue},Imath_3_1::Matrix44<float>)'''
    ...
    def setVisible (self, *args, **kwargs):
      '''
setVisible( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setVisible(GafferUI::Gadget {lvalue},bool)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def style (self, *args, **kwargs):
      '''
style( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> style(GafferUI::Gadget {lvalue})'''
    ...
    def transformedBound (self, *args, **kwargs):
      '''
transformedBound( (Gadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue})

transformedBound( (Gadget)arg1, (Gadget)arg2) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue},GafferUI::Gadget const*)'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (StandardNodeGadget)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(GafferUI::StandardNodeGadget {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (StandardNodeGadget)arg1) -> str :

    C++ signature :
        char const* typeName(GafferUI::StandardNodeGadget {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...
    def visibilityChangedSignal (self, *args, **kwargs):
      '''
visibilityChangedSignal( (Gadget)arg1) -> VisibilityChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} visibilityChangedSignal(GafferUI::Gadget {lvalue})'''
    ...
    def visible (self, *args, **kwargs):
      '''
visible( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool visible(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def wheelSignal (self, *args, **kwargs):
      '''
wheelSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} wheelSignal(GafferUI::Gadget {lvalue})'''
    ...

def StandardNodeToolbar (*args):
      '''

'''      
    ...

class StandardNodeToolbar:
    def _NodeToolbar__creators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bottom (node):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (node, edge=<Edge.Top: 1>):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def left (node):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def node (self):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def registerCreator (nodeClassOrTypeId, toolbarCreator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def right (node):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def top (node):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def StandardNodeUI (*args):
      '''

'''      
    ...

class StandardNodeUI:
    def _NodeUI__deletePlug (plug):
      '''None'''
    ...
    def _NodeUI__nodeUIs (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def appendPlugDeletionMenuDefinitions (plugOrPlugValueWidget, menuDefinition):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (node):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def node (self):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def plugValueWidget (self, plug):
      '''None'''
    ...
    def registerNodeUI (nodeClassOrTypeId, nodeUICreator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def StandardNodule (*args):
      '''
__init__(_object*, boost::intrusive_ptr<Gaffer::Plug>)

'''      
    ...

class StandardNodule:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ButtonSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DirtyType (self, *args, **kwargs):
      '''None'''
    ...
    def DragBeginSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DragDropSignal (self, *args, **kwargs):
      '''None'''
    ...
    def EnterLeaveSignal (self, *args, **kwargs):
      '''None'''
    ...
    def IdleSignal (self, *args, **kwargs):
      '''None'''
    ...
    def KeySignal (self, *args, **kwargs):
      '''None'''
    ...
    def Layer (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def RenderReason (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def VisibilityChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _dirty (self, *args, **kwargs):
      '''
_dirty( (Gadget)arg1, (DirtyType)arg2) -> None :

    C++ signature :
        void _dirty(GafferUI::Gadget {lvalue},GafferUI::Gadget::DirtyType)'''
    ...
    def _idleSignalAccessedSignal (self, *args, **kwargs):
      '''
_idleSignalAccessedSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} _idleSignalAccessedSignal()'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (StandardNodule)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(GafferUI::StandardNodule,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (StandardNodule)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(GafferUI::StandardNodule,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def bound (self, *args, **kwargs):
      '''
bound( (StandardNodule)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > bound(GafferUI::StandardNodule)'''
    ...
    def buttonDoubleClickSignal (self, *args, **kwargs):
      '''
buttonDoubleClickSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonDoubleClickSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonPressSignal (self, *args, **kwargs):
      '''
buttonPressSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonReleaseSignal (self, *args, **kwargs):
      '''
buttonReleaseSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def canCreateConnection (self, *args, **kwargs):
      '''
canCreateConnection( (StandardNodule)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool canCreateConnection(GafferUI::StandardNodule,Gaffer::Plug const*)'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def create (self, *args, **kwargs):
      '''
create( (object)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Nodule> create(boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def createConnection (self, *args, **kwargs):
      '''
createConnection( (StandardNodule)arg1, (Plug)arg2) -> None :

    C++ signature :
        void createConnection(GafferUI::StandardNodule {lvalue},Gaffer::Plug*)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def dragBeginSignal (self, *args, **kwargs):
      '''
dragBeginSignal( (Gadget)arg1) -> DragBeginSignal :

    C++ signature :
        Gaffer::Signals::Signal<boost::intrusive_ptr<IECore::RunTimeTyped> (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<boost::intrusive_ptr<IECore::RunTimeTyped> > > {lvalue} dragBeginSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEndSignal (self, *args, **kwargs):
      '''
dragEndSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEndSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEnterSignal (self, *args, **kwargs):
      '''
dragEnterSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEnterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragLeaveSignal (self, *args, **kwargs):
      '''
dragLeaveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragLeaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragMoveSignal (self, *args, **kwargs):
      '''
dragMoveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dropSignal (self, *args, **kwargs):
      '''
dropSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dropSignal(GafferUI::Gadget {lvalue})'''
    ...
    def enabled (self, *args, **kwargs):
      '''
enabled( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool enabled(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def enterSignal (self, *args, **kwargs):
      '''
enterSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} enterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def fullTransform (self, *args, **kwargs):
      '''
fullTransform( (Gadget)arg1 [, (Gadget)arg2]) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> fullTransform(GafferUI::Gadget {lvalue} [,GafferUI::Gadget const*])'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getEnabled (self, *args, **kwargs):
      '''
getEnabled( (Gadget)arg1) -> bool :

    C++ signature :
        bool getEnabled(GafferUI::Gadget {lvalue})'''
    ...
    def getHighlighted (self, *args, **kwargs):
      '''
getHighlighted( (Gadget)arg1) -> bool :

    C++ signature :
        bool getHighlighted(GafferUI::Gadget {lvalue})'''
    ...
    def getLabelVisible (self, *args, **kwargs):
      '''
getLabelVisible( (StandardNodule)arg1) -> bool :

    C++ signature :
        bool getLabelVisible(GafferUI::StandardNodule {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getStyle (self, *args, **kwargs):
      '''
getStyle( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> getStyle(GafferUI::Gadget {lvalue})'''
    ...
    def getToolTip (self, *args, **kwargs):
      '''
getToolTip( (StandardNodule)arg1, (LineSegment3f)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > getToolTip(GafferUI::StandardNodule,IECore::LineSegment<Imath_3_1::Vec3<float> >)'''
    ...
    def getTransform (self, *args, **kwargs):
      '''
getTransform( (Gadget)arg1) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> getTransform(GafferUI::Gadget {lvalue})'''
    ...
    def getVisible (self, *args, **kwargs):
      '''
getVisible( (Gadget)arg1) -> bool :

    C++ signature :
        bool getVisible(GafferUI::Gadget {lvalue})'''
    ...
    def idleSignal (self, *args, **kwargs):
      '''
idleSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} idleSignal()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (StandardNodule)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::StandardNodule {lvalue},IECore::TypeId)

isInstanceOf( (StandardNodule)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::StandardNodule {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keyPressSignal (self, *args, **kwargs):
      '''
keyPressSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keyReleaseSignal (self, *args, **kwargs):
      '''
keyReleaseSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def leaveSignal (self, *args, **kwargs):
      '''
leaveSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} leaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def mouseMoveSignal (self, *args, **kwargs):
      '''
mouseMoveSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} mouseMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plug (self, *args, **kwargs):
      '''
plug( (Nodule)arg1) -> object :

    C++ signature :
        Gaffer::Plug* plug(GafferUI::Nodule {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerNodule (self, *args, **kwargs):
      '''
registerNodule( (object)noduleTypeName, (object)creator [, (TypeId)plugType=IECore._IECore.TypeId.Invalid]) -> None :

    C++ signature :
        void registerNodule(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,boost::python::api::object [,IECore::TypeId=IECore._IECore.TypeId.Invalid])'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setEnabled (self, *args, **kwargs):
      '''
setEnabled( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnabled(GafferUI::Gadget {lvalue},bool)'''
    ...
    def setHighlighted (self, *args, **kwargs):
      '''
setHighlighted( (StandardNodule)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHighlighted(GafferUI::StandardNodule {lvalue},bool)'''
    ...
    def setLabelVisible (self, *args, **kwargs):
      '''
setLabelVisible( (StandardNodule)arg1, (bool)arg2) -> None :

    C++ signature :
        void setLabelVisible(GafferUI::StandardNodule {lvalue},bool)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setStyle (self, *args, **kwargs):
      '''
setStyle( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setStyle(GafferUI::Gadget {lvalue},boost::intrusive_ptr<GafferUI::Style const>)'''
    ...
    def setToolTip (self, *args, **kwargs):
      '''
setToolTip( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setToolTip(GafferUI::Gadget {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def setTransform (self, *args, **kwargs):
      '''
setTransform( (Gadget)arg1, (M44f)arg2) -> None :

    C++ signature :
        void setTransform(GafferUI::Gadget {lvalue},Imath_3_1::Matrix44<float>)'''
    ...
    def setVisible (self, *args, **kwargs):
      '''
setVisible( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setVisible(GafferUI::Gadget {lvalue},bool)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def style (self, *args, **kwargs):
      '''
style( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> style(GafferUI::Gadget {lvalue})'''
    ...
    def transformedBound (self, *args, **kwargs):
      '''
transformedBound( (Gadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue})

transformedBound( (Gadget)arg1, (Gadget)arg2) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue},GafferUI::Gadget const*)'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (StandardNodule)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(GafferUI::StandardNodule {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (StandardNodule)arg1) -> str :

    C++ signature :
        char const* typeName(GafferUI::StandardNodule {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def updateDragEndPoint (self, *args, **kwargs):
      '''
updateDragEndPoint( (StandardNodule)arg1, (V3f)arg2, (V3f)arg3) -> None :

    C++ signature :
        void updateDragEndPoint(GafferUI::StandardNodule {lvalue},Imath_3_1::Vec3<float>,Imath_3_1::Vec3<float>)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...
    def visibilityChangedSignal (self, *args, **kwargs):
      '''
visibilityChangedSignal( (Gadget)arg1) -> VisibilityChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} visibilityChangedSignal(GafferUI::Gadget {lvalue})'''
    ...
    def visible (self, *args, **kwargs):
      '''
visible( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool visible(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def wheelSignal (self, *args, **kwargs):
      '''
wheelSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} wheelSignal(GafferUI::Gadget {lvalue})'''
    ...

def StandardPathColumn (*args):
      '''
__init__(_object*, GafferUI::PathColumn::CellData, IECore::InternedString, GafferUI::PathColumn::SizeMode sizeMode=GafferUI._GafferUI.SizeMode.Default)
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, IECore::InternedString, GafferUI::PathColumn::SizeMode sizeMode=GafferUI._GafferUI.SizeMode.Default)

'''      
    ...

class StandardPathColumn:
    def ButtonSignal (self, *args, **kwargs):
      '''None'''
    ...
    def CellData (self, *args, **kwargs):
      '''None'''
    ...
    def PathColumnSignal (self, *args, **kwargs):
      '''None'''
    ...
    def SizeMode (self, *args, **kwargs):
      '''None'''
    ...
    def buttonDoubleClickSignal (self, *args, **kwargs):
      '''
buttonDoubleClickSignal( (PathColumn)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (Gaffer::Path&, GafferUI::PathListingWidget&, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonDoubleClickSignal(GafferUI::PathColumn {lvalue})'''
    ...
    def buttonPressSignal (self, *args, **kwargs):
      '''
buttonPressSignal( (PathColumn)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (Gaffer::Path&, GafferUI::PathListingWidget&, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonPressSignal(GafferUI::PathColumn {lvalue})'''
    ...
    def buttonReleaseSignal (self, *args, **kwargs):
      '''
buttonReleaseSignal( (PathColumn)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (Gaffer::Path&, GafferUI::PathListingWidget&, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonReleaseSignal(GafferUI::PathColumn {lvalue})'''
    ...
    def cellData (self, *args, **kwargs):
      '''
cellData( (PathColumn)arg1, (Path)path [, (Canceller)canceller=None]) -> CellData :

    C++ signature :
        GafferUI::PathColumn::CellData cellData(GafferUI::PathColumn {lvalue},Gaffer::Path [,IECore::Canceller const*=None])'''
    ...
    def changedSignal (self, *args, **kwargs):
      '''
changedSignal( (PathColumn)arg1) -> PathColumnSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::PathColumn*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} changedSignal(GafferUI::PathColumn {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getSizeMode (self, *args, **kwargs):
      '''
getSizeMode( (PathColumn)arg1) -> SizeMode :

    C++ signature :
        GafferUI::PathColumn::SizeMode getSizeMode(GafferUI::PathColumn {lvalue})'''
    ...
    def headerData (self, *args, **kwargs):
      '''
headerData( (PathColumn)arg1 [, (Canceller)canceller=None]) -> CellData :

    C++ signature :
        GafferUI::PathColumn::CellData headerData(GafferUI::PathColumn {lvalue} [,IECore::Canceller const*=None])'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def property (self, *args, **kwargs):
      '''
property( (StandardPathColumn)arg1) -> str :

    C++ signature :
        char const* property(GafferUI::StandardPathColumn)'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def setSizeMode (self, *args, **kwargs):
      '''
setSizeMode( (PathColumn)arg1, (SizeMode)sizeMode) -> None :

    C++ signature :
        void setSizeMode(GafferUI::PathColumn {lvalue},GafferUI::PathColumn::SizeMode)'''
    ...

def StandardStyle (*args):
      '''
__init__(_object*)

'''      
    ...

class StandardStyle:
    def Axes (self, *args, **kwargs):
      '''None'''
    ...
    def Color (self, *args, **kwargs):
      '''None'''
    ...
    def State (self, *args, **kwargs):
      '''None'''
    ...
    def TextType (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def changedSignal (self, *args, **kwargs):
      '''
changedSignal( (Style)arg1) -> UnarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Style*), Gaffer::Signals::DefaultCombiner<void> > {lvalue} changedSignal(GafferUI::Style {lvalue})'''
    ...
    def characterBound (self, *args, **kwargs):
      '''
characterBound( (Style)arg1, (TextType)arg2) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > characterBound(GafferUI::Style {lvalue},GafferUI::Style::TextType)'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getColor (self, *args, **kwargs):
      '''
getColor( (StandardStyle)arg1, (Color)arg2) -> Color3f :

    C++ signature :
        Imath_3_1::Color3<float> getColor(GafferUI::StandardStyle {lvalue},GafferUI::StandardStyle::Color)'''
    ...
    def getDefaultStyle (self, *args, **kwargs):
      '''
getDefaultStyle() -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> getDefaultStyle()'''
    ...
    def getFont (self, *args, **kwargs):
      '''
getFont( (StandardStyle)arg1, (TextType)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<IECoreGL::Font> getFont(GafferUI::StandardStyle {lvalue},GafferUI::Style::TextType)'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (StandardStyle)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::StandardStyle {lvalue},IECore::TypeId)

isInstanceOf( (StandardStyle)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::StandardStyle {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def renderBackdrop (self, *args, **kwargs):
      '''
renderBackdrop( (Style)arg1, (Box2f)arg2, (State)arg3, (Color3f)arg4) -> None :

    C++ signature :
        void renderBackdrop(GafferUI::Style {lvalue},Imath_3_1::Box<Imath_3_1::Vec2<float> >,GafferUI::Style::State,Imath_3_1::Color3<float> const*)'''
    ...
    def renderConnection (self, *args, **kwargs):
      '''
renderConnection( (Style)arg1, (V3f)arg2, (V3f)arg3, (V3f)arg4, (V3f)arg5, (State)arg6, (Color3f)arg7) -> None :

    C++ signature :
        void renderConnection(GafferUI::Style {lvalue},Imath_3_1::Vec3<float>,Imath_3_1::Vec3<float>,Imath_3_1::Vec3<float>,Imath_3_1::Vec3<float>,GafferUI::Style::State,Imath_3_1::Color3<float> const*)'''
    ...
    def renderFrame (self, *args, **kwargs):
      '''
renderFrame( (Style)arg1, (Box2f)arg2, (float)arg3, (State)arg4) -> None :

    C++ signature :
        void renderFrame(GafferUI::Style {lvalue},Imath_3_1::Box<Imath_3_1::Vec2<float> >,float,GafferUI::Style::State)'''
    ...
    def renderHorizontalRule (self, *args, **kwargs):
      '''
renderHorizontalRule( (Style)arg1, (V2f)arg2, (float)arg3, (State)arg4) -> None :

    C++ signature :
        void renderHorizontalRule(GafferUI::Style {lvalue},Imath_3_1::Vec2<float>,float,GafferUI::Style::State)'''
    ...
    def renderImage (self, *args, **kwargs):
      '''
renderImage( (Style)arg1, (Box2f)arg2, (Texture)arg3) -> None :

    C++ signature :
        void renderImage(GafferUI::Style {lvalue},Imath_3_1::Box<Imath_3_1::Vec2<float> >,IECoreGL::Texture const*)'''
    ...
    def renderLine (self, *args, **kwargs):
      '''
renderLine( (Style)arg1, (LineSegment3f)arg2, (float)arg3, (Color4f)arg4) -> None :

    C++ signature :
        void renderLine(GafferUI::Style {lvalue},IECore::LineSegment<Imath_3_1::Vec3<float> >,float,Imath_3_1::Color4<float> const*)'''
    ...
    def renderNodeFrame (self, *args, **kwargs):
      '''
renderNodeFrame( (Style)arg1, (Box2f)arg2, (float)arg3, (State)arg4, (Color3f)arg5) -> None :

    C++ signature :
        void renderNodeFrame(GafferUI::Style {lvalue},Imath_3_1::Box<Imath_3_1::Vec2<float> >,float,GafferUI::Style::State,Imath_3_1::Color3<float> const*)'''
    ...
    def renderNodule (self, *args, **kwargs):
      '''
renderNodule( (Style)arg1, (float)arg2, (State)arg3, (Color3f)arg4) -> None :

    C++ signature :
        void renderNodule(GafferUI::Style {lvalue},float,GafferUI::Style::State,Imath_3_1::Color3<float> const*)'''
    ...
    def renderRectangle (self, *args, **kwargs):
      '''
renderRectangle( (Style)arg1, (Box2f)arg2) -> None :

    C++ signature :
        void renderRectangle(GafferUI::Style {lvalue},Imath_3_1::Box<Imath_3_1::Vec2<float> >)'''
    ...
    def renderRotateHandle (self, *args, **kwargs):
      '''
renderRotateHandle( (Style)arg1, (Axes)arg2, (State)arg3, (V3f)arg4) -> None :

    C++ signature :
        void renderRotateHandle(GafferUI::Style {lvalue},GafferUI::Style::Axes,GafferUI::Style::State,Imath_3_1::Vec3<float>)'''
    ...
    def renderScaleHandle (self, *args, **kwargs):
      '''
renderScaleHandle( (Style)arg1, (Axes)arg2, (State)arg3) -> None :

    C++ signature :
        void renderScaleHandle(GafferUI::Style {lvalue},GafferUI::Style::Axes,GafferUI::Style::State)'''
    ...
    def renderSelectionBox (self, *args, **kwargs):
      '''
renderSelectionBox( (Style)arg1, (Box2f)arg2) -> None :

    C++ signature :
        void renderSelectionBox(GafferUI::Style {lvalue},Imath_3_1::Box<Imath_3_1::Vec2<float> >)'''
    ...
    def renderSolidRectangle (self, *args, **kwargs):
      '''
renderSolidRectangle( (Style)arg1, (Box2f)arg2) -> None :

    C++ signature :
        void renderSolidRectangle(GafferUI::Style {lvalue},Imath_3_1::Box<Imath_3_1::Vec2<float> >)'''
    ...
    def renderText (self, *args, **kwargs):
      '''
renderText( (Style)arg1, (TextType)arg2, (object)arg3, (State)arg4, (Color4f)arg5) -> None :

    C++ signature :
        void renderText(GafferUI::Style {lvalue},GafferUI::Style::TextType,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,GafferUI::Style::State,Imath_3_1::Color4<float> const*)'''
    ...
    def renderTranslateHandle (self, *args, **kwargs):
      '''
renderTranslateHandle( (Style)arg1, (Axes)arg2, (State)arg3) -> None :

    C++ signature :
        void renderTranslateHandle(GafferUI::Style {lvalue},GafferUI::Style::Axes,GafferUI::Style::State)'''
    ...
    def renderWrappedText (self, *args, **kwargs):
      '''
renderWrappedText( (Style)arg1, (TextType)arg2, (object)arg3, (Box2f)arg4, (State)arg5) -> None :

    C++ signature :
        void renderWrappedText(GafferUI::Style {lvalue},GafferUI::Style::TextType,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Imath_3_1::Box<Imath_3_1::Vec2<float> >,GafferUI::Style::State)'''
    ...
    def setColor (self, *args, **kwargs):
      '''
setColor( (StandardStyle)arg1, (Color)arg2, (Color3f)arg3) -> None :

    C++ signature :
        void setColor(GafferUI::StandardStyle {lvalue},GafferUI::StandardStyle::Color,Imath_3_1::Color3<float>)'''
    ...
    def setDefaultStyle (self, *args, **kwargs):
      '''
setDefaultStyle() -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> setDefaultStyle()'''
    ...
    def setFont (self, *args, **kwargs):
      '''
setFont( (StandardStyle)arg1, (TextType)arg2, (object)arg3) -> None :

    C++ signature :
        void setFont(GafferUI::StandardStyle {lvalue},GafferUI::Style::TextType,boost::intrusive_ptr<IECoreGL::Font>)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def textBound (self, *args, **kwargs):
      '''
textBound( (Style)arg1, (TextType)arg2, (object)arg3) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > textBound(GafferUI::Style {lvalue},GafferUI::Style::TextType,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (StandardStyle)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(GafferUI::StandardStyle {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (StandardStyle)arg1) -> str :

    C++ signature :
        char const* typeName(GafferUI::StandardStyle {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...

def StringPlugValueWidget (*args):
      '''

'''      
    ...

class StringPlugValueWidget:
    def MultiplePlugTypesError (self, *args, **kwargs):
      '''None'''
    ...
    def MultiplePlugsError (self, *args, **kwargs):
      '''None'''
    ...
    def MultipleWidgetCreatorsError (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__applyPreset (self, presetName, *unused):
      '''None'''
    ...
    def _PlugValueWidget__applyReadOnly (self, readOnly):
      '''None'''
    ...
    def _PlugValueWidget__applyUserDefaults (self):
      '''None'''
    ...
    def _PlugValueWidget__auxiliaryPlugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__buttonPress (self, widget, event, buttonMask):
      '''None'''
    ...
    def _PlugValueWidget__callLegacyUpdateMethods (self):
      '''None'''
    ...
    def _PlugValueWidget__callUpdateFromValues (self):
      '''None'''
    ...
    def _PlugValueWidget__contextChanged (self, context, key):
      '''None'''
    ...
    def _PlugValueWidget__contextMenu (self, *unused):
      '''None'''
    ...
    def _PlugValueWidget__copyValue (self):
      '''None'''
    ...
    def _PlugValueWidget__creator (plug, typeMetadata):
      '''None'''
    ...
    def _PlugValueWidget__defaultContext (graphComponent):
      '''None'''
    ...
    def _PlugValueWidget__dragEnter (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__dragLeave (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__drop (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__editInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__fallbackContext (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__nodeMetadataChanged (self, nodeTypeId, key, node):
      '''None'''
    ...
    def _PlugValueWidget__plugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugInputChanged (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugMetadataChanged (self, plug, key, reason):
      '''None'''
    ...
    def _PlugValueWidget__plugTypesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _PlugValueWidget__popupMenuSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__presetsSubMenu (self):
      '''None'''
    ...
    def _PlugValueWidget__removeInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__setPlugsInternal (self, plugs, callUpdateMethods):
      '''None'''
    ...
    def _PlugValueWidget__setValues (self, values):
      '''None'''
    ...
    def _PlugValueWidget__updateContextConnection (self):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackground (self, plugs, auxiliaryPlugs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPlug (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPostCall (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPreCall (self, *args, **kwargs):
      '''None'''
    ...
    def _StringPlugValueWidget__editInteractionOccured (self):
      '''None'''
    ...
    def _StringPlugValueWidget__editingFinished (self, textWidget):
      '''None'''
    ...
    def _StringPlugValueWidget__keyPress (self, widget, event):
      '''None'''
    ...
    def _StringPlugValueWidget__placeholderText (self):
      '''None'''
    ...
    def _StringPlugValueWidget__setPlugValues (self):
      '''None'''
    ...
    def _StringPlugValueWidget__textChanged (self, textWidget):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _addPopupMenu (self, widget=None, buttons=GafferUI._GafferUI.Buttons.Right):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _auxiliaryPlugs (self, plug):
      '''None'''
    ...
    def _blockedUpdateFromValues (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _convertValue (self, value):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _editable (self, canEditAnimation=False):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _plugConnections (self):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _popupMenuDefinition (self):
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _requestUpdateFromValues (self, lazy=True):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromEditable (self):
      '''None'''
    ...
    def _updateFromMetadata (self):
      '''None'''
    ...
    def _updateFromValues (self, values, exception):
      '''None'''
    ...
    def _valuesDependOnContext (self):
      '''None'''
    ...
    def _valuesForUpdate (plugs, auxiliaryPlugs):
      '''None'''
    ...
    def acquire (plug):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childPlugValueWidget (self, childPlug):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (plugs, typeMetadata='plugValueWidget:type'):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getPlug (self):
      '''None'''
    ...
    def getPlugs (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def hasLabel (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def popupMenuSignal ():
      '''None'''
    ...
    def registerType (plugClassOrTypeId, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setPlug (self, plug):
      '''None'''
    ...
    def setPlugs (self, plugs):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def textWidget (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def Style (*args):
      '''

'''      
    ...

class Style:
    def Axes (self, *args, **kwargs):
      '''None'''
    ...
    def State (self, *args, **kwargs):
      '''None'''
    ...
    def TextType (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def changedSignal (self, *args, **kwargs):
      '''
changedSignal( (Style)arg1) -> UnarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Style*), Gaffer::Signals::DefaultCombiner<void> > {lvalue} changedSignal(GafferUI::Style {lvalue})'''
    ...
    def characterBound (self, *args, **kwargs):
      '''
characterBound( (Style)arg1, (TextType)arg2) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > characterBound(GafferUI::Style {lvalue},GafferUI::Style::TextType)'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getDefaultStyle (self, *args, **kwargs):
      '''
getDefaultStyle() -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> getDefaultStyle()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (Style)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::Style {lvalue},IECore::TypeId)

isInstanceOf( (Style)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::Style {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def renderBackdrop (self, *args, **kwargs):
      '''
renderBackdrop( (Style)arg1, (Box2f)arg2, (State)arg3, (Color3f)arg4) -> None :

    C++ signature :
        void renderBackdrop(GafferUI::Style {lvalue},Imath_3_1::Box<Imath_3_1::Vec2<float> >,GafferUI::Style::State,Imath_3_1::Color3<float> const*)'''
    ...
    def renderConnection (self, *args, **kwargs):
      '''
renderConnection( (Style)arg1, (V3f)arg2, (V3f)arg3, (V3f)arg4, (V3f)arg5, (State)arg6, (Color3f)arg7) -> None :

    C++ signature :
        void renderConnection(GafferUI::Style {lvalue},Imath_3_1::Vec3<float>,Imath_3_1::Vec3<float>,Imath_3_1::Vec3<float>,Imath_3_1::Vec3<float>,GafferUI::Style::State,Imath_3_1::Color3<float> const*)'''
    ...
    def renderFrame (self, *args, **kwargs):
      '''
renderFrame( (Style)arg1, (Box2f)arg2, (float)arg3, (State)arg4) -> None :

    C++ signature :
        void renderFrame(GafferUI::Style {lvalue},Imath_3_1::Box<Imath_3_1::Vec2<float> >,float,GafferUI::Style::State)'''
    ...
    def renderHorizontalRule (self, *args, **kwargs):
      '''
renderHorizontalRule( (Style)arg1, (V2f)arg2, (float)arg3, (State)arg4) -> None :

    C++ signature :
        void renderHorizontalRule(GafferUI::Style {lvalue},Imath_3_1::Vec2<float>,float,GafferUI::Style::State)'''
    ...
    def renderImage (self, *args, **kwargs):
      '''
renderImage( (Style)arg1, (Box2f)arg2, (Texture)arg3) -> None :

    C++ signature :
        void renderImage(GafferUI::Style {lvalue},Imath_3_1::Box<Imath_3_1::Vec2<float> >,IECoreGL::Texture const*)'''
    ...
    def renderLine (self, *args, **kwargs):
      '''
renderLine( (Style)arg1, (LineSegment3f)arg2, (float)arg3, (Color4f)arg4) -> None :

    C++ signature :
        void renderLine(GafferUI::Style {lvalue},IECore::LineSegment<Imath_3_1::Vec3<float> >,float,Imath_3_1::Color4<float> const*)'''
    ...
    def renderNodeFrame (self, *args, **kwargs):
      '''
renderNodeFrame( (Style)arg1, (Box2f)arg2, (float)arg3, (State)arg4, (Color3f)arg5) -> None :

    C++ signature :
        void renderNodeFrame(GafferUI::Style {lvalue},Imath_3_1::Box<Imath_3_1::Vec2<float> >,float,GafferUI::Style::State,Imath_3_1::Color3<float> const*)'''
    ...
    def renderNodule (self, *args, **kwargs):
      '''
renderNodule( (Style)arg1, (float)arg2, (State)arg3, (Color3f)arg4) -> None :

    C++ signature :
        void renderNodule(GafferUI::Style {lvalue},float,GafferUI::Style::State,Imath_3_1::Color3<float> const*)'''
    ...
    def renderRectangle (self, *args, **kwargs):
      '''
renderRectangle( (Style)arg1, (Box2f)arg2) -> None :

    C++ signature :
        void renderRectangle(GafferUI::Style {lvalue},Imath_3_1::Box<Imath_3_1::Vec2<float> >)'''
    ...
    def renderRotateHandle (self, *args, **kwargs):
      '''
renderRotateHandle( (Style)arg1, (Axes)arg2, (State)arg3, (V3f)arg4) -> None :

    C++ signature :
        void renderRotateHandle(GafferUI::Style {lvalue},GafferUI::Style::Axes,GafferUI::Style::State,Imath_3_1::Vec3<float>)'''
    ...
    def renderScaleHandle (self, *args, **kwargs):
      '''
renderScaleHandle( (Style)arg1, (Axes)arg2, (State)arg3) -> None :

    C++ signature :
        void renderScaleHandle(GafferUI::Style {lvalue},GafferUI::Style::Axes,GafferUI::Style::State)'''
    ...
    def renderSelectionBox (self, *args, **kwargs):
      '''
renderSelectionBox( (Style)arg1, (Box2f)arg2) -> None :

    C++ signature :
        void renderSelectionBox(GafferUI::Style {lvalue},Imath_3_1::Box<Imath_3_1::Vec2<float> >)'''
    ...
    def renderSolidRectangle (self, *args, **kwargs):
      '''
renderSolidRectangle( (Style)arg1, (Box2f)arg2) -> None :

    C++ signature :
        void renderSolidRectangle(GafferUI::Style {lvalue},Imath_3_1::Box<Imath_3_1::Vec2<float> >)'''
    ...
    def renderText (self, *args, **kwargs):
      '''
renderText( (Style)arg1, (TextType)arg2, (object)arg3, (State)arg4, (Color4f)arg5) -> None :

    C++ signature :
        void renderText(GafferUI::Style {lvalue},GafferUI::Style::TextType,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,GafferUI::Style::State,Imath_3_1::Color4<float> const*)'''
    ...
    def renderTranslateHandle (self, *args, **kwargs):
      '''
renderTranslateHandle( (Style)arg1, (Axes)arg2, (State)arg3) -> None :

    C++ signature :
        void renderTranslateHandle(GafferUI::Style {lvalue},GafferUI::Style::Axes,GafferUI::Style::State)'''
    ...
    def renderWrappedText (self, *args, **kwargs):
      '''
renderWrappedText( (Style)arg1, (TextType)arg2, (object)arg3, (Box2f)arg4, (State)arg5) -> None :

    C++ signature :
        void renderWrappedText(GafferUI::Style {lvalue},GafferUI::Style::TextType,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Imath_3_1::Box<Imath_3_1::Vec2<float> >,GafferUI::Style::State)'''
    ...
    def setDefaultStyle (self, *args, **kwargs):
      '''
setDefaultStyle() -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> setDefaultStyle()'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def textBound (self, *args, **kwargs):
      '''
textBound( (Style)arg1, (TextType)arg2, (object)arg3) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > textBound(GafferUI::Style {lvalue},GafferUI::Style::TextType,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (Style)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(GafferUI::Style {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (Style)arg1) -> str :

    C++ signature :
        char const* typeName(GafferUI::Style {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...

def SubGraphUI (*args):
      '''

'''      
    ...

def SwitchUI (*args):
      '''

'''      
    ...

def TabbedContainer (*args):
      '''

'''      
    ...

class TabbedContainer:
    def _TabbedContainer__DragState (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def _TabbedContainer__currentChanged (self, index):
      '''None'''
    ...
    def _TabbedContainer__moveWidget (self, fromIndex, toIndex):
      '''None'''
    ...
    def _TabbedContainer__palette (self, *args, **kwargs):
      '''None'''
    ...
    def _TabbedContainer__scrollMenuDefinition (self):
      '''None'''
    ...
    def _TabbedContainer__scrollTo (self, child, *unused):
      '''None'''
    ...
    def _TabbedContainer__switchToTabUnderCursor (self):
      '''None'''
    ...
    def _TabbedContainer__tabBarDragActivate (self):
      '''None'''
    ...
    def _TabbedContainer__tabBarDragEnter (self, widget, event):
      '''None'''
    ...
    def _TabbedContainer__tabBarDragLeave (self, widget, event):
      '''None'''
    ...
    def _TabbedContainer__tabBarDragMove (self, widget, event):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _revealDescendant (self, descendant):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def addChild (self, child, label=''):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def append (self, child, label=''):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentChangedSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getCornerWidget (self):
      '''None'''
    ...
    def getCurrent (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getLabel (self, child):
      '''None'''
    ...
    def getTabVisible (self, child):
      '''None'''
    ...
    def getTabsVisible (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def index (self, child):
      '''None'''
    ...
    def insert (self, index, child, label=''):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def remove (self, child):
      '''None'''
    ...
    def removeChild (self, child):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setCornerWidget (self, cornerWidget):
      '''None'''
    ...
    def setCurrent (self, child):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setLabel (self, child, labelText):
      '''None'''
    ...
    def setTabVisible (self, child, visible):
      '''None'''
    ...
    def setTabsVisible (self, visible):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def TextGadget (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)

'''      
    ...

class TextGadget:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ButtonSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DirtyType (self, *args, **kwargs):
      '''None'''
    ...
    def DragBeginSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DragDropSignal (self, *args, **kwargs):
      '''None'''
    ...
    def EnterLeaveSignal (self, *args, **kwargs):
      '''None'''
    ...
    def IdleSignal (self, *args, **kwargs):
      '''None'''
    ...
    def KeySignal (self, *args, **kwargs):
      '''None'''
    ...
    def Layer (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def RenderReason (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def VisibilityChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _dirty (self, *args, **kwargs):
      '''
_dirty( (Gadget)arg1, (DirtyType)arg2) -> None :

    C++ signature :
        void _dirty(GafferUI::Gadget {lvalue},GafferUI::Gadget::DirtyType)'''
    ...
    def _idleSignalAccessedSignal (self, *args, **kwargs):
      '''
_idleSignalAccessedSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} _idleSignalAccessedSignal()'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (TextGadget)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(GafferUI::TextGadget,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (TextGadget)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(GafferUI::TextGadget,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def bound (self, *args, **kwargs):
      '''
bound( (TextGadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > bound(GafferUI::TextGadget)'''
    ...
    def buttonDoubleClickSignal (self, *args, **kwargs):
      '''
buttonDoubleClickSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonDoubleClickSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonPressSignal (self, *args, **kwargs):
      '''
buttonPressSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonReleaseSignal (self, *args, **kwargs):
      '''
buttonReleaseSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def dragBeginSignal (self, *args, **kwargs):
      '''
dragBeginSignal( (Gadget)arg1) -> DragBeginSignal :

    C++ signature :
        Gaffer::Signals::Signal<boost::intrusive_ptr<IECore::RunTimeTyped> (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<boost::intrusive_ptr<IECore::RunTimeTyped> > > {lvalue} dragBeginSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEndSignal (self, *args, **kwargs):
      '''
dragEndSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEndSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEnterSignal (self, *args, **kwargs):
      '''
dragEnterSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEnterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragLeaveSignal (self, *args, **kwargs):
      '''
dragLeaveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragLeaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragMoveSignal (self, *args, **kwargs):
      '''
dragMoveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dropSignal (self, *args, **kwargs):
      '''
dropSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dropSignal(GafferUI::Gadget {lvalue})'''
    ...
    def enabled (self, *args, **kwargs):
      '''
enabled( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool enabled(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def enterSignal (self, *args, **kwargs):
      '''
enterSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} enterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def fullTransform (self, *args, **kwargs):
      '''
fullTransform( (Gadget)arg1 [, (Gadget)arg2]) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> fullTransform(GafferUI::Gadget {lvalue} [,GafferUI::Gadget const*])'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getDimmed (self, *args, **kwargs):
      '''
getDimmed( (TextGadget)arg1) -> bool :

    C++ signature :
        bool getDimmed(GafferUI::TextGadget {lvalue})'''
    ...
    def getEnabled (self, *args, **kwargs):
      '''
getEnabled( (Gadget)arg1) -> bool :

    C++ signature :
        bool getEnabled(GafferUI::Gadget {lvalue})'''
    ...
    def getHighlighted (self, *args, **kwargs):
      '''
getHighlighted( (Gadget)arg1) -> bool :

    C++ signature :
        bool getHighlighted(GafferUI::Gadget {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getStyle (self, *args, **kwargs):
      '''
getStyle( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> getStyle(GafferUI::Gadget {lvalue})'''
    ...
    def getText (self, *args, **kwargs):
      '''
getText( (TextGadget)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > getText(GafferUI::TextGadget {lvalue})'''
    ...
    def getToolTip (self, *args, **kwargs):
      '''
getToolTip( (TextGadget)arg1, (LineSegment3f)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > getToolTip(GafferUI::TextGadget,IECore::LineSegment<Imath_3_1::Vec3<float> >)'''
    ...
    def getTransform (self, *args, **kwargs):
      '''
getTransform( (Gadget)arg1) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> getTransform(GafferUI::Gadget {lvalue})'''
    ...
    def getVisible (self, *args, **kwargs):
      '''
getVisible( (Gadget)arg1) -> bool :

    C++ signature :
        bool getVisible(GafferUI::Gadget {lvalue})'''
    ...
    def idleSignal (self, *args, **kwargs):
      '''
idleSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} idleSignal()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (TextGadget)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::TextGadget {lvalue},IECore::TypeId)

isInstanceOf( (TextGadget)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::TextGadget {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keyPressSignal (self, *args, **kwargs):
      '''
keyPressSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keyReleaseSignal (self, *args, **kwargs):
      '''
keyReleaseSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def leaveSignal (self, *args, **kwargs):
      '''
leaveSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} leaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def mouseMoveSignal (self, *args, **kwargs):
      '''
mouseMoveSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} mouseMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setDimmed (self, *args, **kwargs):
      '''
setDimmed( (TextGadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setDimmed(GafferUI::TextGadget {lvalue},bool)'''
    ...
    def setEnabled (self, *args, **kwargs):
      '''
setEnabled( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnabled(GafferUI::Gadget {lvalue},bool)'''
    ...
    def setHighlighted (self, *args, **kwargs):
      '''
setHighlighted( (TextGadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHighlighted(GafferUI::TextGadget {lvalue},bool)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setStyle (self, *args, **kwargs):
      '''
setStyle( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setStyle(GafferUI::Gadget {lvalue},boost::intrusive_ptr<GafferUI::Style const>)'''
    ...
    def setText (self, *args, **kwargs):
      '''
setText( (TextGadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setText(GafferUI::TextGadget {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def setToolTip (self, *args, **kwargs):
      '''
setToolTip( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setToolTip(GafferUI::Gadget {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def setTransform (self, *args, **kwargs):
      '''
setTransform( (Gadget)arg1, (M44f)arg2) -> None :

    C++ signature :
        void setTransform(GafferUI::Gadget {lvalue},Imath_3_1::Matrix44<float>)'''
    ...
    def setVisible (self, *args, **kwargs):
      '''
setVisible( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setVisible(GafferUI::Gadget {lvalue},bool)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def style (self, *args, **kwargs):
      '''
style( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> style(GafferUI::Gadget {lvalue})'''
    ...
    def transformedBound (self, *args, **kwargs):
      '''
transformedBound( (Gadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue})

transformedBound( (Gadget)arg1, (Gadget)arg2) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue},GafferUI::Gadget const*)'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (TextGadget)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(GafferUI::TextGadget {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (TextGadget)arg1) -> str :

    C++ signature :
        char const* typeName(GafferUI::TextGadget {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...
    def visibilityChangedSignal (self, *args, **kwargs):
      '''
visibilityChangedSignal( (Gadget)arg1) -> VisibilityChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} visibilityChangedSignal(GafferUI::Gadget {lvalue})'''
    ...
    def visible (self, *args, **kwargs):
      '''
visible( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool visible(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def wheelSignal (self, *args, **kwargs):
      '''
wheelSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} wheelSignal(GafferUI::Gadget {lvalue})'''
    ...

def TextInputDialogue (*args):
      '''

'''      
    ...

class TextInputDialogue:
    def SizeMode (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def _Dialogue__buttonClicked (self, button):
      '''None'''
    ...
    def _Dialogue__close (self, widget):
      '''None'''
    ...
    def _TextInputDialogue__textActivated (self, textWidget):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _Window__caughtKeys ():
      '''None'''
    ...
    def _Window__caughtKeysSet (self, *args, **kwargs):
      '''None'''
    ...
    def _Window__constrainToScreen (self, position):
      '''None'''
    ...
    def _Window__keyPress (self, widget, event):
      '''None'''
    ...
    def _acceptsClose (self):
      '''None'''
    ...
    def _addButton (self, textOrButton):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _getWidget (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _revealDescendant (self, descendant):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _setWidget (self, widget):
      '''None'''
    ...
    def addChild (self, child):
      '''None'''
    ...
    def addChildWindow (self, childWindow, removeOnClose=False):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childWindows (self):
      '''None'''
    ...
    def close (self):
      '''None'''
    ...
    def closedSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getChild (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getFullScreen (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getIcon (self):
      '''None'''
    ...
    def getModal (self):
      '''None'''
    ...
    def getPosition (self):
      '''None'''
    ...
    def getResizeable (self):
      '''None'''
    ...
    def getSizeMode (self):
      '''None'''
    ...
    def getTitle (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def preCloseSignal (self):
      '''None'''
    ...
    def removeChild (self, child):
      '''None'''
    ...
    def resizeToFitChild (self, shrink=True, expand=True):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setChild (self, child):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setFullScreen (self, fullScreen):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setIcon (self, imageOrImageFileName):
      '''None'''
    ...
    def setModal (self, modal, parentWindow=None):
      '''None'''
    ...
    def setPosition (self, position, forcePosition=False):
      '''None'''
    ...
    def setResizeable (self, resizeable):
      '''None'''
    ...
    def setSizeMode (self, sizeMode):
      '''None'''
    ...
    def setTitle (self, title):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def waitForButton (self, parentWindow=None):
      '''None'''
    ...
    def waitForText (self, **kw):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def TextWidget (*args):
      '''

'''      
    ...

class TextWidget:
    def DisplayMode (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def _TextWidget__buttonPress (self, widget, event):
      '''None'''
    ...
    def _TextWidget__buttonRelease (self, widget, event):
      '''None'''
    ...
    def _TextWidget__editingFinished (self):
      '''None'''
    ...
    def _TextWidget__keyPress (self, widget, event):
      '''None'''
    ...
    def _TextWidget__keyRelease (self, widget, event):
      '''None'''
    ...
    def _TextWidget__returnPressed (self):
      '''None'''
    ...
    def _TextWidget__selectionChanged (self):
      '''None'''
    ...
    def _TextWidget__selectionPossiblyFinished (self):
      '''None'''
    ...
    def _TextWidget__startSelectionFinishedTimer (self):
      '''None'''
    ...
    def _TextWidget__textChanged (self, text):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _eventPosition (self, event):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def activatedSignal (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def clearUndo (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def editingFinishedSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getCharacterWidth (self):
      '''None'''
    ...
    def getCursorPosition (self):
      '''None'''
    ...
    def getDisplayMode (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEditable (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getErrored (self):
      '''None'''
    ...
    def getFixedCharacterWidth (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getPreferredCharacterWidth (self):
      '''None'''
    ...
    def getSelection (self):
      '''None'''
    ...
    def getText (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def grabFocus (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def selectingFinishedSignal (self):
      '''None'''
    ...
    def selectionChangedSignal (self):
      '''None'''
    ...
    def setCharacterWidth (self, numCharacters):
      '''None'''
    ...
    def setCursorPosition (self, position):
      '''None'''
    ...
    def setDisplayMode (self, displayMode):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEditable (self, editable):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setErrored (self, errored):
      '''None'''
    ...
    def setFixedCharacterWidth (self, numCharacters):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setPreferredCharacterWidth (self, numCharacters):
      '''None'''
    ...
    def setSelection (self, start, end):
      '''None'''
    ...
    def setText (self, text):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def textChangedSignal (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def TimeWarpUI (*args):
      '''

'''      
    ...

def Timeline (*args):
      '''

'''      
    ...

class Timeline:
    def Settings (name, script):
      '''None'''
    ...
    def _Editor__contextChanged (self, context, key):
      '''None'''
    ...
    def _Editor__enter (self, widget):
      '''None'''
    ...
    def _Editor__leave (self, widget):
      '''None'''
    ...
    def _Editor__namesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Editor__setContextInternal (self, context, callUpdate):
      '''None'''
    ...
    def _Timeline__incrementFrame (self, increment=1):
      '''None'''
    ...
    def _Timeline__playPause (self, forwards=True):
      '''None'''
    ...
    def _Timeline__playPauseClicked (self, button):
      '''None'''
    ...
    def _Timeline__playPausePressed (self, forwards=True):
      '''None'''
    ...
    def _Timeline__playbackFrameRangeChanged (self, playback):
      '''None'''
    ...
    def _Timeline__playbackStateChanged (self, playback):
      '''None'''
    ...
    def _Timeline__scriptNodePlugSet (self, plug):
      '''None'''
    ...
    def _Timeline__sliderRangeChanged (self, widget):
      '''None'''
    ...
    def _Timeline__startOrEndButtonClicked (self, button):
      '''None'''
    ...
    def _Timeline__valueChanged (self, widget, reason):
      '''None'''
    ...
    def _Timeline__visibilityButtonClicked (self, button):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _contextChangedConnection (self):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromContext (self, modifiedItems):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (name, scriptNode):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getTitle (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def instanceCreatedSignal ():
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def registerType (name, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def scriptNode (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setTitle (self, title):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def titleChangedSignal (self):
      '''None'''
    ...
    def types ():
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def Tool (*args):
      '''
__init__(_object*, GafferUI::View*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)

'''      
    ...

class Tool:
    def BinaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ErrorSignal (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def UnaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (Tool)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(GafferUI::Tool,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (Tool)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(GafferUI::Tool,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def create (self, *args, **kwargs):
      '''
create( (object)arg1, (View)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Tool> create(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,GafferUI::View {lvalue})'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def errorSignal (self, *args, **kwargs):
      '''
errorSignal( (Node)arg1) -> ErrorSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug const*, Gaffer::Plug const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} errorSignal(Gaffer::Node {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (Tool)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::Tool {lvalue},IECore::TypeId)

isInstanceOf( (Tool)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::Tool {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plugDirtiedSignal (self, *args, **kwargs):
      '''
plugDirtiedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugDirtiedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugInputChangedSignal (self, *args, **kwargs):
      '''
plugInputChangedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugInputChangedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugSetSignal (self, *args, **kwargs):
      '''
plugSetSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugSetSignal(Gaffer::Node {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerTool (self, *args, **kwargs):
      '''
registerTool( (object)arg1, (TypeId)arg2, (object)arg3) -> None :

    C++ signature :
        void registerTool(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,IECore::TypeId,boost::python::api::object)'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def registeredTools (self, *args, **kwargs):
      '''
registeredTools( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list registeredTools(IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def scriptNode (self, *args, **kwargs):
      '''
scriptNode( (Node)arg1) -> object :

    C++ signature :
        Gaffer::ScriptNode* scriptNode(Gaffer::Node {lvalue})'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (Tool)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(GafferUI::Tool {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (Tool)arg1) -> str :

    C++ signature :
        char const* typeName(GafferUI::Tool {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...
    def view (self, *args, **kwargs):
      '''
view( (Tool)arg1) -> object :

    C++ signature :
        GafferUI::View* view(GafferUI::Tool {lvalue})'''
    ...

def ToolContainer (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='ToolContainer')

'''      
    ...

class ToolContainer:
    def BinaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ErrorSignal (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def UnaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (ToolContainer)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::Container<Gaffer::Node, GafferUI::Tool>,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (ToolContainer)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::Container<Gaffer::Node, GafferUI::Tool>,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def errorSignal (self, *args, **kwargs):
      '''
errorSignal( (Node)arg1) -> ErrorSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug const*, Gaffer::Plug const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} errorSignal(Gaffer::Node {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (ToolContainer)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Container<Gaffer::Node, GafferUI::Tool> {lvalue},IECore::TypeId)

isInstanceOf( (ToolContainer)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Container<Gaffer::Node, GafferUI::Tool> {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plugDirtiedSignal (self, *args, **kwargs):
      '''
plugDirtiedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugDirtiedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugInputChangedSignal (self, *args, **kwargs):
      '''
plugInputChangedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugInputChangedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugSetSignal (self, *args, **kwargs):
      '''
plugSetSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugSetSignal(Gaffer::Node {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def scriptNode (self, *args, **kwargs):
      '''
scriptNode( (Node)arg1) -> object :

    C++ signature :
        Gaffer::ScriptNode* scriptNode(Gaffer::Node {lvalue})'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (ToolContainer)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::Container<Gaffer::Node, GafferUI::Tool> {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (ToolContainer)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::Container<Gaffer::Node, GafferUI::Tool> {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def ToolPlugValueWidget (*args):
      '''

'''      
    ...

class ToolPlugValueWidget:
    def MultiplePlugTypesError (self, *args, **kwargs):
      '''None'''
    ...
    def MultiplePlugsError (self, *args, **kwargs):
      '''None'''
    ...
    def MultipleWidgetCreatorsError (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__applyPreset (self, presetName, *unused):
      '''None'''
    ...
    def _PlugValueWidget__applyReadOnly (self, readOnly):
      '''None'''
    ...
    def _PlugValueWidget__applyUserDefaults (self):
      '''None'''
    ...
    def _PlugValueWidget__auxiliaryPlugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__buttonPress (self, widget, event, buttonMask):
      '''None'''
    ...
    def _PlugValueWidget__callLegacyUpdateMethods (self):
      '''None'''
    ...
    def _PlugValueWidget__callUpdateFromValues (self):
      '''None'''
    ...
    def _PlugValueWidget__contextChanged (self, context, key):
      '''None'''
    ...
    def _PlugValueWidget__contextMenu (self, *unused):
      '''None'''
    ...
    def _PlugValueWidget__copyValue (self):
      '''None'''
    ...
    def _PlugValueWidget__creator (plug, typeMetadata):
      '''None'''
    ...
    def _PlugValueWidget__defaultContext (graphComponent):
      '''None'''
    ...
    def _PlugValueWidget__dragEnter (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__dragLeave (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__drop (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__editInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__fallbackContext (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__nodeMetadataChanged (self, nodeTypeId, key, node):
      '''None'''
    ...
    def _PlugValueWidget__plugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugInputChanged (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugMetadataChanged (self, plug, key, reason):
      '''None'''
    ...
    def _PlugValueWidget__plugTypesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _PlugValueWidget__popupMenuSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__presetsSubMenu (self):
      '''None'''
    ...
    def _PlugValueWidget__removeInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__setPlugsInternal (self, plugs, callUpdateMethods):
      '''None'''
    ...
    def _PlugValueWidget__setValues (self, values):
      '''None'''
    ...
    def _PlugValueWidget__updateContextConnection (self):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackground (self, plugs, auxiliaryPlugs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPlug (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPostCall (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPreCall (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _addPopupMenu (self, widget=None, buttons=GafferUI._GafferUI.Buttons.Right):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _auxiliaryPlugs (self, plug):
      '''None'''
    ...
    def _blockedUpdateFromValues (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _convertValue (self, value):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _editable (self, canEditAnimation=False):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _plugConnections (self):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _popupMenuDefinition (self):
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _requestUpdateFromValues (self, lazy=True):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromEditable (self):
      '''None'''
    ...
    def _updateFromMetadata (self):
      '''None'''
    ...
    def _updateFromValues (self, values, exception):
      '''None'''
    ...
    def _valuesDependOnContext (self):
      '''None'''
    ...
    def _valuesForUpdate (plugs, auxiliaryPlugs):
      '''None'''
    ...
    def acquire (plug):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childPlugValueWidget (self, childPlug):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (plugs, typeMetadata='plugValueWidget:type'):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getPlug (self):
      '''None'''
    ...
    def getPlugs (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def hasLabel (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def popupMenuSignal ():
      '''None'''
    ...
    def registerType (plugClassOrTypeId, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setPlug (self, plug):
      '''None'''
    ...
    def setPlugs (self, plugs):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def ToolUI (*args):
      '''

'''      
    ...

def TranslateHandle (*args):
      '''
__init__(_object*, GafferUI::Style::Axes)

'''      
    ...

class TranslateHandle:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ButtonSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DirtyType (self, *args, **kwargs):
      '''None'''
    ...
    def DragBeginSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DragDropSignal (self, *args, **kwargs):
      '''None'''
    ...
    def EnterLeaveSignal (self, *args, **kwargs):
      '''None'''
    ...
    def IdleSignal (self, *args, **kwargs):
      '''None'''
    ...
    def KeySignal (self, *args, **kwargs):
      '''None'''
    ...
    def Layer (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def RenderReason (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def VisibilityChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _dirty (self, *args, **kwargs):
      '''
_dirty( (Gadget)arg1, (DirtyType)arg2) -> None :

    C++ signature :
        void _dirty(GafferUI::Gadget {lvalue},GafferUI::Gadget::DirtyType)'''
    ...
    def _idleSignalAccessedSignal (self, *args, **kwargs):
      '''
_idleSignalAccessedSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} _idleSignalAccessedSignal()'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (TranslateHandle)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(GafferUI::TranslateHandle,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (TranslateHandle)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(GafferUI::TranslateHandle,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def bound (self, *args, **kwargs):
      '''
bound( (TranslateHandle)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > bound(GafferUI::TranslateHandle)'''
    ...
    def buttonDoubleClickSignal (self, *args, **kwargs):
      '''
buttonDoubleClickSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonDoubleClickSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonPressSignal (self, *args, **kwargs):
      '''
buttonPressSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonReleaseSignal (self, *args, **kwargs):
      '''
buttonReleaseSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def dragBeginSignal (self, *args, **kwargs):
      '''
dragBeginSignal( (Gadget)arg1) -> DragBeginSignal :

    C++ signature :
        Gaffer::Signals::Signal<boost::intrusive_ptr<IECore::RunTimeTyped> (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<boost::intrusive_ptr<IECore::RunTimeTyped> > > {lvalue} dragBeginSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEndSignal (self, *args, **kwargs):
      '''
dragEndSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEndSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEnterSignal (self, *args, **kwargs):
      '''
dragEnterSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEnterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragLeaveSignal (self, *args, **kwargs):
      '''
dragLeaveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragLeaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragMoveSignal (self, *args, **kwargs):
      '''
dragMoveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dropSignal (self, *args, **kwargs):
      '''
dropSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dropSignal(GafferUI::Gadget {lvalue})'''
    ...
    def enabled (self, *args, **kwargs):
      '''
enabled( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool enabled(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def enterSignal (self, *args, **kwargs):
      '''
enterSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} enterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def fullTransform (self, *args, **kwargs):
      '''
fullTransform( (Gadget)arg1 [, (Gadget)arg2]) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> fullTransform(GafferUI::Gadget {lvalue} [,GafferUI::Gadget const*])'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getAxes (self, *args, **kwargs):
      '''
getAxes( (TranslateHandle)arg1) -> Axes :

    C++ signature :
        GafferUI::Style::Axes getAxes(GafferUI::TranslateHandle {lvalue})'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getEnabled (self, *args, **kwargs):
      '''
getEnabled( (Gadget)arg1) -> bool :

    C++ signature :
        bool getEnabled(GafferUI::Gadget {lvalue})'''
    ...
    def getHighlighted (self, *args, **kwargs):
      '''
getHighlighted( (Gadget)arg1) -> bool :

    C++ signature :
        bool getHighlighted(GafferUI::Gadget {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getRasterScale (self, *args, **kwargs):
      '''
getRasterScale( (Handle)arg1) -> float :

    C++ signature :
        float getRasterScale(GafferUI::Handle {lvalue})'''
    ...
    def getStyle (self, *args, **kwargs):
      '''
getStyle( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> getStyle(GafferUI::Gadget {lvalue})'''
    ...
    def getToolTip (self, *args, **kwargs):
      '''
getToolTip( (TranslateHandle)arg1, (LineSegment3f)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > getToolTip(GafferUI::TranslateHandle,IECore::LineSegment<Imath_3_1::Vec3<float> >)'''
    ...
    def getTransform (self, *args, **kwargs):
      '''
getTransform( (Gadget)arg1) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> getTransform(GafferUI::Gadget {lvalue})'''
    ...
    def getVisible (self, *args, **kwargs):
      '''
getVisible( (Gadget)arg1) -> bool :

    C++ signature :
        bool getVisible(GafferUI::Gadget {lvalue})'''
    ...
    def idleSignal (self, *args, **kwargs):
      '''
idleSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} idleSignal()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (TranslateHandle)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::TranslateHandle {lvalue},IECore::TypeId)

isInstanceOf( (TranslateHandle)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::TranslateHandle {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keyPressSignal (self, *args, **kwargs):
      '''
keyPressSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keyReleaseSignal (self, *args, **kwargs):
      '''
keyReleaseSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def leaveSignal (self, *args, **kwargs):
      '''
leaveSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} leaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def mouseMoveSignal (self, *args, **kwargs):
      '''
mouseMoveSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} mouseMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def setAxes (self, *args, **kwargs):
      '''
setAxes( (TranslateHandle)arg1, (Axes)arg2) -> None :

    C++ signature :
        void setAxes(GafferUI::TranslateHandle {lvalue},GafferUI::Style::Axes)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setEnabled (self, *args, **kwargs):
      '''
setEnabled( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnabled(GafferUI::Gadget {lvalue},bool)'''
    ...
    def setHighlighted (self, *args, **kwargs):
      '''
setHighlighted( (TranslateHandle)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHighlighted(GafferUI::TranslateHandle {lvalue},bool)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setRasterScale (self, *args, **kwargs):
      '''
setRasterScale( (Handle)arg1, (float)arg2) -> None :

    C++ signature :
        void setRasterScale(GafferUI::Handle {lvalue},float)'''
    ...
    def setStyle (self, *args, **kwargs):
      '''
setStyle( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setStyle(GafferUI::Gadget {lvalue},boost::intrusive_ptr<GafferUI::Style const>)'''
    ...
    def setToolTip (self, *args, **kwargs):
      '''
setToolTip( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setToolTip(GafferUI::Gadget {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def setTransform (self, *args, **kwargs):
      '''
setTransform( (Gadget)arg1, (M44f)arg2) -> None :

    C++ signature :
        void setTransform(GafferUI::Gadget {lvalue},Imath_3_1::Matrix44<float>)'''
    ...
    def setVisible (self, *args, **kwargs):
      '''
setVisible( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setVisible(GafferUI::Gadget {lvalue},bool)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def style (self, *args, **kwargs):
      '''
style( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> style(GafferUI::Gadget {lvalue})'''
    ...
    def transformedBound (self, *args, **kwargs):
      '''
transformedBound( (Gadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue})

transformedBound( (Gadget)arg1, (Gadget)arg2) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue},GafferUI::Gadget const*)'''
    ...
    def translation (self, *args, **kwargs):
      '''
translation( (TranslateHandle)arg1, (DragDropEvent)arg2) -> V3f :

    C++ signature :
        Imath_3_1::Vec3<float> translation(GafferUI::TranslateHandle {lvalue},GafferUI::DragDropEvent)'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (TranslateHandle)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(GafferUI::TranslateHandle {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (TranslateHandle)arg1) -> str :

    C++ signature :
        char const* typeName(GafferUI::TranslateHandle {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...
    def visibilityChangedSignal (self, *args, **kwargs):
      '''
visibilityChangedSignal( (Gadget)arg1) -> VisibilityChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} visibilityChangedSignal(GafferUI::Gadget {lvalue})'''
    ...
    def visible (self, *args, **kwargs):
      '''
visible( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool visible(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def wheelSignal (self, *args, **kwargs):
      '''
wheelSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} wheelSignal(GafferUI::Gadget {lvalue})'''
    ...

def TweakPlugValueWidget (*args):
      '''

'''      
    ...

class TweakPlugValueWidget:
    def MultiplePlugTypesError (self, *args, **kwargs):
      '''None'''
    ...
    def MultiplePlugsError (self, *args, **kwargs):
      '''None'''
    ...
    def MultipleWidgetCreatorsError (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__applyPreset (self, presetName, *unused):
      '''None'''
    ...
    def _PlugValueWidget__applyReadOnly (self, readOnly):
      '''None'''
    ...
    def _PlugValueWidget__applyUserDefaults (self):
      '''None'''
    ...
    def _PlugValueWidget__auxiliaryPlugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__buttonPress (self, widget, event, buttonMask):
      '''None'''
    ...
    def _PlugValueWidget__callLegacyUpdateMethods (self):
      '''None'''
    ...
    def _PlugValueWidget__callUpdateFromValues (self):
      '''None'''
    ...
    def _PlugValueWidget__contextChanged (self, context, key):
      '''None'''
    ...
    def _PlugValueWidget__contextMenu (self, *unused):
      '''None'''
    ...
    def _PlugValueWidget__copyValue (self):
      '''None'''
    ...
    def _PlugValueWidget__creator (plug, typeMetadata):
      '''None'''
    ...
    def _PlugValueWidget__defaultContext (graphComponent):
      '''None'''
    ...
    def _PlugValueWidget__dragEnter (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__dragLeave (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__drop (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__editInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__fallbackContext (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__nodeMetadataChanged (self, nodeTypeId, key, node):
      '''None'''
    ...
    def _PlugValueWidget__plugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugInputChanged (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugMetadataChanged (self, plug, key, reason):
      '''None'''
    ...
    def _PlugValueWidget__plugTypesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _PlugValueWidget__popupMenuSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__presetsSubMenu (self):
      '''None'''
    ...
    def _PlugValueWidget__removeInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__setPlugsInternal (self, plugs, callUpdateMethods):
      '''None'''
    ...
    def _PlugValueWidget__setValues (self, values):
      '''None'''
    ...
    def _PlugValueWidget__updateContextConnection (self):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackground (self, plugs, auxiliaryPlugs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPlug (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPostCall (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPreCall (self, *args, **kwargs):
      '''None'''
    ...
    def _TweakPlugValueWidget__childPlugs (plugs, childName):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _addPopupMenu (self, widget=None, buttons=GafferUI._GafferUI.Buttons.Right):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _auxiliaryPlugs (self, plug):
      '''None'''
    ...
    def _blockedUpdateFromValues (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _convertValue (self, value):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _editable (self, canEditAnimation=False):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _plugConnections (self):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _popupMenuDefinition (self):
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _requestUpdateFromValues (self, lazy=True):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromEditable (self):
      '''None'''
    ...
    def _updateFromMetadata (self):
      '''None'''
    ...
    def _updateFromValues (self, values, exception):
      '''None'''
    ...
    def _valuesDependOnContext (self):
      '''None'''
    ...
    def _valuesForUpdate (plugs, auxiliaryPlugs):
      '''None'''
    ...
    def acquire (plug):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childPlugValueWidget (self, childPlug):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (plugs, typeMetadata='plugValueWidget:type'):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getNameVisible (self):
      '''None'''
    ...
    def getPlug (self):
      '''None'''
    ...
    def getPlugs (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def hasLabel (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def popupMenuSignal ():
      '''None'''
    ...
    def registerType (plugClassOrTypeId, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setNameVisible (self, visible):
      '''None'''
    ...
    def setPlug (self, plug):
      '''None'''
    ...
    def setPlugs (self, plugs):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def UIEditor (*args):
      '''

'''      
    ...

class UIEditor:
    def Settings (name, script):
      '''None'''
    ...
    def _Editor__contextChanged (self, context, key):
      '''None'''
    ...
    def _Editor__enter (self, widget):
      '''None'''
    ...
    def _Editor__leave (self, widget):
      '''None'''
    ...
    def _Editor__namesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Editor__setContextInternal (self, context, callUpdate):
      '''None'''
    ...
    def _NodeSetEditor__dirtyTitle (self):
      '''None'''
    ...
    def _NodeSetEditor__lazyUpdate (self):
      '''None'''
    ...
    def _NodeSetEditor__membersChanged (self, set, member):
      '''None'''
    ...
    def _NodeSetEditor__nameChanged (self, node, oldName):
      '''None'''
    ...
    def _NodeSetEditor__setNodeSetInternal (self, nodeSet, callUpdateFromSet):
      '''None'''
    ...
    def _UIEditor__plugListingSelectionChanged (self, listing):
      '''None'''
    ...
    def _UIEditor__sectionEditorNameChanged (self, sectionEditor, oldName, newName):
      '''None'''
    ...
    def _UIEditor__setColor (menu, node):
      '''None'''
    ...
    def _UIEditor__setNameVisible (node, nameVisible):
      '''None'''
    ...
    def _UIEditor__updateFromSetInternal (self, lazy=True):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _contextChangedConnection (self):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _doPendingUpdate (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _lastAddedNode (self):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _titleFormat (self, _prefix=None, _maxNodes=2, _reverseNodes=False, _ellipsis=True):
      '''None'''
    ...
    def _updateFromContext (self, modifiedItems):
      '''None'''
    ...
    def _updateFromSet (self):
      '''None'''
    ...
    def acquire (node, floating=None):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def appendNodeContextMenuDefinitions (graphEditor, node, menuDefinition):
      '''None'''
    ...
    def appendNodeEditorToolMenuDefinitions (nodeEditor, node, menuDefinition):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (name, scriptNode):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getNodeSet (self):
      '''None'''
    ...
    def getSelection (self):
      '''None'''
    ...
    def getTitle (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def instanceCreatedSignal ():
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def nodeEditor (self):
      '''None'''
    ...
    def nodeSetChangedSignal (self):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def plugEditor (self):
      '''None'''
    ...
    def registerPlugValueWidget (label, plugType, metadata):
      '''None'''
    ...
    def registerType (name, creator):
      '''None'''
    ...
    def registerWidgetMetadata (label, plugValueWidgetType, key, defaultValue):
      '''None'''
    ...
    def registerWidgetSetting (label, plugValueWidgetType, widgetCreator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def scriptNode (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setNodeSet (self, nodeSet):
      '''None'''
    ...
    def setSelection (self, selection):
      '''None'''
    ...
    def setTitle (self, title):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def titleChangedSignal (self):
      '''None'''
    ...
    def types ():
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def UserPlugs (*args):
      '''

'''      
    ...

def VectorDataPlugValueWidget (*args):
      '''

'''      
    ...

class VectorDataPlugValueWidget:
    def MultiplePlugTypesError (self, *args, **kwargs):
      '''None'''
    ...
    def MultiplePlugsError (self, *args, **kwargs):
      '''None'''
    ...
    def MultipleWidgetCreatorsError (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__applyPreset (self, presetName, *unused):
      '''None'''
    ...
    def _PlugValueWidget__applyReadOnly (self, readOnly):
      '''None'''
    ...
    def _PlugValueWidget__applyUserDefaults (self):
      '''None'''
    ...
    def _PlugValueWidget__auxiliaryPlugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__buttonPress (self, widget, event, buttonMask):
      '''None'''
    ...
    def _PlugValueWidget__callLegacyUpdateMethods (self):
      '''None'''
    ...
    def _PlugValueWidget__callUpdateFromValues (self):
      '''None'''
    ...
    def _PlugValueWidget__contextChanged (self, context, key):
      '''None'''
    ...
    def _PlugValueWidget__contextMenu (self, *unused):
      '''None'''
    ...
    def _PlugValueWidget__copyValue (self):
      '''None'''
    ...
    def _PlugValueWidget__creator (plug, typeMetadata):
      '''None'''
    ...
    def _PlugValueWidget__defaultContext (graphComponent):
      '''None'''
    ...
    def _PlugValueWidget__dragEnter (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__dragLeave (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__drop (self, widget, event):
      '''None'''
    ...
    def _PlugValueWidget__editInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__fallbackContext (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__nodeMetadataChanged (self, nodeTypeId, key, node):
      '''None'''
    ...
    def _PlugValueWidget__plugDirtied (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugInputChanged (self, plug):
      '''None'''
    ...
    def _PlugValueWidget__plugMetadataChanged (self, plug, key, reason):
      '''None'''
    ...
    def _PlugValueWidget__plugTypesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _PlugValueWidget__popupMenuSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__presetsSubMenu (self):
      '''None'''
    ...
    def _PlugValueWidget__removeInputs (self):
      '''None'''
    ...
    def _PlugValueWidget__setPlugsInternal (self, plugs, callUpdateMethods):
      '''None'''
    ...
    def _PlugValueWidget__setValues (self, values):
      '''None'''
    ...
    def _PlugValueWidget__updateContextConnection (self):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackground (self, plugs, auxiliaryPlugs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPlug (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPostCall (self, *args, **kwargs):
      '''None'''
    ...
    def _PlugValueWidget__updateFromValuesInBackgroundPreCall (self, *args, **kwargs):
      '''None'''
    ...
    def _VectorDataPlugValueWidget__dataChanged (self, widget):
      '''None'''
    ...
    def _VectorDataPlugValueWidget__dataPlugs (self):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _addPopupMenu (self, widget=None, buttons=GafferUI._GafferUI.Buttons.Right):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _auxiliaryPlugs (self, plug):
      '''None'''
    ...
    def _blockedUpdateFromValues (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _convertValue (self, value):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _editable (self, canEditAnimation=False):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _plugConnections (self):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _popupMenuDefinition (self):
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _requestUpdateFromValues (self, lazy=True):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _updateFromEditable (self):
      '''None'''
    ...
    def _updateFromMetadata (self):
      '''None'''
    ...
    def _updateFromValues (self, values, exception):
      '''None'''
    ...
    def _valuesDependOnContext (self):
      '''None'''
    ...
    def _valuesForUpdate (plugs, auxiliaryPlugs):
      '''None'''
    ...
    def acquire (plug):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childPlugValueWidget (self, childPlug):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (plugs, typeMetadata='plugValueWidget:type'):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getPlug (self):
      '''None'''
    ...
    def getPlugs (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def hasLabel (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def popupMenuSignal ():
      '''None'''
    ...
    def registerType (plugClassOrTypeId, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setPlug (self, plug):
      '''None'''
    ...
    def setPlugs (self, plugs):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def vectorDataWidget (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def VectorDataWidget (*args):
      '''

'''      
    ...

class VectorDataWidget:
    def _VectorDataWidget__addRows (self, button):
      '''None'''
    ...
    def _VectorDataWidget__buttonPress (self, widget, event):
      '''None'''
    ...
    def _VectorDataWidget__buttonRelease (self, widget, event):
      '''None'''
    ...
    def _VectorDataWidget__clearSelection (self):
      '''None'''
    ...
    def _VectorDataWidget__contextMenu (self, pos):
      '''None'''
    ...
    def _VectorDataWidget__dragBegin (self, widget, event):
      '''None'''
    ...
    def _VectorDataWidget__dragEnd (self, widget, event):
      '''None'''
    ...
    def _VectorDataWidget__dragEnter (self, widget, event):
      '''None'''
    ...
    def _VectorDataWidget__dragLeave (self, widget, event):
      '''None'''
    ...
    def _VectorDataWidget__drop (self, widget, event):
      '''None'''
    ...
    def _VectorDataWidget__emitButtonPress (self, event):
      '''None'''
    ...
    def _VectorDataWidget__emitDataChangedSignal (self, *unusedArgs):
      '''None'''
    ...
    def _VectorDataWidget__keyPress (self, widget, event):
      '''None'''
    ...
    def _VectorDataWidget__modelDataChanged (self, topLeft, bottomRight, roles):
      '''None'''
    ...
    def _VectorDataWidget__mouseMove (self, widget, event):
      '''None'''
    ...
    def _VectorDataWidget__removeRows (self, rows):
      '''None'''
    ...
    def _VectorDataWidget__removeSelection (self, button):
      '''None'''
    ...
    def _VectorDataWidget__selectAll (self):
      '''None'''
    ...
    def _VectorDataWidget__selectedRows (self):
      '''None'''
    ...
    def _VectorDataWidget__selectionChanged (self, *unused):
      '''None'''
    ...
    def _VectorDataWidget__updateRemoveButtonEnabled (self):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _contextMenuDefinition (self, selectedRows):
      '''None'''
    ...
    def _createRows (self):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def addButton (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def columnToDataIndex (self, columnIndex):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def dataChangedSignal (self):
      '''None'''
    ...
    def dataMenuSignal (self):
      '''None'''
    ...
    def dataToColumnIndex (self, dataIndex, componentIndex):
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def editSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getColumnEditable (self, columnIndex):
      '''None'''
    ...
    def getColumnVisible (self, columnIndex):
      '''None'''
    ...
    def getData (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getDragPointer (self):
      '''None'''
    ...
    def getEditable (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getErrored (self):
      '''None'''
    ...
    def getHeader (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getSizeEditable (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getToolTips (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def indexAt (self, position):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def removeButton (self):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def selectedIndices (self):
      '''None'''
    ...
    def setColumnEditable (self, columnIndex, editable):
      '''None'''
    ...
    def setColumnVisible (self, columnIndex, visible):
      '''None'''
    ...
    def setData (self, data):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setDragPointer (self, dragPointer):
      '''None'''
    ...
    def setEditable (self, editable):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setErrored (self, errored):
      '''None'''
    ...
    def setHeader (self, header):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setSizeEditable (self, sizeEditable):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setToolTips (self, toolTips):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

class VerticalAlignment:
    def Bottom (self, *args, **kwargs):
      '''An enumeration.'''
    ...
    def Center (self, *args, **kwargs):
      '''An enumeration.'''
    ...
    def None_ (self, *args, **kwargs):
      '''An enumeration.'''
    ...
    def Top (self, *args, **kwargs):
      '''An enumeration.'''
    ...
    def name (self, *args, **kwargs):
      '''The name of the Enum member.'''
    ...
    def value (self, *args, **kwargs):
      '''The value of the Enum member.'''
    ...

def View (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::intrusive_ptr<Gaffer::Plug>)

'''      
    ...

class View:
    def BinaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def DisplayTransform (self, *args, **kwargs):
      '''None'''
    ...
    def ErrorSignal (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def UnaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def _getPreprocessor (self, *args, **kwargs):
      '''
_getPreprocessor( (View)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> _getPreprocessor(GafferUI::View {lvalue})'''
    ...
    def _setPreprocessor (self, *args, **kwargs):
      '''
_setPreprocessor( (View)arg1, (object)arg2) -> None :

    C++ signature :
        void _setPreprocessor(GafferUI::View {lvalue},boost::intrusive_ptr<Gaffer::Node>)'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (View)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(GafferUI::View,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (View)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(GafferUI::View,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def contextChangedSignal (self, *args, **kwargs):
      '''
contextChangedSignal( (View)arg1) -> UnarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} contextChangedSignal(GafferUI::View {lvalue})'''
    ...
    def create (self, *args, **kwargs):
      '''
create( (object)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::View> create(boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def editScope (self, *args, **kwargs):
      '''
editScope( (View)arg1) -> object :

    C++ signature :
        Gaffer::EditScope* editScope(GafferUI::View {lvalue})'''
    ...
    def errorSignal (self, *args, **kwargs):
      '''
errorSignal( (Node)arg1) -> ErrorSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug const*, Gaffer::Plug const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} errorSignal(Gaffer::Node {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getContext (self, *args, **kwargs):
      '''
getContext( (View)arg1) -> object :

    C++ signature :
        Gaffer::Context* getContext(GafferUI::View {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (View)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::View {lvalue},IECore::TypeId)

isInstanceOf( (View)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::View {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plugDirtiedSignal (self, *args, **kwargs):
      '''
plugDirtiedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugDirtiedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugInputChangedSignal (self, *args, **kwargs):
      '''
plugInputChangedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugInputChangedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugSetSignal (self, *args, **kwargs):
      '''
plugSetSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugSetSignal(Gaffer::Node {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def registerView (self, *args, **kwargs):
      '''
registerView( (TypeId)arg1, (object)arg2) -> None :

    C++ signature :
        void registerView(IECore::TypeId,boost::python::api::object)

registerView( (TypeId)arg1, (object)arg2, (object)arg3) -> None :

    C++ signature :
        void registerView(IECore::TypeId,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,boost::python::api::object)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def scriptNode (self, *args, **kwargs):
      '''
scriptNode( (Node)arg1) -> object :

    C++ signature :
        Gaffer::ScriptNode* scriptNode(Gaffer::Node {lvalue})'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setContext (self, *args, **kwargs):
      '''
setContext( (View)arg1, (object)arg2) -> None :

    C++ signature :
        void setContext(GafferUI::View {lvalue},boost::intrusive_ptr<Gaffer::Context>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (View)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(GafferUI::View {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (View)arg1) -> str :

    C++ signature :
        char const* typeName(GafferUI::View {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...
    def viewportGadget (self, *args, **kwargs):
      '''
viewportGadget( (View)arg1) -> object :

    C++ signature :
        GafferUI::ViewportGadget* viewportGadget(GafferUI::View {lvalue})'''
    ...

def ViewUI (*args):
      '''

'''      
    ...

def Viewer (*args):
      '''

'''      
    ...

class Viewer:
    def Settings (name, script):
      '''None'''
    ...
    def _Editor__contextChanged (self, context, key):
      '''None'''
    ...
    def _Editor__enter (self, widget):
      '''None'''
    ...
    def _Editor__leave (self, widget):
      '''None'''
    ...
    def _Editor__namesToCreators (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Editor__setContextInternal (self, context, callUpdate):
      '''None'''
    ...
    def _NodeSetEditor__dirtyTitle (self):
      '''None'''
    ...
    def _NodeSetEditor__lazyUpdate (self):
      '''None'''
    ...
    def _NodeSetEditor__membersChanged (self, set, member):
      '''None'''
    ...
    def _NodeSetEditor__nameChanged (self, node, oldName):
      '''None'''
    ...
    def _NodeSetEditor__setNodeSetInternal (self, nodeSet, callUpdateFromSet):
      '''None'''
    ...
    def _Viewer__contextMenu (self, widget):
      '''None'''
    ...
    def _Viewer__keyPress (self, widget, event):
      '''None'''
    ...
    def _Viewer__primaryToolChanged (self, *unused):
      '''None'''
    ...
    def _Viewer__updateViewportMessage (self, unused=None):
      '''None'''
    ...
    def _Viewer__viewContextMenuSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _contextChangedConnection (self):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _doPendingUpdate (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _lastAddedNode (self):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def _titleFormat (self):
      '''None'''
    ...
    def _updateFromContext (self, modifiedItems):
      '''None'''
    ...
    def _updateFromSet (self):
      '''None'''
    ...
    def acquire (node, floating=None):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def create (name, scriptNode):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getContext (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getNodeSet (self):
      '''None'''
    ...
    def getTitle (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def instanceCreatedSignal ():
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def nodeSetChangedSignal (self):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def registerType (name, creator):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def scriptNode (self):
      '''None'''
    ...
    def setContext (self, context):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setNodeSet (self, nodeSet):
      '''None'''
    ...
    def setTitle (self, title):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def titleChangedSignal (self):
      '''None'''
    ...
    def types ():
      '''None'''
    ...
    def view (self):
      '''None'''
    ...
    def viewContextMenuSignal ():
      '''None'''
    ...
    def viewGadgetWidget (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def ViewportGadget (*args):
      '''
__init__(_object*, boost::intrusive_ptr<GafferUI::Gadget>)
__init__(_object*)

'''      
    ...

class ViewportGadget:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ButtonSignal (self, *args, **kwargs):
      '''None'''
    ...
    def CameraFlags (self, *args, **kwargs):
      '''None'''
    ...
    def DirtyType (self, *args, **kwargs):
      '''None'''
    ...
    def DragBeginSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DragDropSignal (self, *args, **kwargs):
      '''None'''
    ...
    def DragTracking (self, *args, **kwargs):
      '''None'''
    ...
    def EnterLeaveSignal (self, *args, **kwargs):
      '''None'''
    ...
    def IdleSignal (self, *args, **kwargs):
      '''None'''
    ...
    def KeySignal (self, *args, **kwargs):
      '''None'''
    ...
    def Layer (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RasterScope (self, *args, **kwargs):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def RenderReason (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def VisibilityChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _dirty (self, *args, **kwargs):
      '''
_dirty( (Gadget)arg1, (DirtyType)arg2) -> None :

    C++ signature :
        void _dirty(GafferUI::Gadget {lvalue},GafferUI::Gadget::DirtyType)'''
    ...
    def _idleSignalAccessedSignal (self, *args, **kwargs):
      '''
_idleSignalAccessedSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} _idleSignalAccessedSignal()'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (ViewportGadget)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(GafferUI::ViewportGadget,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (ViewportGadget)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(GafferUI::ViewportGadget,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def bound (self, *args, **kwargs):
      '''
bound( (ViewportGadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > bound(GafferUI::ViewportGadget)'''
    ...
    def buttonDoubleClickSignal (self, *args, **kwargs):
      '''
buttonDoubleClickSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonDoubleClickSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonPressSignal (self, *args, **kwargs):
      '''
buttonPressSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def buttonReleaseSignal (self, *args, **kwargs):
      '''
buttonReleaseSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} buttonReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def cameraChangedSignal (self, *args, **kwargs):
      '''
cameraChangedSignal( (ViewportGadget)arg1) -> UnarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::ViewportGadget*, GafferUI::ViewportGadget::CameraFlags), Gaffer::Signals::CatchingCombiner<void> > {lvalue} cameraChangedSignal(GafferUI::ViewportGadget {lvalue})'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def dragBeginSignal (self, *args, **kwargs):
      '''
dragBeginSignal( (Gadget)arg1) -> DragBeginSignal :

    C++ signature :
        Gaffer::Signals::Signal<boost::intrusive_ptr<IECore::RunTimeTyped> (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<boost::intrusive_ptr<IECore::RunTimeTyped> > > {lvalue} dragBeginSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEndSignal (self, *args, **kwargs):
      '''
dragEndSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEndSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragEnterSignal (self, *args, **kwargs):
      '''
dragEnterSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragEnterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragLeaveSignal (self, *args, **kwargs):
      '''
dragLeaveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragLeaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dragMoveSignal (self, *args, **kwargs):
      '''
dragMoveSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dragMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def dropSignal (self, *args, **kwargs):
      '''
dropSignal( (Gadget)arg1) -> DragDropSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::DragDropEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} dropSignal(GafferUI::Gadget {lvalue})'''
    ...
    def enabled (self, *args, **kwargs):
      '''
enabled( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool enabled(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def enterSignal (self, *args, **kwargs):
      '''
enterSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} enterSignal(GafferUI::Gadget {lvalue})'''
    ...
    def fitClippingPlanes (self, *args, **kwargs):
      '''
fitClippingPlanes( (ViewportGadget)arg1, (Box3f)arg2) -> None :

    C++ signature :
        void fitClippingPlanes(GafferUI::ViewportGadget {lvalue},Imath_3_1::Box<Imath_3_1::Vec3<float> >)'''
    ...
    def frame (self, *args, **kwargs):
      '''
frame( (ViewportGadget)arg1, (Box3f)arg2) -> None :

    C++ signature :
        void frame(GafferUI::ViewportGadget {lvalue},Imath_3_1::Box<Imath_3_1::Vec3<float> >)

frame( (ViewportGadget)arg1, (Box3f)box, (V3f)viewDirection [, (V3f)upVector=V3f(0, 1, 0)]) -> None :

    C++ signature :
        void frame(GafferUI::ViewportGadget {lvalue},Imath_3_1::Box<Imath_3_1::Vec3<float> >,Imath_3_1::Vec3<float> [,Imath_3_1::Vec3<float> {lvalue}=V3f(0, 1, 0)])'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def fullTransform (self, *args, **kwargs):
      '''
fullTransform( (Gadget)arg1 [, (Gadget)arg2]) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> fullTransform(GafferUI::Gadget {lvalue} [,GafferUI::Gadget const*])'''
    ...
    def gadgetToRasterSpace (self, *args, **kwargs):
      '''
gadgetToRasterSpace( (ViewportGadget)arg1, (V3f)gadgetPosition, (Gadget)gadget) -> V2f :

    C++ signature :
        Imath_3_1::Vec2<float> gadgetToRasterSpace(GafferUI::ViewportGadget {lvalue},Imath_3_1::Vec3<float>,GafferUI::Gadget const*)'''
    ...
    def gadgetsAt (self, *args, **kwargs):
      '''
gadgetsAt( (ViewportGadget)arg1, (V2f)arg2) -> list :

    C++ signature :
        boost::python::list gadgetsAt(GafferUI::ViewportGadget {lvalue},Imath_3_1::Vec2<float>)

gadgetsAt( (ViewportGadget)arg1, (Box2f)rasterRegion [, (Layer)filterLayer=GafferUI._GafferUI.Layer(0)]) -> list :

    C++ signature :
        boost::python::list gadgetsAt(GafferUI::ViewportGadget {lvalue},Imath_3_1::Box<Imath_3_1::Vec2<float> > [,GafferUI::Gadget::Layer=GafferUI._GafferUI.Layer(0)])'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCamera (self, *args, **kwargs):
      '''
getCamera( (ViewportGadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<IECoreScene::Camera> getCamera(GafferUI::ViewportGadget)'''
    ...
    def getCameraEditable (self, *args, **kwargs):
      '''
getCameraEditable( (ViewportGadget)arg1) -> bool :

    C++ signature :
        bool getCameraEditable(GafferUI::ViewportGadget {lvalue})'''
    ...
    def getCameraTransform (self, *args, **kwargs):
      '''
getCameraTransform( (ViewportGadget)arg1) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> getCameraTransform(GafferUI::ViewportGadget {lvalue})'''
    ...
    def getCenterOfInterest (self, *args, **kwargs):
      '''
getCenterOfInterest( (ViewportGadget)arg1) -> float :

    C++ signature :
        float getCenterOfInterest(GafferUI::ViewportGadget {lvalue})'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getDollyingEnabled (self, *args, **kwargs):
      '''
getDollyingEnabled( (ViewportGadget)arg1) -> bool :

    C++ signature :
        bool getDollyingEnabled(GafferUI::ViewportGadget {lvalue})'''
    ...
    def getDragTracking (self, *args, **kwargs):
      '''
getDragTracking( (ViewportGadget)arg1) -> int :

    C++ signature :
        unsigned int getDragTracking(GafferUI::ViewportGadget {lvalue})'''
    ...
    def getEnabled (self, *args, **kwargs):
      '''
getEnabled( (Gadget)arg1) -> bool :

    C++ signature :
        bool getEnabled(GafferUI::Gadget {lvalue})'''
    ...
    def getHighlighted (self, *args, **kwargs):
      '''
getHighlighted( (Gadget)arg1) -> bool :

    C++ signature :
        bool getHighlighted(GafferUI::Gadget {lvalue})'''
    ...
    def getMaxPlanarZoom (self, *args, **kwargs):
      '''
getMaxPlanarZoom( (ViewportGadget)arg1) -> V2f :

    C++ signature :
        Imath_3_1::Vec2<float> getMaxPlanarZoom(GafferUI::ViewportGadget {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getPlanarMovement (self, *args, **kwargs):
      '''
getPlanarMovement( (ViewportGadget)arg1) -> bool :

    C++ signature :
        bool getPlanarMovement(GafferUI::ViewportGadget {lvalue})'''
    ...
    def getPostProcessShader (self, *args, **kwargs):
      '''
getPostProcessShader( (ViewportGadget)arg1, (Layer)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<IECoreGL::Shader::Setup const> getPostProcessShader(GafferUI::ViewportGadget {lvalue},GafferUI::Gadget::Layer)'''
    ...
    def getPreciseMotionAllowed (self, *args, **kwargs):
      '''
getPreciseMotionAllowed( (ViewportGadget)arg1) -> bool :

    C++ signature :
        bool getPreciseMotionAllowed(GafferUI::ViewportGadget {lvalue})'''
    ...
    def getPrimaryChild (self, *args, **kwargs):
      '''
getPrimaryChild( (ViewportGadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Gadget> getPrimaryChild(GafferUI::ViewportGadget {lvalue})'''
    ...
    def getStyle (self, *args, **kwargs):
      '''
getStyle( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> getStyle(GafferUI::Gadget {lvalue})'''
    ...
    def getToolTip (self, *args, **kwargs):
      '''
getToolTip( (ViewportGadget)arg1, (LineSegment3f)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > getToolTip(GafferUI::ViewportGadget,IECore::LineSegment<Imath_3_1::Vec3<float> >)'''
    ...
    def getTransform (self, *args, **kwargs):
      '''
getTransform( (Gadget)arg1) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> getTransform(GafferUI::Gadget {lvalue})'''
    ...
    def getTumblingEnabled (self, *args, **kwargs):
      '''
getTumblingEnabled( (ViewportGadget)arg1) -> bool :

    C++ signature :
        bool getTumblingEnabled(GafferUI::ViewportGadget {lvalue})'''
    ...
    def getVariableAspectZoom (self, *args, **kwargs):
      '''
getVariableAspectZoom( (ViewportGadget)arg1) -> bool :

    C++ signature :
        bool getVariableAspectZoom(GafferUI::ViewportGadget {lvalue})'''
    ...
    def getViewport (self, *args, **kwargs):
      '''
getViewport( (ViewportGadget)arg1) -> V2i :

    C++ signature :
        Imath_3_1::Vec2<int> getViewport(GafferUI::ViewportGadget {lvalue})'''
    ...
    def getVisible (self, *args, **kwargs):
      '''
getVisible( (Gadget)arg1) -> bool :

    C++ signature :
        bool getVisible(GafferUI::Gadget {lvalue})'''
    ...
    def idleSignal (self, *args, **kwargs):
      '''
idleSignal() -> IdleSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (), Gaffer::Signals::CatchingCombiner<void> > {lvalue} idleSignal()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (ViewportGadget)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::ViewportGadget {lvalue},IECore::TypeId)

isInstanceOf( (ViewportGadget)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(GafferUI::ViewportGadget {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keyPressSignal (self, *args, **kwargs):
      '''
keyPressSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyPressSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keyReleaseSignal (self, *args, **kwargs):
      '''
keyReleaseSignal( (Gadget)arg1) -> KeySignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::KeyEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} keyReleaseSignal(GafferUI::Gadget {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def leaveSignal (self, *args, **kwargs):
      '''
leaveSignal( (Gadget)arg1) -> EnterLeaveSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*, GafferUI::ButtonEvent const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} leaveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def mouseMoveSignal (self, *args, **kwargs):
      '''
mouseMoveSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} mouseMoveSignal(GafferUI::Gadget {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def preRenderSignal (self, *args, **kwargs):
      '''
preRenderSignal( (ViewportGadget)arg1) -> UnarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::ViewportGadget*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} preRenderSignal(GafferUI::ViewportGadget {lvalue})'''
    ...
    def rasterToGadgetSpace (self, *args, **kwargs):
      '''
rasterToGadgetSpace( (ViewportGadget)arg1, (V2f)rasterPosition, (Gadget)gadget) -> LineSegment3f :

    C++ signature :
        IECore::LineSegment<Imath_3_1::Vec3<float> > rasterToGadgetSpace(GafferUI::ViewportGadget {lvalue},Imath_3_1::Vec2<float>,GafferUI::Gadget const*)'''
    ...
    def rasterToWorldSpace (self, *args, **kwargs):
      '''
rasterToWorldSpace( (ViewportGadget)arg1, (V2f)rasterPosition) -> LineSegment3f :

    C++ signature :
        IECore::LineSegment<Imath_3_1::Vec3<float> > rasterToWorldSpace(GafferUI::ViewportGadget {lvalue},Imath_3_1::Vec2<float>)'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def render (self, *args, **kwargs):
      '''
render( (ViewportGadget)arg1) -> None :

    C++ signature :
        void render(GafferUI::ViewportGadget)'''
    ...
    def renderRequestSignal (self, *args, **kwargs):
      '''
renderRequestSignal( (ViewportGadget)arg1) -> UnarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::ViewportGadget*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} renderRequestSignal(GafferUI::ViewportGadget {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def setCamera (self, *args, **kwargs):
      '''
setCamera( (ViewportGadget)arg1, (Camera)arg2) -> None :

    C++ signature :
        void setCamera(GafferUI::ViewportGadget {lvalue},IECoreScene::Camera {lvalue})'''
    ...
    def setCameraEditable (self, *args, **kwargs):
      '''
setCameraEditable( (ViewportGadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setCameraEditable(GafferUI::ViewportGadget {lvalue},bool)'''
    ...
    def setCameraTransform (self, *args, **kwargs):
      '''
setCameraTransform( (ViewportGadget)arg1, (M44f)arg2) -> None :

    C++ signature :
        void setCameraTransform(GafferUI::ViewportGadget {lvalue},Imath_3_1::Matrix44<float>)'''
    ...
    def setCenterOfInterest (self, *args, **kwargs):
      '''
setCenterOfInterest( (ViewportGadget)arg1, (float)arg2) -> None :

    C++ signature :
        void setCenterOfInterest(GafferUI::ViewportGadget {lvalue},float)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setDollyingEnabled (self, *args, **kwargs):
      '''
setDollyingEnabled( (ViewportGadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setDollyingEnabled(GafferUI::ViewportGadget {lvalue},bool)'''
    ...
    def setDragTracking (self, *args, **kwargs):
      '''
setDragTracking( (ViewportGadget)arg1, (int)arg2) -> None :

    C++ signature :
        void setDragTracking(GafferUI::ViewportGadget {lvalue},unsigned int)'''
    ...
    def setEnabled (self, *args, **kwargs):
      '''
setEnabled( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnabled(GafferUI::Gadget {lvalue},bool)'''
    ...
    def setHighlighted (self, *args, **kwargs):
      '''
setHighlighted( (ViewportGadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setHighlighted(GafferUI::ViewportGadget {lvalue},bool)'''
    ...
    def setMaxPlanarZoom (self, *args, **kwargs):
      '''
setMaxPlanarZoom( (ViewportGadget)arg1, (V2f)arg2) -> None :

    C++ signature :
        void setMaxPlanarZoom(GafferUI::ViewportGadget {lvalue},Imath_3_1::Vec2<float>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setPlanarMovement (self, *args, **kwargs):
      '''
setPlanarMovement( (ViewportGadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPlanarMovement(GafferUI::ViewportGadget {lvalue},bool)'''
    ...
    def setPostProcessShader (self, *args, **kwargs):
      '''
setPostProcessShader( (ViewportGadget)arg1, (Layer)arg2, (object)arg3) -> None :

    C++ signature :
        void setPostProcessShader(GafferUI::ViewportGadget {lvalue},GafferUI::Gadget::Layer,boost::intrusive_ptr<IECoreGL::Shader::Setup const>)'''
    ...
    def setPreciseMotionAllowed (self, *args, **kwargs):
      '''
setPreciseMotionAllowed( (ViewportGadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setPreciseMotionAllowed(GafferUI::ViewportGadget {lvalue},bool)'''
    ...
    def setPrimaryChild (self, *args, **kwargs):
      '''
setPrimaryChild( (ViewportGadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setPrimaryChild(GafferUI::ViewportGadget {lvalue},boost::intrusive_ptr<GafferUI::Gadget>)'''
    ...
    def setStyle (self, *args, **kwargs):
      '''
setStyle( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setStyle(GafferUI::Gadget {lvalue},boost::intrusive_ptr<GafferUI::Style const>)'''
    ...
    def setToolTip (self, *args, **kwargs):
      '''
setToolTip( (Gadget)arg1, (object)arg2) -> None :

    C++ signature :
        void setToolTip(GafferUI::Gadget {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def setTransform (self, *args, **kwargs):
      '''
setTransform( (Gadget)arg1, (M44f)arg2) -> None :

    C++ signature :
        void setTransform(GafferUI::Gadget {lvalue},Imath_3_1::Matrix44<float>)'''
    ...
    def setTumblingEnabled (self, *args, **kwargs):
      '''
setTumblingEnabled( (ViewportGadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setTumblingEnabled(GafferUI::ViewportGadget {lvalue},bool)'''
    ...
    def setVariableAspectZoom (self, *args, **kwargs):
      '''
setVariableAspectZoom( (ViewportGadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setVariableAspectZoom(GafferUI::ViewportGadget {lvalue},bool)'''
    ...
    def setViewport (self, *args, **kwargs):
      '''
setViewport( (ViewportGadget)arg1, (V2i)arg2) -> None :

    C++ signature :
        void setViewport(GafferUI::ViewportGadget {lvalue},Imath_3_1::Vec2<int>)'''
    ...
    def setVisible (self, *args, **kwargs):
      '''
setVisible( (Gadget)arg1, (bool)arg2) -> None :

    C++ signature :
        void setVisible(GafferUI::Gadget {lvalue},bool)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def style (self, *args, **kwargs):
      '''
style( (Gadget)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<GafferUI::Style> style(GafferUI::Gadget {lvalue})'''
    ...
    def transformedBound (self, *args, **kwargs):
      '''
transformedBound( (Gadget)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue})

transformedBound( (Gadget)arg1, (Gadget)arg2) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > transformedBound(GafferUI::Gadget {lvalue},GafferUI::Gadget const*)'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (ViewportGadget)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(GafferUI::ViewportGadget {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (ViewportGadget)arg1) -> str :

    C++ signature :
        char const* typeName(GafferUI::ViewportGadget {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...
    def viewportChangedSignal (self, *args, **kwargs):
      '''
viewportChangedSignal( (ViewportGadget)arg1) -> UnarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::ViewportGadget*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} viewportChangedSignal(GafferUI::ViewportGadget {lvalue})'''
    ...
    def visibilityChangedSignal (self, *args, **kwargs):
      '''
visibilityChangedSignal( (Gadget)arg1) -> VisibilityChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (GafferUI::Gadget*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} visibilityChangedSignal(GafferUI::Gadget {lvalue})'''
    ...
    def visible (self, *args, **kwargs):
      '''
visible( (Gadget)arg1 [, (Gadget)relativeTo=None]) -> bool :

    C++ signature :
        bool visible(GafferUI::Gadget {lvalue} [,GafferUI::Gadget*=None])'''
    ...
    def wheelSignal (self, *args, **kwargs):
      '''
wheelSignal( (Gadget)arg1) -> ButtonSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (GafferUI::Gadget*, GafferUI::ButtonEvent const&), GafferUI::EventSignalCombiner<bool> > {lvalue} wheelSignal(GafferUI::Gadget {lvalue})'''
    ...
    def worldToRasterSpace (self, *args, **kwargs):
      '''
worldToRasterSpace( (ViewportGadget)arg1, (V3f)worldPosition) -> V2f :

    C++ signature :
        Imath_3_1::Vec2<float> worldToRasterSpace(GafferUI::ViewportGadget {lvalue},Imath_3_1::Vec3<float>)'''
    ...

def Widget (*args):
      '''

'''      
    ...

class Widget:
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def WidgetAlgo (*args):
      '''

'''      
    ...

def WidgetDragBeginSignal (*args):
      '''
__init__(_object*)

'''      
    ...

class WidgetDragBeginSignal:
    def connect (self, *args, **kwargs):
      '''
connect( (WidgetDragBeginSignal)arg1, (object)slot [, (object)scoped=None]) -> object :

    C++ signature :
        boost::python::api::object connect(Gaffer::Signals::Signal<boost::intrusive_ptr<IECore::RunTimeTyped> (boost::python::api::object, boost::python::api::object), GafferUI::EventSignalCombiner<boost::intrusive_ptr<IECore::RunTimeTyped> > > {lvalue},boost::python::api::object {lvalue} [,boost::python::api::object=None])'''
    ...
    def connectFront (self, *args, **kwargs):
      '''
connectFront( (WidgetDragBeginSignal)arg1, (object)slot [, (object)scoped=None]) -> object :

    C++ signature :
        boost::python::api::object connectFront(Gaffer::Signals::Signal<boost::intrusive_ptr<IECore::RunTimeTyped> (boost::python::api::object, boost::python::api::object), GafferUI::EventSignalCombiner<boost::intrusive_ptr<IECore::RunTimeTyped> > > {lvalue},boost::python::api::object {lvalue} [,boost::python::api::object=None])'''
    ...
    def disconnectAllSlots (self, *args, **kwargs):
      '''
disconnectAllSlots( (WidgetDragBeginSignal)arg1) -> None :

    C++ signature :
        void disconnectAllSlots(Gaffer::Signals::Signal<boost::intrusive_ptr<IECore::RunTimeTyped> (boost::python::api::object, boost::python::api::object), GafferUI::EventSignalCombiner<boost::intrusive_ptr<IECore::RunTimeTyped> > > {lvalue})'''
    ...
    def empty (self, *args, **kwargs):
      '''
empty( (WidgetDragBeginSignal)arg1) -> bool :

    C++ signature :
        bool empty(Gaffer::Signals::Signal<boost::intrusive_ptr<IECore::RunTimeTyped> (boost::python::api::object, boost::python::api::object), GafferUI::EventSignalCombiner<boost::intrusive_ptr<IECore::RunTimeTyped> > > {lvalue})'''
    ...
    def numSlots (self, *args, **kwargs):
      '''
numSlots( (WidgetDragBeginSignal)arg1) -> int :

    C++ signature :
        unsigned long numSlots(Gaffer::Signals::Signal<boost::intrusive_ptr<IECore::RunTimeTyped> (boost::python::api::object, boost::python::api::object), GafferUI::EventSignalCombiner<boost::intrusive_ptr<IECore::RunTimeTyped> > > {lvalue})'''
    ...

def WidgetEventSignal (*args):
      '''
__init__(_object*)

'''      
    ...

class WidgetEventSignal:
    def connect (self, *args, **kwargs):
      '''
connect( (WidgetEventSignal)arg1, (object)slot [, (object)scoped=None]) -> object :

    C++ signature :
        boost::python::api::object connect(Gaffer::Signals::Signal<bool (boost::python::api::object, boost::python::api::object), GafferUI::EventSignalCombiner<bool> > {lvalue},boost::python::api::object {lvalue} [,boost::python::api::object=None])'''
    ...
    def connectFront (self, *args, **kwargs):
      '''
connectFront( (WidgetEventSignal)arg1, (object)slot [, (object)scoped=None]) -> object :

    C++ signature :
        boost::python::api::object connectFront(Gaffer::Signals::Signal<bool (boost::python::api::object, boost::python::api::object), GafferUI::EventSignalCombiner<bool> > {lvalue},boost::python::api::object {lvalue} [,boost::python::api::object=None])'''
    ...
    def disconnectAllSlots (self, *args, **kwargs):
      '''
disconnectAllSlots( (WidgetEventSignal)arg1) -> None :

    C++ signature :
        void disconnectAllSlots(Gaffer::Signals::Signal<bool (boost::python::api::object, boost::python::api::object), GafferUI::EventSignalCombiner<bool> > {lvalue})'''
    ...
    def empty (self, *args, **kwargs):
      '''
empty( (WidgetEventSignal)arg1) -> bool :

    C++ signature :
        bool empty(Gaffer::Signals::Signal<bool (boost::python::api::object, boost::python::api::object), GafferUI::EventSignalCombiner<bool> > {lvalue})'''
    ...
    def numSlots (self, *args, **kwargs):
      '''
numSlots( (WidgetEventSignal)arg1) -> int :

    C++ signature :
        unsigned long numSlots(Gaffer::Signals::Signal<bool (boost::python::api::object, boost::python::api::object), GafferUI::EventSignalCombiner<bool> > {lvalue})'''
    ...

def WidgetSignal (*args):
      '''
__init__(_object*)

'''      
    ...

class WidgetSignal:
    def connect (self, *args, **kwargs):
      '''
connect( (WidgetSignal)arg1, (object)slot [, (object)scoped=None]) -> object :

    C++ signature :
        boost::python::api::object connect(Gaffer::Signals::Signal<bool (boost::python::api::object), GafferUI::EventSignalCombiner<bool> > {lvalue},boost::python::api::object {lvalue} [,boost::python::api::object=None])'''
    ...
    def connectFront (self, *args, **kwargs):
      '''
connectFront( (WidgetSignal)arg1, (object)slot [, (object)scoped=None]) -> object :

    C++ signature :
        boost::python::api::object connectFront(Gaffer::Signals::Signal<bool (boost::python::api::object), GafferUI::EventSignalCombiner<bool> > {lvalue},boost::python::api::object {lvalue} [,boost::python::api::object=None])'''
    ...
    def disconnectAllSlots (self, *args, **kwargs):
      '''
disconnectAllSlots( (WidgetSignal)arg1) -> None :

    C++ signature :
        void disconnectAllSlots(Gaffer::Signals::Signal<bool (boost::python::api::object), GafferUI::EventSignalCombiner<bool> > {lvalue})'''
    ...
    def empty (self, *args, **kwargs):
      '''
empty( (WidgetSignal)arg1) -> bool :

    C++ signature :
        bool empty(Gaffer::Signals::Signal<bool (boost::python::api::object), GafferUI::EventSignalCombiner<bool> > {lvalue})'''
    ...
    def numSlots (self, *args, **kwargs):
      '''
numSlots( (WidgetSignal)arg1) -> int :

    C++ signature :
        unsigned long numSlots(Gaffer::Signals::Signal<bool (boost::python::api::object), GafferUI::EventSignalCombiner<bool> > {lvalue})'''
    ...

def Window (*args):
      '''

'''      
    ...

class Window:
    def SizeMode (value, names=None, *, module=None, qualname=None, type=None, start=1):
      '''An enumeration.'''
    ...
    def _Widget__applyQWidgetStyleClasses (self):
      '''None'''
    ...
    def _Widget__ensureEventFilter (self):
      '''None'''
    ...
    def _Widget__ensureFocusChangedConnection ():
      '''None'''
    ...
    def _Widget__ensureMouseTracking (self):
      '''None'''
    ...
    def _Widget__focusChanged (oldWidget, newWidget):
      '''None'''
    ...
    def _Widget__focusChangedConnected (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def _Widget__focusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _Widget__initNesting ():
      '''None'''
    ...
    def _Widget__keyMapping (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def _Widget__parentStack (self, *args, **kwargs):
      '''Built-in mutable sequence.

If no argument is given, the constructor creates a new empty list.
The argument must be an iterable if specified.'''
    ...
    def _Widget__propagateDisplayTransformChange (self):
      '''None'''
    ...
    def _Widget__qtWidgetOwners (self, *args, **kwargs):
      ''' Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    '''
    ...
    def _Widget__styleClassName ():
      '''None'''
    ...
    def _Window__caughtKeys ():
      '''None'''
    ...
    def _Window__caughtKeysSet (self, *args, **kwargs):
      '''None'''
    ...
    def _Window__constrainToScreen (self, position):
      '''None'''
    ...
    def _Window__keyPress (self, widget, event):
      '''None'''
    ...
    def _acceptsClose (self):
      '''None'''
    ...
    def _applyVisibility (self):
      '''None'''
    ...
    def _buttons (qtButtons):
      '''None'''
    ...
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...
    def _displayTransformChanged (self):
      '''None'''
    ...
    def _key (qtKey):
      '''None'''
    ...
    def _modifiers (qtModifiers):
      '''None'''
    ...
    def _owner (qtWidget):
      '''None'''
    ...
    def _popParent ():
      '''None'''
    ...
    def _postConstructor (self):
      '''None'''
    ...
    def _pushParent (container):
      '''None'''
    ...
    def _qtColor (color):
      '''None'''
    ...
    def _qtWidget (self):
      '''None'''
    ...
    def _repolish (self, qtWidget=None):
      '''None'''
    ...
    def _revealDescendant (self, descendant):
      '''None'''
    ...
    def _setStyleSheet (self):
      '''None'''
    ...
    def addChild (self, child):
      '''None'''
    ...
    def addChildWindow (self, childWindow, removeOnClose=False):
      '''None'''
    ...
    def ancestor (self, type):
      '''None'''
    ...
    def bound (self, relativeTo=None):
      '''None'''
    ...
    def buttonDoubleClickSignal (self):
      '''None'''
    ...
    def buttonPressSignal (self):
      '''None'''
    ...
    def buttonReleaseSignal (self):
      '''None'''
    ...
    def childWindows (self):
      '''None'''
    ...
    def close (self):
      '''None'''
    ...
    def closedSignal (self):
      '''None'''
    ...
    def contextMenuSignal (self):
      '''None'''
    ...
    def currentModifiers ():
      '''None'''
    ...
    def displayTransform (self):
      '''None'''
    ...
    def dragBeginSignal (self):
      '''None'''
    ...
    def dragEndSignal (self):
      '''None'''
    ...
    def dragEnterSignal (self):
      '''None'''
    ...
    def dragLeaveSignal (self):
      '''None'''
    ...
    def dragMoveSignal (self):
      '''None'''
    ...
    def dropSignal (self):
      '''None'''
    ...
    def enabled (self, relativeTo=None):
      '''None'''
    ...
    def enterSignal (self):
      '''None'''
    ...
    def focusChangedSignal ():
      '''None'''
    ...
    def getChild (self):
      '''None'''
    ...
    def getDisplayTransform (self):
      '''None'''
    ...
    def getEnabled (self):
      '''None'''
    ...
    def getFullScreen (self):
      '''None'''
    ...
    def getHighlighted (self):
      '''None'''
    ...
    def getIcon (self):
      '''None'''
    ...
    def getPosition (self):
      '''None'''
    ...
    def getResizeable (self):
      '''None'''
    ...
    def getSizeMode (self):
      '''None'''
    ...
    def getTitle (self):
      '''None'''
    ...
    def getToolTip (self):
      '''None'''
    ...
    def getVisible (self):
      '''None'''
    ...
    def identityDisplayTransform (x):
      '''None'''
    ...
    def isAncestorOf (self, other):
      '''None'''
    ...
    def keyPressSignal (self):
      '''None'''
    ...
    def keyReleaseSignal (self):
      '''None'''
    ...
    def leaveSignal (self):
      '''None'''
    ...
    def mouseMoveSignal (self):
      '''None'''
    ...
    def mousePosition (relativeTo=None):
      '''None'''
    ...
    def parent (self):
      '''None'''
    ...
    def parentChangedSignal (self):
      '''None'''
    ...
    def preCloseSignal (self):
      '''None'''
    ...
    def removeChild (self, child):
      '''None'''
    ...
    def resizeToFitChild (self, shrink=True, expand=True):
      '''None'''
    ...
    def reveal (self):
      '''None'''
    ...
    def setChild (self, child):
      '''None'''
    ...
    def setDisplayTransform (self, displayTransform):
      '''None'''
    ...
    def setEnabled (self, enabled):
      '''None'''
    ...
    def setFullScreen (self, fullScreen):
      '''None'''
    ...
    def setHighlighted (self, highlighted):
      '''None'''
    ...
    def setIcon (self, imageOrImageFileName):
      '''None'''
    ...
    def setPosition (self, position, forcePosition=False):
      '''None'''
    ...
    def setResizeable (self, resizeable):
      '''None'''
    ...
    def setSizeMode (self, sizeMode):
      '''None'''
    ...
    def setTitle (self, title):
      '''None'''
    ...
    def setToolTip (self, toolTip):
      '''None'''
    ...
    def setVisible (self, visible):
      '''None'''
    ...
    def size (self):
      '''None'''
    ...
    def visibilityChangedSignal (self):
      '''None'''
    ...
    def visible (self, relativeTo=None):
      '''None'''
    ...
    def wheelSignal (self):
      '''None'''
    ...
    def widgetAt (position, widgetType=None):
      '''None'''
    ...

def _GafferUI (*args):
      '''

'''      
    ...

def _PlugAdder (*args):
      '''

'''      
    ...

def _Pointer (*args):
      '''

'''      
    ...

def _StyleSheet (*args):
      '''

'''      
    ...

def _TableView (*args):
      '''

'''      
    ...

def _Variant (*args):
      '''

'''      
    ...

class _Variant:
    def fromVariant (variant):
      '''None'''
    ...
    def toVariant (value):
      '''None'''
    ...

def __builtins__ (*args):
      '''

'''      
    ...

def __cached__ (*args):
      '''

'''      
    ...

def __doc__ (*args):
      '''

'''      
    ...

def __file__ (*args):
      '''

'''      
    ...

def __loader__ (*args):
      '''

'''      
    ...

def __name__ (*args):
      '''

'''      
    ...

def __package__ (*args):
      '''

'''      
    ...

def __path__ (*args):
      '''

'''      
    ...

def __shiboken (*args):
      '''

'''      
    ...

def __spec__ (*args):
      '''

'''      
    ...

def _qtAddress (*args):
      '''

'''      
    ...

def _qtObject (*args):
      '''

'''      
    ...

def _qtObjectIsValid (*args):
      '''

'''      
    ...

def showURL (*args):
      '''

'''      
    ...
