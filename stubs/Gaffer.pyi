
def About (*args):
      '''

'''      
    ...

class About:
    def compatibilityVersion ():
      '''None'''
    ...
    def copyright ():
      '''None'''
    ...
    def dependencies ():
      '''None'''
    ...
    def dependenciesPreamble ():
      '''None'''
    ...
    def license ():
      '''None'''
    ...
    def majorVersion ():
      '''None'''
    ...
    def milestoneVersion ():
      '''None'''
    ...
    def minorVersion ():
      '''None'''
    ...
    def name ():
      '''None'''
    ...
    def patchVersion ():
      '''None'''
    ...
    def url ():
      '''None'''
    ...
    def versionString ():
      '''None'''
    ...
    def versionSuffix ():
      '''None'''
    ...

def Action (*args):
      '''

'''      
    ...

class Action:
    def Stage (self, *args, **kwargs):
      '''None'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...

def Animation (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='Animation')

'''      
    ...

class Animation:
    def BinaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CurvePlug (self, *args, **kwargs):
      '''None'''
    ...
    def CurvePlugDirectionSignal (self, *args, **kwargs):
      '''None'''
    ...
    def CurvePlugKeySignal (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def ErrorSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Extrapolation (self, *args, **kwargs):
      '''None'''
    ...
    def Interpolation (self, *args, **kwargs):
      '''None'''
    ...
    def Key (self, *args, **kwargs):
      '''Key'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def Tangent (self, *args, **kwargs):
      '''None'''
    ...
    def TieMode (self, *args, **kwargs):
      '''None'''
    ...
    def Type (self, *args, **kwargs):
      '''None'''
    ...
    def UnaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (Animation)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::Animation,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (Animation)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::Animation,Gaffer::GraphComponent const*)'''
    ...
    def acquire (self, *args, **kwargs):
      '''
acquire( (ValuePlug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Animation::CurvePlug> acquire(Gaffer::ValuePlug*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def affects (self, *args, **kwargs):
      '''
affects( (Animation)arg1, (Plug)arg2) -> list :

    C++ signature :
        boost::python::list affects(Gaffer::Animation,Gaffer::Plug const*)'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def canAnimate (self, *args, **kwargs):
      '''
canAnimate( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool canAnimate(Gaffer::ValuePlug const*)'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def correspondingInput (self, *args, **kwargs):
      '''
correspondingInput( (Animation)arg1, (Plug)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> correspondingInput(Gaffer::Animation {lvalue},Gaffer::Plug const*)'''
    ...
    def defaultExtrapolation (self, *args, **kwargs):
      '''
defaultExtrapolation() -> Extrapolation :

    C++ signature :
        Gaffer::Animation::Extrapolation defaultExtrapolation()'''
    ...
    def defaultInterpolation (self, *args, **kwargs):
      '''
defaultInterpolation() -> Interpolation :

    C++ signature :
        Gaffer::Animation::Interpolation defaultInterpolation()'''
    ...
    def defaultScale (self, *args, **kwargs):
      '''
defaultScale() -> float :

    C++ signature :
        double defaultScale()'''
    ...
    def defaultSlope (self, *args, **kwargs):
      '''
defaultSlope() -> float :

    C++ signature :
        double defaultSlope()'''
    ...
    def defaultTieMode (self, *args, **kwargs):
      '''
defaultTieMode() -> TieMode :

    C++ signature :
        Gaffer::Animation::TieMode defaultTieMode()'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def enabledPlug (self, *args, **kwargs):
      '''
enabledPlug( (Animation)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::TypedPlug<bool> > enabledPlug(Gaffer::Animation {lvalue})'''
    ...
    def errorSignal (self, *args, **kwargs):
      '''
errorSignal( (Node)arg1) -> ErrorSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug const*, Gaffer::Plug const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} errorSignal(Gaffer::Node {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isAnimated (self, *args, **kwargs):
      '''
isAnimated( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isAnimated(Gaffer::ValuePlug const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (Animation)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Animation {lvalue},IECore::TypeId)

isInstanceOf( (Animation)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Animation {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def opposite (self, *args, **kwargs):
      '''
opposite( (Direction)arg1) -> Direction :

    C++ signature :
        Gaffer::Animation::Direction opposite(Gaffer::Animation::Direction)'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plugDirtiedSignal (self, *args, **kwargs):
      '''
plugDirtiedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugDirtiedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugInputChangedSignal (self, *args, **kwargs):
      '''
plugInputChangedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugInputChangedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugSetSignal (self, *args, **kwargs):
      '''
plugSetSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugSetSignal(Gaffer::Node {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def scriptNode (self, *args, **kwargs):
      '''
scriptNode( (Node)arg1) -> object :

    C++ signature :
        Gaffer::ScriptNode* scriptNode(Gaffer::Node {lvalue})'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (Animation)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::Animation {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (Animation)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::Animation {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def Application (*args):
      '''

'''      
    ...

class Application:
    def _Application__formatHelp (self):
      '''None'''
    ...
    def _Application__run (self):
      '''None'''
    ...
    def _executeStartupFiles (self, applicationName):
      '''None'''
    ...
    def _run (self, args):
      '''None'''
    ...
    def baseTypeId ():
      '''None'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName ():
      '''None'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def description (self, *args, **kwargs):
      '''None'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def inheritsFrom (t):
      '''None'''
    ...
    def isInstanceOf (self, t):
      '''None'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parameters (self, *args, **kwargs):
      '''
parameters( (Parameterised)arg1) -> object :

    C++ signature :
        IECore::CompoundParameter* parameters(IECore::Parameterised {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def root (self):
      '''None'''
    ...
    def run (self):
      '''None'''
    ...
    def staticTypeId ():
      '''None'''
    ...
    def staticTypeName ():
      '''None'''
    ...
    def typeId (x):
      '''None'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (x):
      '''None'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def userData (self, *args, **kwargs):
      '''
userData( (Parameterised)arg1) -> object :

    C++ signature :
        IECore::CompoundObject* userData(IECore::Parameterised {lvalue})'''
    ...

def ApplicationRoot (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
__init__(_object*)

'''      
    ...

class ApplicationRoot:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ClipboardSignal (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::GraphComponent,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::GraphComponent,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clipboardContentsChangedSignal (self, *args, **kwargs):
      '''
clipboardContentsChangedSignal( (ApplicationRoot)arg1) -> ClipboardSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::ApplicationRoot*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} clipboardContentsChangedSignal(Gaffer::ApplicationRoot {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getClipboardContents (self, *args, **kwargs):
      '''
getClipboardContents( (ApplicationRoot)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::Object> getClipboardContents(Gaffer::ApplicationRoot {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (ApplicationRoot)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::ApplicationRoot {lvalue},IECore::TypeId)

isInstanceOf( (ApplicationRoot)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::ApplicationRoot {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def preferencesLocation (self, *args, **kwargs):
      '''
preferencesLocation( (ApplicationRoot)arg1) -> object :

    C++ signature :
        std::filesystem::__cxx11::path preferencesLocation(Gaffer::ApplicationRoot {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def savePreferences (self, *args, **kwargs):
      '''
savePreferences( (ApplicationRoot)arg1) -> None :

    C++ signature :
        void savePreferences(Gaffer::ApplicationRoot {lvalue})

savePreferences( (ApplicationRoot)arg1, (object)arg2) -> None :

    C++ signature :
        void savePreferences(Gaffer::ApplicationRoot {lvalue},std::filesystem::__cxx11::path)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setClipboardContents (self, *args, **kwargs):
      '''
setClipboardContents( (ApplicationRoot)arg1, (Object)arg2) -> None :

    C++ signature :
        void setClipboardContents(Gaffer::ApplicationRoot {lvalue},IECore::Object const*)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (ApplicationRoot)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::ApplicationRoot {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (ApplicationRoot)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::ApplicationRoot {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def ArrayPlug (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='ArrayPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, boost::intrusive_ptr<Gaffer::Plug> element=None, unsigned long minSize=1, unsigned long maxSize=18446744073709551615, unsigned int flags=Gaffer._Gaffer.Flags.Default, bool resizeWhenInputsChange=True)

'''      
    ...

class ArrayPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (ArrayPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::ArrayPlug,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (ArrayPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::ArrayPlug,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (ArrayPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::ArrayPlug,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (ArrayPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::ArrayPlug {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (ArrayPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::ArrayPlug {lvalue},IECore::TypeId)

isInstanceOf( (ArrayPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::ArrayPlug {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def maxSize (self, *args, **kwargs):
      '''
maxSize( (ArrayPlug)arg1) -> int :

    C++ signature :
        unsigned long maxSize(Gaffer::ArrayPlug {lvalue})'''
    ...
    def minSize (self, *args, **kwargs):
      '''
minSize( (ArrayPlug)arg1) -> int :

    C++ signature :
        unsigned long minSize(Gaffer::ArrayPlug {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def next (self, *args, **kwargs):
      '''
next( (ArrayPlug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> next(Gaffer::ArrayPlug {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resize (self, *args, **kwargs):
      '''
resize( (ArrayPlug)arg1, (int)arg2) -> None :

    C++ signature :
        void resize(Gaffer::ArrayPlug {lvalue},unsigned long)'''
    ...
    def resizeWhenInputsChange (self, *args, **kwargs):
      '''
resizeWhenInputsChange( (ArrayPlug)arg1) -> bool :

    C++ signature :
        bool resizeWhenInputsChange(Gaffer::ArrayPlug {lvalue})'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (ArrayPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::ArrayPlug {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (ArrayPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::ArrayPlug {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (ArrayPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::ArrayPlug {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def AtomicBox2fPlug (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='AtomicBox2fPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, Imath_3_1::Box<Imath_3_1::Vec2<float> > defaultValue=Box2f(V2f(3.40282347e+38, 3.40282347e+38), V2f(-3.40282347e+38, -3.40282347e+38)), unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class AtomicBox2fPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ValueType (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (AtomicBox2fPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::TypedPlug<Imath_3_1::Box<Imath_3_1::Vec2<float> > >,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (AtomicBox2fPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::TypedPlug<Imath_3_1::Box<Imath_3_1::Vec2<float> > >,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (AtomicBox2fPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::TypedPlug<Imath_3_1::Box<Imath_3_1::Vec2<float> > >,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (AtomicBox2fPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::TypedPlug<Imath_3_1::Box<Imath_3_1::Vec2<float> > > {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def defaultValue (self, *args, **kwargs):
      '''
defaultValue( (AtomicBox2fPlug)arg1) -> Box2f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec2<float> > defaultValue(Gaffer::TypedPlug<Imath_3_1::Box<Imath_3_1::Vec2<float> > > {lvalue})'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getValue (self, *args, **kwargs):
      '''
getValue( (AtomicBox2fPlug)arg1 [, (MurmurHash)_precomputedHash=None]) -> Box2f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec2<float> > getValue(Gaffer::TypedPlug<Imath_3_1::Box<Imath_3_1::Vec2<float> > > const* [,IECore::MurmurHash const*=None])'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (AtomicBox2fPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedPlug<Imath_3_1::Box<Imath_3_1::Vec2<float> > > {lvalue},IECore::TypeId)

isInstanceOf( (AtomicBox2fPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedPlug<Imath_3_1::Box<Imath_3_1::Vec2<float> > > {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (AtomicBox2fPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::TypedPlug<Imath_3_1::Box<Imath_3_1::Vec2<float> > > {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def setValue (self, *args, **kwargs):
      '''
setValue( (AtomicBox2fPlug)arg1, (Box2f)arg2) -> None :

    C++ signature :
        void setValue(Gaffer::TypedPlug<Imath_3_1::Box<Imath_3_1::Vec2<float> > >*,Imath_3_1::Box<Imath_3_1::Vec2<float> >)'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (AtomicBox2fPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::TypedPlug<Imath_3_1::Box<Imath_3_1::Vec2<float> > > {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (AtomicBox2fPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::TypedPlug<Imath_3_1::Box<Imath_3_1::Vec2<float> > > {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def AtomicBox2iPlug (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='AtomicBox2iPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, Imath_3_1::Box<Imath_3_1::Vec2<int> > defaultValue=Box2i(V2i(2147483647, 2147483647), V2i(-2147483648, -2147483648)), unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class AtomicBox2iPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ValueType (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (AtomicBox2iPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::TypedPlug<Imath_3_1::Box<Imath_3_1::Vec2<int> > >,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (AtomicBox2iPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::TypedPlug<Imath_3_1::Box<Imath_3_1::Vec2<int> > >,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (AtomicBox2iPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::TypedPlug<Imath_3_1::Box<Imath_3_1::Vec2<int> > >,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (AtomicBox2iPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::TypedPlug<Imath_3_1::Box<Imath_3_1::Vec2<int> > > {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def defaultValue (self, *args, **kwargs):
      '''
defaultValue( (AtomicBox2iPlug)arg1) -> Box2i :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec2<int> > defaultValue(Gaffer::TypedPlug<Imath_3_1::Box<Imath_3_1::Vec2<int> > > {lvalue})'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getValue (self, *args, **kwargs):
      '''
getValue( (AtomicBox2iPlug)arg1 [, (MurmurHash)_precomputedHash=None]) -> Box2i :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec2<int> > getValue(Gaffer::TypedPlug<Imath_3_1::Box<Imath_3_1::Vec2<int> > > const* [,IECore::MurmurHash const*=None])'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (AtomicBox2iPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedPlug<Imath_3_1::Box<Imath_3_1::Vec2<int> > > {lvalue},IECore::TypeId)

isInstanceOf( (AtomicBox2iPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedPlug<Imath_3_1::Box<Imath_3_1::Vec2<int> > > {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (AtomicBox2iPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::TypedPlug<Imath_3_1::Box<Imath_3_1::Vec2<int> > > {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def setValue (self, *args, **kwargs):
      '''
setValue( (AtomicBox2iPlug)arg1, (Box2i)arg2) -> None :

    C++ signature :
        void setValue(Gaffer::TypedPlug<Imath_3_1::Box<Imath_3_1::Vec2<int> > >*,Imath_3_1::Box<Imath_3_1::Vec2<int> >)'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (AtomicBox2iPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::TypedPlug<Imath_3_1::Box<Imath_3_1::Vec2<int> > > {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (AtomicBox2iPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::TypedPlug<Imath_3_1::Box<Imath_3_1::Vec2<int> > > {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def AtomicBox3fPlug (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='AtomicBox3fPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, Imath_3_1::Box<Imath_3_1::Vec3<float> > defaultValue=Box3f(V3f(3.40282347e+38, 3.40282347e+38, 3.40282347e+38), V3f(-3.40282347e+38, -3.40282347e+38, -3.40282347e+38)), unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class AtomicBox3fPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ValueType (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (AtomicBox3fPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::TypedPlug<Imath_3_1::Box<Imath_3_1::Vec3<float> > >,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (AtomicBox3fPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::TypedPlug<Imath_3_1::Box<Imath_3_1::Vec3<float> > >,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (AtomicBox3fPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::TypedPlug<Imath_3_1::Box<Imath_3_1::Vec3<float> > >,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (AtomicBox3fPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::TypedPlug<Imath_3_1::Box<Imath_3_1::Vec3<float> > > {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def defaultValue (self, *args, **kwargs):
      '''
defaultValue( (AtomicBox3fPlug)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > defaultValue(Gaffer::TypedPlug<Imath_3_1::Box<Imath_3_1::Vec3<float> > > {lvalue})'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getValue (self, *args, **kwargs):
      '''
getValue( (AtomicBox3fPlug)arg1 [, (MurmurHash)_precomputedHash=None]) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > getValue(Gaffer::TypedPlug<Imath_3_1::Box<Imath_3_1::Vec3<float> > > const* [,IECore::MurmurHash const*=None])'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (AtomicBox3fPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedPlug<Imath_3_1::Box<Imath_3_1::Vec3<float> > > {lvalue},IECore::TypeId)

isInstanceOf( (AtomicBox3fPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedPlug<Imath_3_1::Box<Imath_3_1::Vec3<float> > > {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (AtomicBox3fPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::TypedPlug<Imath_3_1::Box<Imath_3_1::Vec3<float> > > {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def setValue (self, *args, **kwargs):
      '''
setValue( (AtomicBox3fPlug)arg1, (Box3f)arg2) -> None :

    C++ signature :
        void setValue(Gaffer::TypedPlug<Imath_3_1::Box<Imath_3_1::Vec3<float> > >*,Imath_3_1::Box<Imath_3_1::Vec3<float> >)'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (AtomicBox3fPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::TypedPlug<Imath_3_1::Box<Imath_3_1::Vec3<float> > > {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (AtomicBox3fPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::TypedPlug<Imath_3_1::Box<Imath_3_1::Vec3<float> > > {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def AtomicCompoundDataPlug (*args):
      '''
__init__(boost::python::api::object, char const* name='AtomicCompoundDataPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, boost::intrusive_ptr<IECore::CompoundData> defaultValue, unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class AtomicCompoundDataPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ValueType (self, *args, **kwargs):
      '''This class behaves like the native python dict, except that it only accepts objects derived from Data class.
The copy constructor accepts another instance of this class or a python dict containing Data objects
it has the most important dict methods: has_key, items, keys, values, get, pop, etc.
'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (AtomicCompoundDataPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::TypedObjectPlug<IECore::CompoundData>,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (AtomicCompoundDataPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::TypedObjectPlug<IECore::CompoundData>,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (AtomicCompoundDataPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::TypedObjectPlug<IECore::CompoundData>,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (AtomicCompoundDataPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::TypedObjectPlug<IECore::CompoundData> {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def defaultValue (self, *args, **kwargs):
      '''
defaultValue( (object)arg1 [, (bool)_copy=True]) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::CompoundData> defaultValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::CompoundData> > [,bool=True])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getValue (self, *args, **kwargs):
      '''
getValue( (object)arg1 [, (MurmurHash)_precomputedHash=None [, (bool)_copy=True]]) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::Object> getValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::CompoundData> > [,IECore::MurmurHash const*=None [,bool=True]])'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (AtomicCompoundDataPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedObjectPlug<IECore::CompoundData> {lvalue},IECore::TypeId)

isInstanceOf( (AtomicCompoundDataPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedObjectPlug<IECore::CompoundData> {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (AtomicCompoundDataPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::TypedObjectPlug<IECore::CompoundData> {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def setValue (self, *args, **kwargs):
      '''
setValue( (object)arg1, (object)value [, (bool)_copy=True]) -> None :

    C++ signature :
        void setValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::CompoundData> >,boost::intrusive_ptr<IECore::CompoundData> [,bool=True])'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (AtomicCompoundDataPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::TypedObjectPlug<IECore::CompoundData> {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (AtomicCompoundDataPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::TypedObjectPlug<IECore::CompoundData> {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def Backdrop (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='Backdrop')

'''      
    ...

class Backdrop:
    def BinaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ErrorSignal (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def UnaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (Backdrop)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::Backdrop,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (Backdrop)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::Backdrop,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def errorSignal (self, *args, **kwargs):
      '''
errorSignal( (Node)arg1) -> ErrorSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug const*, Gaffer::Plug const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} errorSignal(Gaffer::Node {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (Backdrop)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Backdrop {lvalue},IECore::TypeId)

isInstanceOf( (Backdrop)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Backdrop {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plugDirtiedSignal (self, *args, **kwargs):
      '''
plugDirtiedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugDirtiedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugInputChangedSignal (self, *args, **kwargs):
      '''
plugInputChangedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugInputChangedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugSetSignal (self, *args, **kwargs):
      '''
plugSetSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugSetSignal(Gaffer::Node {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def scriptNode (self, *args, **kwargs):
      '''
scriptNode( (Node)arg1) -> object :

    C++ signature :
        Gaffer::ScriptNode* scriptNode(Gaffer::Node {lvalue})'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (Backdrop)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::Backdrop {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (Backdrop)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::Backdrop {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def BackgroundTask (*args):
      '''
__init__(boost::python::api::object, Gaffer::Plug const*, boost::python::api::object)

'''      
    ...

class BackgroundTask:
    def Status (self, *args, **kwargs):
      '''None'''
    ...
    def cancel (self, *args, **kwargs):
      '''
cancel( (BackgroundTask)arg1) -> None :

    C++ signature :
        void cancel(Gaffer::BackgroundTask {lvalue})'''
    ...
    def cancelAndWait (self, *args, **kwargs):
      '''
cancelAndWait( (BackgroundTask)arg1) -> None :

    C++ signature :
        void cancelAndWait(Gaffer::BackgroundTask {lvalue})'''
    ...
    def status (self, *args, **kwargs):
      '''
status( (BackgroundTask)arg1) -> Status :

    C++ signature :
        Gaffer::BackgroundTask::Status status(Gaffer::BackgroundTask)'''
    ...
    def wait (self, *args, **kwargs):
      '''
wait( (BackgroundTask)arg1) -> None :

    C++ signature :
        void wait(Gaffer::BackgroundTask {lvalue})'''
    ...
    def waitFor (self, *args, **kwargs):
      '''
waitFor( (BackgroundTask)arg1, (float)arg2) -> bool :

    C++ signature :
        bool waitFor(Gaffer::BackgroundTask {lvalue},float)'''
    ...

def BlockedConnection (*args):
      '''

'''      
    ...

class BlockedConnection:

def BoolPlug (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='BoolPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, bool defaultValue=False, unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class BoolPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ValueType (self, *args, **kwargs):
      '''bool(x) -> bool

Returns True when the argument x is true, False otherwise.
The builtins True and False are the only two instances of the class bool.
The class bool is a subclass of the class int, and cannot be subclassed.'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (BoolPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::TypedPlug<bool>,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (BoolPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::TypedPlug<bool>,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (BoolPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::TypedPlug<bool>,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (BoolPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::TypedPlug<bool> {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def defaultValue (self, *args, **kwargs):
      '''
defaultValue( (BoolPlug)arg1) -> bool :

    C++ signature :
        bool defaultValue(Gaffer::TypedPlug<bool> {lvalue})'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getValue (self, *args, **kwargs):
      '''
getValue( (BoolPlug)arg1 [, (MurmurHash)_precomputedHash=None]) -> bool :

    C++ signature :
        bool getValue(Gaffer::TypedPlug<bool> const* [,IECore::MurmurHash const*=None])'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (BoolPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedPlug<bool> {lvalue},IECore::TypeId)

isInstanceOf( (BoolPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedPlug<bool> {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (BoolPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::TypedPlug<bool> {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def setValue (self, *args, **kwargs):
      '''
setValue( (BoolPlug)arg1, (bool)arg2) -> None :

    C++ signature :
        void setValue(Gaffer::TypedPlug<bool>*,bool)'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (BoolPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::TypedPlug<bool> {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (BoolPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::TypedPlug<bool> {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def BoolVectorDataPlug (*args):
      '''
__init__(boost::python::api::object, char const* name='BoolVectorDataPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, boost::intrusive_ptr<IECore::TypedData<std::vector<bool, std::allocator<bool> > > > defaultValue, unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class BoolVectorDataPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ValueType (self, *args, **kwargs):
      '''bool-type vector class derived from Data class.
This class behaves like the native python lists, except that it only accepts bool values.
The copy constructor accepts another instance of this class or a python list containing bool
or any other python built-in type that is convertible into it.
It accepts slicing, negative indexing and special functions like extend, insert, etc.
'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (BoolVectorDataPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<bool, std::allocator<bool> > > >,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (BoolVectorDataPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<bool, std::allocator<bool> > > >,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (BoolVectorDataPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<bool, std::allocator<bool> > > >,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (BoolVectorDataPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<bool, std::allocator<bool> > > > {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def defaultValue (self, *args, **kwargs):
      '''
defaultValue( (object)arg1 [, (bool)_copy=True]) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::TypedData<std::vector<bool, std::allocator<bool> > > > defaultValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<bool, std::allocator<bool> > > > > [,bool=True])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getValue (self, *args, **kwargs):
      '''
getValue( (object)arg1 [, (MurmurHash)_precomputedHash=None [, (bool)_copy=True]]) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::Object> getValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<bool, std::allocator<bool> > > > > [,IECore::MurmurHash const*=None [,bool=True]])'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (BoolVectorDataPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<bool, std::allocator<bool> > > > {lvalue},IECore::TypeId)

isInstanceOf( (BoolVectorDataPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<bool, std::allocator<bool> > > > {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (BoolVectorDataPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<bool, std::allocator<bool> > > > {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def setValue (self, *args, **kwargs):
      '''
setValue( (object)arg1, (object)value [, (bool)_copy=True]) -> None :

    C++ signature :
        void setValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<bool, std::allocator<bool> > > > >,boost::intrusive_ptr<IECore::TypedData<std::vector<bool, std::allocator<bool> > > > [,bool=True])'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (BoolVectorDataPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<bool, std::allocator<bool> > > > {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (BoolVectorDataPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<bool, std::allocator<bool> > > > {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def Box (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='Box')

'''      
    ...

class Box:
    def BinaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ErrorSignal (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def UnaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (Box)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::Box,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (Box)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::Box,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def affects (self, *args, **kwargs):
      '''
affects( (Box)arg1, (Plug)arg2) -> list :

    C++ signature :
        boost::python::list affects(Gaffer::Box,Gaffer::Plug const*)'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def canPromotePlug (self, *args, **kwargs):
      '''
canPromotePlug( (Box)arg1, (Plug)descendantPlug) -> bool :

    C++ signature :
        bool canPromotePlug(Gaffer::Box {lvalue},Gaffer::Plug const*)'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def correspondingInput (self, *args, **kwargs):
      '''
correspondingInput( (Box)arg1, (Plug)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> correspondingInput(Gaffer::Box {lvalue},Gaffer::Plug const*)'''
    ...
    def create (self, *args, **kwargs):
      '''
create( (Node)arg1, (Set)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Box> create(Gaffer::Node*,Gaffer::Set const*)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def enabledPlug (self, *args, **kwargs):
      '''
enabledPlug( (Box)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::TypedPlug<bool> > enabledPlug(Gaffer::Box {lvalue})'''
    ...
    def errorSignal (self, *args, **kwargs):
      '''
errorSignal( (Node)arg1) -> ErrorSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug const*, Gaffer::Plug const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} errorSignal(Gaffer::Node {lvalue})'''
    ...
    def exportForReference (self, *args, **kwargs):
      '''
exportForReference( (Box)arg1, (object)arg2) -> None :

    C++ signature :
        void exportForReference(Gaffer::Box {lvalue},std::filesystem::__cxx11::path)'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (Box)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Box {lvalue},IECore::TypeId)

isInstanceOf( (Box)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Box {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plugDirtiedSignal (self, *args, **kwargs):
      '''
plugDirtiedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugDirtiedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugInputChangedSignal (self, *args, **kwargs):
      '''
plugInputChangedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugInputChangedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugIsPromoted (self, *args, **kwargs):
      '''
plugIsPromoted( (Box)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool plugIsPromoted(Gaffer::Box {lvalue},Gaffer::Plug const*)'''
    ...
    def plugSetSignal (self, *args, **kwargs):
      '''
plugSetSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugSetSignal(Gaffer::Node {lvalue})'''
    ...
    def promotePlug (self, *args, **kwargs):
      '''
promotePlug( (Box)arg1, (Plug)descendantPlug) -> object :

    C++ signature :
        Gaffer::Plug* promotePlug(Gaffer::Box {lvalue},Gaffer::Plug*)'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def scriptNode (self, *args, **kwargs):
      '''
scriptNode( (Node)arg1) -> object :

    C++ signature :
        Gaffer::ScriptNode* scriptNode(Gaffer::Node {lvalue})'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (Box)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::Box {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (Box)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::Box {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def unpromotePlug (self, *args, **kwargs):
      '''
unpromotePlug( (Box)arg1, (Plug)arg2) -> None :

    C++ signature :
        void unpromotePlug(Gaffer::Box {lvalue},Gaffer::Plug*)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def Box2fPlug (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='Box2fPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, Imath_3_1::Box<Imath_3_1::Vec2<float> > defaultValue=Box2f(V2f(3.40282347e+38, 3.40282347e+38), V2f(-3.40282347e+38, -3.40282347e+38)), Imath_3_1::Vec2<float> minValue=V2f(-3.40282347e+38, -3.40282347e+38), Imath_3_1::Vec2<float> maxValue=V2f(3.40282347e+38, 3.40282347e+38), unsigned int flags=Gaffer._Gaffer.Flags.Default)
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='Box2fPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, Imath_3_1::Box<Imath_3_1::Vec2<float> > defaultValue=Box2f(V2f(3.40282347e+38, 3.40282347e+38), V2f(-3.40282347e+38, -3.40282347e+38)), unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class Box2fPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (Box2fPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec2<float> > >,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (Box2fPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec2<float> > >,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (Box2fPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec2<float> > >,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (Box2fPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec2<float> > > {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def defaultValue (self, *args, **kwargs):
      '''
defaultValue( (Box2fPlug)arg1) -> Box2f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec2<float> > defaultValue(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec2<float> > > {lvalue})'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getValue (self, *args, **kwargs):
      '''
getValue( (Box2fPlug)arg1) -> Box2f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec2<float> > getValue(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec2<float> > > const*)'''
    ...
    def hasMaxValue (self, *args, **kwargs):
      '''
hasMaxValue( (Box2fPlug)arg1) -> bool :

    C++ signature :
        bool hasMaxValue(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec2<float> > > {lvalue})'''
    ...
    def hasMinValue (self, *args, **kwargs):
      '''
hasMinValue( (Box2fPlug)arg1) -> bool :

    C++ signature :
        bool hasMinValue(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec2<float> > > {lvalue})'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (Box2fPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec2<float> > > {lvalue},IECore::TypeId)

isInstanceOf( (Box2fPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec2<float> > > {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def maxValue (self, *args, **kwargs):
      '''
maxValue( (Box2fPlug)arg1) -> V2f :

    C++ signature :
        Imath_3_1::Vec2<float> maxValue(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec2<float> > > {lvalue})'''
    ...
    def minValue (self, *args, **kwargs):
      '''
minValue( (Box2fPlug)arg1) -> V2f :

    C++ signature :
        Imath_3_1::Vec2<float> minValue(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec2<float> > > {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (Box2fPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec2<float> > > {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def setValue (self, *args, **kwargs):
      '''
setValue( (Box2fPlug)arg1, (Box2f)arg2) -> None :

    C++ signature :
        void setValue(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec2<float> > > {lvalue},Imath_3_1::Box<Imath_3_1::Vec2<float> >)'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (Box2fPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec2<float> > > {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (Box2fPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec2<float> > > {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def Box2iPlug (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='Box2iPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, Imath_3_1::Box<Imath_3_1::Vec2<int> > defaultValue=Box2i(V2i(2147483647, 2147483647), V2i(-2147483648, -2147483648)), Imath_3_1::Vec2<int> minValue=V2i(-2147483648, -2147483648), Imath_3_1::Vec2<int> maxValue=V2i(2147483647, 2147483647), unsigned int flags=Gaffer._Gaffer.Flags.Default)
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='Box2iPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, Imath_3_1::Box<Imath_3_1::Vec2<int> > defaultValue=Box2i(V2i(2147483647, 2147483647), V2i(-2147483648, -2147483648)), unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class Box2iPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (Box2iPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec2<int> > >,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (Box2iPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec2<int> > >,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (Box2iPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec2<int> > >,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (Box2iPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec2<int> > > {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def defaultValue (self, *args, **kwargs):
      '''
defaultValue( (Box2iPlug)arg1) -> Box2i :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec2<int> > defaultValue(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec2<int> > > {lvalue})'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getValue (self, *args, **kwargs):
      '''
getValue( (Box2iPlug)arg1) -> Box2i :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec2<int> > getValue(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec2<int> > > const*)'''
    ...
    def hasMaxValue (self, *args, **kwargs):
      '''
hasMaxValue( (Box2iPlug)arg1) -> bool :

    C++ signature :
        bool hasMaxValue(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec2<int> > > {lvalue})'''
    ...
    def hasMinValue (self, *args, **kwargs):
      '''
hasMinValue( (Box2iPlug)arg1) -> bool :

    C++ signature :
        bool hasMinValue(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec2<int> > > {lvalue})'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (Box2iPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec2<int> > > {lvalue},IECore::TypeId)

isInstanceOf( (Box2iPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec2<int> > > {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def maxValue (self, *args, **kwargs):
      '''
maxValue( (Box2iPlug)arg1) -> V2i :

    C++ signature :
        Imath_3_1::Vec2<int> maxValue(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec2<int> > > {lvalue})'''
    ...
    def minValue (self, *args, **kwargs):
      '''
minValue( (Box2iPlug)arg1) -> V2i :

    C++ signature :
        Imath_3_1::Vec2<int> minValue(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec2<int> > > {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (Box2iPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec2<int> > > {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def setValue (self, *args, **kwargs):
      '''
setValue( (Box2iPlug)arg1, (Box2i)arg2) -> None :

    C++ signature :
        void setValue(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec2<int> > > {lvalue},Imath_3_1::Box<Imath_3_1::Vec2<int> >)'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (Box2iPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec2<int> > > {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (Box2iPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec2<int> > > {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def Box3fPlug (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='Box3fPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, Imath_3_1::Box<Imath_3_1::Vec3<float> > defaultValue=Box3f(V3f(3.40282347e+38, 3.40282347e+38, 3.40282347e+38), V3f(-3.40282347e+38, -3.40282347e+38, -3.40282347e+38)), Imath_3_1::Vec3<float> minValue=V3f(-3.40282347e+38, -3.40282347e+38, -3.40282347e+38), Imath_3_1::Vec3<float> maxValue=V3f(3.40282347e+38, 3.40282347e+38, 3.40282347e+38), unsigned int flags=Gaffer._Gaffer.Flags.Default)
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='Box3fPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, Imath_3_1::Box<Imath_3_1::Vec3<float> > defaultValue=Box3f(V3f(3.40282347e+38, 3.40282347e+38, 3.40282347e+38), V3f(-3.40282347e+38, -3.40282347e+38, -3.40282347e+38)), unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class Box3fPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (Box3fPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec3<float> > >,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (Box3fPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec3<float> > >,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (Box3fPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec3<float> > >,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (Box3fPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec3<float> > > {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def defaultValue (self, *args, **kwargs):
      '''
defaultValue( (Box3fPlug)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > defaultValue(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec3<float> > > {lvalue})'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getValue (self, *args, **kwargs):
      '''
getValue( (Box3fPlug)arg1) -> Box3f :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<float> > getValue(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec3<float> > > const*)'''
    ...
    def hasMaxValue (self, *args, **kwargs):
      '''
hasMaxValue( (Box3fPlug)arg1) -> bool :

    C++ signature :
        bool hasMaxValue(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec3<float> > > {lvalue})'''
    ...
    def hasMinValue (self, *args, **kwargs):
      '''
hasMinValue( (Box3fPlug)arg1) -> bool :

    C++ signature :
        bool hasMinValue(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec3<float> > > {lvalue})'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (Box3fPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec3<float> > > {lvalue},IECore::TypeId)

isInstanceOf( (Box3fPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec3<float> > > {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def maxValue (self, *args, **kwargs):
      '''
maxValue( (Box3fPlug)arg1) -> V3f :

    C++ signature :
        Imath_3_1::Vec3<float> maxValue(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec3<float> > > {lvalue})'''
    ...
    def minValue (self, *args, **kwargs):
      '''
minValue( (Box3fPlug)arg1) -> V3f :

    C++ signature :
        Imath_3_1::Vec3<float> minValue(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec3<float> > > {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (Box3fPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec3<float> > > {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def setValue (self, *args, **kwargs):
      '''
setValue( (Box3fPlug)arg1, (Box3f)arg2) -> None :

    C++ signature :
        void setValue(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec3<float> > > {lvalue},Imath_3_1::Box<Imath_3_1::Vec3<float> >)'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (Box3fPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec3<float> > > {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (Box3fPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec3<float> > > {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def Box3iPlug (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='Box3iPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, Imath_3_1::Box<Imath_3_1::Vec3<int> > defaultValue=Box3i(V3i(2147483647, 2147483647, 2147483647), V3i(-2147483648, -2147483648, -2147483648)), Imath_3_1::Vec3<int> minValue=V3i(-2147483648, -2147483648, -2147483648), Imath_3_1::Vec3<int> maxValue=V3i(2147483647, 2147483647, 2147483647), unsigned int flags=Gaffer._Gaffer.Flags.Default)
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='Box3iPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, Imath_3_1::Box<Imath_3_1::Vec3<int> > defaultValue=Box3i(V3i(2147483647, 2147483647, 2147483647), V3i(-2147483648, -2147483648, -2147483648)), unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class Box3iPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (Box3iPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec3<int> > >,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (Box3iPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec3<int> > >,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (Box3iPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec3<int> > >,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (Box3iPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec3<int> > > {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def defaultValue (self, *args, **kwargs):
      '''
defaultValue( (Box3iPlug)arg1) -> Box3i :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<int> > defaultValue(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec3<int> > > {lvalue})'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getValue (self, *args, **kwargs):
      '''
getValue( (Box3iPlug)arg1) -> Box3i :

    C++ signature :
        Imath_3_1::Box<Imath_3_1::Vec3<int> > getValue(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec3<int> > > const*)'''
    ...
    def hasMaxValue (self, *args, **kwargs):
      '''
hasMaxValue( (Box3iPlug)arg1) -> bool :

    C++ signature :
        bool hasMaxValue(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec3<int> > > {lvalue})'''
    ...
    def hasMinValue (self, *args, **kwargs):
      '''
hasMinValue( (Box3iPlug)arg1) -> bool :

    C++ signature :
        bool hasMinValue(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec3<int> > > {lvalue})'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (Box3iPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec3<int> > > {lvalue},IECore::TypeId)

isInstanceOf( (Box3iPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec3<int> > > {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def maxValue (self, *args, **kwargs):
      '''
maxValue( (Box3iPlug)arg1) -> V3i :

    C++ signature :
        Imath_3_1::Vec3<int> maxValue(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec3<int> > > {lvalue})'''
    ...
    def minValue (self, *args, **kwargs):
      '''
minValue( (Box3iPlug)arg1) -> V3i :

    C++ signature :
        Imath_3_1::Vec3<int> minValue(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec3<int> > > {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (Box3iPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec3<int> > > {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def setValue (self, *args, **kwargs):
      '''
setValue( (Box3iPlug)arg1, (Box3i)arg2) -> None :

    C++ signature :
        void setValue(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec3<int> > > {lvalue},Imath_3_1::Box<Imath_3_1::Vec3<int> >)'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (Box3iPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec3<int> > > {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (Box3iPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::BoxPlug<Imath_3_1::Box<Imath_3_1::Vec3<int> > > {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def BoxIO (*args):
      '''

'''      
    ...

class BoxIO:
    def BinaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ErrorSignal (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def UnaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (BoxIO)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::BoxIO,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (BoxIO)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::BoxIO,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def canInsert (self, *args, **kwargs):
      '''
canInsert( (Box)arg1) -> bool :

    C++ signature :
        bool canInsert(Gaffer::Box const*)'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def errorSignal (self, *args, **kwargs):
      '''
errorSignal( (Node)arg1) -> ErrorSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug const*, Gaffer::Plug const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} errorSignal(Gaffer::Node {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def insert (self, *args, **kwargs):
      '''
insert( (Box)arg1) -> None :

    C++ signature :
        void insert(Gaffer::Box {lvalue})'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (BoxIO)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::BoxIO {lvalue},IECore::TypeId)

isInstanceOf( (BoxIO)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::BoxIO {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plug (self, *args, **kwargs):
      '''
plug( (BoxIO)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> plug(Gaffer::BoxIO {lvalue})'''
    ...
    def plugDirtiedSignal (self, *args, **kwargs):
      '''
plugDirtiedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugDirtiedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugInputChangedSignal (self, *args, **kwargs):
      '''
plugInputChangedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugInputChangedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugSetSignal (self, *args, **kwargs):
      '''
plugSetSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugSetSignal(Gaffer::Node {lvalue})'''
    ...
    def promote (self, *args, **kwargs):
      '''
promote( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> promote(Gaffer::Plug {lvalue})'''
    ...
    def promotedPlug (self, *args, **kwargs):
      '''
promotedPlug( (BoxIO)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> promotedPlug(Gaffer::BoxIO {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def scriptNode (self, *args, **kwargs):
      '''
scriptNode( (Node)arg1) -> object :

    C++ signature :
        Gaffer::ScriptNode* scriptNode(Gaffer::Node {lvalue})'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setup (self, plug=None):
      '''None'''
    ...
    def setupPromotedPlug (self, *args, **kwargs):
      '''
setupPromotedPlug( (BoxIO)arg1) -> None :

    C++ signature :
        void setupPromotedPlug(Gaffer::BoxIO {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (BoxIO)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::BoxIO {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (BoxIO)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::BoxIO {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def BoxIn (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='BoxIn')

'''      
    ...

class BoxIn:
    def BinaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ErrorSignal (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def UnaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (BoxIn)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::BoxIn,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (BoxIn)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::BoxIn,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def canInsert (self, *args, **kwargs):
      '''
canInsert( (Box)arg1) -> bool :

    C++ signature :
        bool canInsert(Gaffer::Box const*)'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def errorSignal (self, *args, **kwargs):
      '''
errorSignal( (Node)arg1) -> ErrorSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug const*, Gaffer::Plug const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} errorSignal(Gaffer::Node {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def insert (self, *args, **kwargs):
      '''
insert( (Box)arg1) -> None :

    C++ signature :
        void insert(Gaffer::Box {lvalue})'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (BoxIn)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::BoxIn {lvalue},IECore::TypeId)

isInstanceOf( (BoxIn)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::BoxIn {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plug (self, *args, **kwargs):
      '''
plug( (BoxIO)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> plug(Gaffer::BoxIO {lvalue})'''
    ...
    def plugDirtiedSignal (self, *args, **kwargs):
      '''
plugDirtiedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugDirtiedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugInputChangedSignal (self, *args, **kwargs):
      '''
plugInputChangedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugInputChangedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugSetSignal (self, *args, **kwargs):
      '''
plugSetSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugSetSignal(Gaffer::Node {lvalue})'''
    ...
    def promote (self, *args, **kwargs):
      '''
promote( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> promote(Gaffer::Plug {lvalue})'''
    ...
    def promotedPlug (self, *args, **kwargs):
      '''
promotedPlug( (BoxIO)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> promotedPlug(Gaffer::BoxIO {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def scriptNode (self, *args, **kwargs):
      '''
scriptNode( (Node)arg1) -> object :

    C++ signature :
        Gaffer::ScriptNode* scriptNode(Gaffer::Node {lvalue})'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setup (self, plug=None):
      '''None'''
    ...
    def setupPromotedPlug (self, *args, **kwargs):
      '''
setupPromotedPlug( (BoxIO)arg1) -> None :

    C++ signature :
        void setupPromotedPlug(Gaffer::BoxIO {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (BoxIn)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::BoxIn {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (BoxIn)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::BoxIn {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def BoxOut (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='BoxOut')

'''      
    ...

class BoxOut:
    def BinaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ErrorSignal (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def UnaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (BoxOut)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::BoxOut,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (BoxOut)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::BoxOut,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def canInsert (self, *args, **kwargs):
      '''
canInsert( (Box)arg1) -> bool :

    C++ signature :
        bool canInsert(Gaffer::Box const*)'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def errorSignal (self, *args, **kwargs):
      '''
errorSignal( (Node)arg1) -> ErrorSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug const*, Gaffer::Plug const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} errorSignal(Gaffer::Node {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def insert (self, *args, **kwargs):
      '''
insert( (Box)arg1) -> None :

    C++ signature :
        void insert(Gaffer::Box {lvalue})'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (BoxOut)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::BoxOut {lvalue},IECore::TypeId)

isInstanceOf( (BoxOut)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::BoxOut {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plug (self, *args, **kwargs):
      '''
plug( (BoxIO)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> plug(Gaffer::BoxIO {lvalue})'''
    ...
    def plugDirtiedSignal (self, *args, **kwargs):
      '''
plugDirtiedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugDirtiedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugInputChangedSignal (self, *args, **kwargs):
      '''
plugInputChangedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugInputChangedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugSetSignal (self, *args, **kwargs):
      '''
plugSetSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugSetSignal(Gaffer::Node {lvalue})'''
    ...
    def promote (self, *args, **kwargs):
      '''
promote( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> promote(Gaffer::Plug {lvalue})'''
    ...
    def promotedPlug (self, *args, **kwargs):
      '''
promotedPlug( (BoxIO)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> promotedPlug(Gaffer::BoxIO {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def scriptNode (self, *args, **kwargs):
      '''
scriptNode( (Node)arg1) -> object :

    C++ signature :
        Gaffer::ScriptNode* scriptNode(Gaffer::Node {lvalue})'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setup (self, plug=None):
      '''None'''
    ...
    def setupPromotedPlug (self, *args, **kwargs):
      '''
setupPromotedPlug( (BoxIO)arg1) -> None :

    C++ signature :
        void setupPromotedPlug(Gaffer::BoxIO {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (BoxOut)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::BoxOut {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (BoxOut)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::BoxOut {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def ChildSet (*args):
      '''
__init__(_object*, boost::intrusive_ptr<Gaffer::GraphComponent>)

'''      
    ...

class ChildSet:
    def MemberSignal (self, *args, **kwargs):
      '''None'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def contains (self, *args, **kwargs):
      '''
contains( (Set)arg1, (RunTimeTyped)arg2) -> bool :

    C++ signature :
        bool contains(Gaffer::Set {lvalue},IECore::RunTimeTyped const*)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (ChildSet)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::ChildSet {lvalue},IECore::TypeId)

isInstanceOf( (ChildSet)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::ChildSet {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def memberAddedSignal (self, *args, **kwargs):
      '''
memberAddedSignal( (Set)arg1) -> MemberSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Set*, IECore::RunTimeTyped*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} memberAddedSignal(Gaffer::Set {lvalue})'''
    ...
    def memberRemovedSignal (self, *args, **kwargs):
      '''
memberRemovedSignal( (Set)arg1) -> MemberSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Set*, IECore::RunTimeTyped*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} memberRemovedSignal(Gaffer::Set {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def size (self, *args, **kwargs):
      '''
size( (Set)arg1) -> int :

    C++ signature :
        unsigned long size(Gaffer::Set {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (ChildSet)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::ChildSet {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (ChildSet)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::ChildSet {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...

def Collect (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='Collect')

'''      
    ...

class Collect:
    def BinaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ErrorSignal (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def UnaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (Collect)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::Collect,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (Collect)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::Collect,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def addInput (self, *args, **kwargs):
      '''
addInput( (Collect)arg1, (ValuePlug)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::ValuePlug> addInput(Gaffer::Collect {lvalue},Gaffer::ValuePlug)'''
    ...
    def affects (self, *args, **kwargs):
      '''
affects( (Collect)arg1, (Plug)arg2) -> list :

    C++ signature :
        boost::python::list affects(Gaffer::Collect,Gaffer::Plug const*)'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def canAddInput (self, *args, **kwargs):
      '''
canAddInput( (Collect)arg1, (ValuePlug)arg2) -> bool :

    C++ signature :
        bool canAddInput(Gaffer::Collect {lvalue},Gaffer::ValuePlug const*)'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def correspondingInput (self, *args, **kwargs):
      '''
correspondingInput( (Collect)arg1, (Plug)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> correspondingInput(Gaffer::Collect {lvalue},Gaffer::Plug const*)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def enabledPlug (self, *args, **kwargs):
      '''
enabledPlug( (Collect)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::TypedPlug<bool> > enabledPlug(Gaffer::Collect {lvalue})'''
    ...
    def errorSignal (self, *args, **kwargs):
      '''
errorSignal( (Node)arg1) -> ErrorSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug const*, Gaffer::Plug const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} errorSignal(Gaffer::Node {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def inputPlugForOutput (self, *args, **kwargs):
      '''
inputPlugForOutput( (Collect)arg1, (ValuePlug)arg2) -> object :

    C++ signature :
        Gaffer::ValuePlug* inputPlugForOutput(Gaffer::Collect {lvalue},Gaffer::ValuePlug const*)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (Collect)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Collect {lvalue},IECore::TypeId)

isInstanceOf( (Collect)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Collect {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputPlugForInput (self, *args, **kwargs):
      '''
outputPlugForInput( (Collect)arg1, (ValuePlug)arg2) -> object :

    C++ signature :
        Gaffer::ValuePlug* outputPlugForInput(Gaffer::Collect {lvalue},Gaffer::ValuePlug const*)'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plugDirtiedSignal (self, *args, **kwargs):
      '''
plugDirtiedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugDirtiedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugInputChangedSignal (self, *args, **kwargs):
      '''
plugInputChangedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugInputChangedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugSetSignal (self, *args, **kwargs):
      '''
plugSetSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugSetSignal(Gaffer::Node {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeInput (self, *args, **kwargs):
      '''
removeInput( (Collect)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void removeInput(Gaffer::Collect {lvalue},Gaffer::ValuePlug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def scriptNode (self, *args, **kwargs):
      '''
scriptNode( (Node)arg1) -> object :

    C++ signature :
        Gaffer::ScriptNode* scriptNode(Gaffer::Node {lvalue})'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (Collect)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::Collect {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (Collect)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::Collect {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def Color3fPlug (*args):
      '''
__init__(_object*, char const* name='Color3fPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, Imath_3_1::Color3<float> defaultValue=Color3f(0, 0, 0), Imath_3_1::Color3<float> minValue=Color3f(-3.40282347e+38, -3.40282347e+38, -3.40282347e+38), Imath_3_1::Color3<float> maxValue=Color3f(3.40282347e+38, 3.40282347e+38, 3.40282347e+38), unsigned int flags=Gaffer._Gaffer.Flags.Default, IECore::GeometricData::Interpretation interpretation=IECore._IECore.Interpretation.Numeric)

'''      
    ...

class Color3fPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ValueType (self, *args, **kwargs):
      '''Color3f'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (Color3fPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::CompoundNumericPlug<Imath_3_1::Color3<float> >,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (Color3fPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::CompoundNumericPlug<Imath_3_1::Color3<float> >,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (Color3fPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::CompoundNumericPlug<Imath_3_1::Color3<float> >,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def canGang (self, *args, **kwargs):
      '''
canGang( (Color3fPlug)arg1) -> bool :

    C++ signature :
        bool canGang(Gaffer::CompoundNumericPlug<Imath_3_1::Color3<float> > {lvalue})'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (Color3fPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::CompoundNumericPlug<Imath_3_1::Color3<float> > {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def defaultValue (self, *args, **kwargs):
      '''
defaultValue( (Color3fPlug)arg1) -> Color3f :

    C++ signature :
        Imath_3_1::Color3<float> defaultValue(Gaffer::CompoundNumericPlug<Imath_3_1::Color3<float> > {lvalue})'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def gang (self, *args, **kwargs):
      '''
gang( (Color3fPlug)arg1) -> None :

    C++ signature :
        void gang(Gaffer::CompoundNumericPlug<Imath_3_1::Color3<float> >*)'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getValue (self, *args, **kwargs):
      '''
getValue( (Color3fPlug)arg1) -> Color3f :

    C++ signature :
        Imath_3_1::Color3<float> getValue(Gaffer::CompoundNumericPlug<Imath_3_1::Color3<float> > const*)'''
    ...
    def hasMaxValue (self, *args, **kwargs):
      '''
hasMaxValue( (Color3fPlug)arg1) -> bool :

    C++ signature :
        bool hasMaxValue(Gaffer::CompoundNumericPlug<Imath_3_1::Color3<float> > {lvalue})'''
    ...
    def hasMinValue (self, *args, **kwargs):
      '''
hasMinValue( (Color3fPlug)arg1) -> bool :

    C++ signature :
        bool hasMinValue(Gaffer::CompoundNumericPlug<Imath_3_1::Color3<float> > {lvalue})'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def interpretation (self, *args, **kwargs):
      '''
interpretation( (Color3fPlug)arg1) -> Interpretation :

    C++ signature :
        IECore::GeometricData::Interpretation interpretation(Gaffer::CompoundNumericPlug<Imath_3_1::Color3<float> > {lvalue})'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isGanged (self, *args, **kwargs):
      '''
isGanged( (Color3fPlug)arg1) -> bool :

    C++ signature :
        bool isGanged(Gaffer::CompoundNumericPlug<Imath_3_1::Color3<float> > {lvalue})'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (Color3fPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::CompoundNumericPlug<Imath_3_1::Color3<float> > {lvalue},IECore::TypeId)

isInstanceOf( (Color3fPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::CompoundNumericPlug<Imath_3_1::Color3<float> > {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def maxValue (self, *args, **kwargs):
      '''
maxValue( (Color3fPlug)arg1) -> Color3f :

    C++ signature :
        Imath_3_1::Color3<float> maxValue(Gaffer::CompoundNumericPlug<Imath_3_1::Color3<float> > {lvalue})'''
    ...
    def minValue (self, *args, **kwargs):
      '''
minValue( (Color3fPlug)arg1) -> Color3f :

    C++ signature :
        Imath_3_1::Color3<float> minValue(Gaffer::CompoundNumericPlug<Imath_3_1::Color3<float> > {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (Color3fPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::CompoundNumericPlug<Imath_3_1::Color3<float> > {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def setValue (self, *args, **kwargs):
      '''
setValue( (Color3fPlug)arg1, (Color3f)arg2) -> None :

    C++ signature :
        void setValue(Gaffer::CompoundNumericPlug<Imath_3_1::Color3<float> >*,Imath_3_1::Color3<float>)

setValue( (Color3fPlug)arg1, (V3f)arg2) -> None :

    C++ signature :
        void setValue(Gaffer::CompoundNumericPlug<Imath_3_1::Color3<float> >*,Imath_3_1::Vec3<float>)'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (Color3fPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::CompoundNumericPlug<Imath_3_1::Color3<float> > {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (Color3fPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::CompoundNumericPlug<Imath_3_1::Color3<float> > {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def ungang (self, *args, **kwargs):
      '''
ungang( (Color3fPlug)arg1) -> None :

    C++ signature :
        void ungang(Gaffer::CompoundNumericPlug<Imath_3_1::Color3<float> >*)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def Color3fVectorDataPlug (*args):
      '''
__init__(boost::python::api::object, char const* name='Color3fVectorDataPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, boost::intrusive_ptr<IECore::TypedData<std::vector<Imath_3_1::Color3<float>, std::allocator<Imath_3_1::Color3<float> > > > > defaultValue, unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class Color3fVectorDataPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ValueType (self, *args, **kwargs):
      '''Color3f-type vector class derived from Data class.
This class behaves like the native python lists, except that it only accepts Color3f values.
The copy constructor accepts another instance of this class or a python list containing Color3f
or any other python built-in type that is convertible into it.
It accepts slicing, negative indexing and special functions like extend, insert, etc.
'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (Color3fVectorDataPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Color3<float>, std::allocator<Imath_3_1::Color3<float> > > > >,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (Color3fVectorDataPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Color3<float>, std::allocator<Imath_3_1::Color3<float> > > > >,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (Color3fVectorDataPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Color3<float>, std::allocator<Imath_3_1::Color3<float> > > > >,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (Color3fVectorDataPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Color3<float>, std::allocator<Imath_3_1::Color3<float> > > > > {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def defaultValue (self, *args, **kwargs):
      '''
defaultValue( (object)arg1 [, (bool)_copy=True]) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::TypedData<std::vector<Imath_3_1::Color3<float>, std::allocator<Imath_3_1::Color3<float> > > > > defaultValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Color3<float>, std::allocator<Imath_3_1::Color3<float> > > > > > [,bool=True])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getValue (self, *args, **kwargs):
      '''
getValue( (object)arg1 [, (MurmurHash)_precomputedHash=None [, (bool)_copy=True]]) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::Object> getValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Color3<float>, std::allocator<Imath_3_1::Color3<float> > > > > > [,IECore::MurmurHash const*=None [,bool=True]])'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (Color3fVectorDataPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Color3<float>, std::allocator<Imath_3_1::Color3<float> > > > > {lvalue},IECore::TypeId)

isInstanceOf( (Color3fVectorDataPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Color3<float>, std::allocator<Imath_3_1::Color3<float> > > > > {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (Color3fVectorDataPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Color3<float>, std::allocator<Imath_3_1::Color3<float> > > > > {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def setValue (self, *args, **kwargs):
      '''
setValue( (object)arg1, (object)value [, (bool)_copy=True]) -> None :

    C++ signature :
        void setValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Color3<float>, std::allocator<Imath_3_1::Color3<float> > > > > >,boost::intrusive_ptr<IECore::TypedData<std::vector<Imath_3_1::Color3<float>, std::allocator<Imath_3_1::Color3<float> > > > > [,bool=True])'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (Color3fVectorDataPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Color3<float>, std::allocator<Imath_3_1::Color3<float> > > > > {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (Color3fVectorDataPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Color3<float>, std::allocator<Imath_3_1::Color3<float> > > > > {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def Color4fPlug (*args):
      '''
__init__(_object*, char const* name='Color4fPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, Imath_3_1::Color4<float> defaultValue=Color4f(0, 0, 0, 0), Imath_3_1::Color4<float> minValue=Color4f(-3.40282347e+38, -3.40282347e+38, -3.40282347e+38, -3.40282347e+38), Imath_3_1::Color4<float> maxValue=Color4f(3.40282347e+38, 3.40282347e+38, 3.40282347e+38, 3.40282347e+38), unsigned int flags=Gaffer._Gaffer.Flags.Default, IECore::GeometricData::Interpretation interpretation=IECore._IECore.Interpretation.Numeric)

'''      
    ...

class Color4fPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ValueType (self, *args, **kwargs):
      '''Color4f'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (Color4fPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::CompoundNumericPlug<Imath_3_1::Color4<float> >,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (Color4fPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::CompoundNumericPlug<Imath_3_1::Color4<float> >,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (Color4fPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::CompoundNumericPlug<Imath_3_1::Color4<float> >,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def canGang (self, *args, **kwargs):
      '''
canGang( (Color4fPlug)arg1) -> bool :

    C++ signature :
        bool canGang(Gaffer::CompoundNumericPlug<Imath_3_1::Color4<float> > {lvalue})'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (Color4fPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::CompoundNumericPlug<Imath_3_1::Color4<float> > {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def defaultValue (self, *args, **kwargs):
      '''
defaultValue( (Color4fPlug)arg1) -> Color4f :

    C++ signature :
        Imath_3_1::Color4<float> defaultValue(Gaffer::CompoundNumericPlug<Imath_3_1::Color4<float> > {lvalue})'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def gang (self, *args, **kwargs):
      '''
gang( (Color4fPlug)arg1) -> None :

    C++ signature :
        void gang(Gaffer::CompoundNumericPlug<Imath_3_1::Color4<float> >*)'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getValue (self, *args, **kwargs):
      '''
getValue( (Color4fPlug)arg1) -> Color4f :

    C++ signature :
        Imath_3_1::Color4<float> getValue(Gaffer::CompoundNumericPlug<Imath_3_1::Color4<float> > const*)'''
    ...
    def hasMaxValue (self, *args, **kwargs):
      '''
hasMaxValue( (Color4fPlug)arg1) -> bool :

    C++ signature :
        bool hasMaxValue(Gaffer::CompoundNumericPlug<Imath_3_1::Color4<float> > {lvalue})'''
    ...
    def hasMinValue (self, *args, **kwargs):
      '''
hasMinValue( (Color4fPlug)arg1) -> bool :

    C++ signature :
        bool hasMinValue(Gaffer::CompoundNumericPlug<Imath_3_1::Color4<float> > {lvalue})'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def interpretation (self, *args, **kwargs):
      '''
interpretation( (Color4fPlug)arg1) -> Interpretation :

    C++ signature :
        IECore::GeometricData::Interpretation interpretation(Gaffer::CompoundNumericPlug<Imath_3_1::Color4<float> > {lvalue})'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isGanged (self, *args, **kwargs):
      '''
isGanged( (Color4fPlug)arg1) -> bool :

    C++ signature :
        bool isGanged(Gaffer::CompoundNumericPlug<Imath_3_1::Color4<float> > {lvalue})'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (Color4fPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::CompoundNumericPlug<Imath_3_1::Color4<float> > {lvalue},IECore::TypeId)

isInstanceOf( (Color4fPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::CompoundNumericPlug<Imath_3_1::Color4<float> > {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def maxValue (self, *args, **kwargs):
      '''
maxValue( (Color4fPlug)arg1) -> Color4f :

    C++ signature :
        Imath_3_1::Color4<float> maxValue(Gaffer::CompoundNumericPlug<Imath_3_1::Color4<float> > {lvalue})'''
    ...
    def minValue (self, *args, **kwargs):
      '''
minValue( (Color4fPlug)arg1) -> Color4f :

    C++ signature :
        Imath_3_1::Color4<float> minValue(Gaffer::CompoundNumericPlug<Imath_3_1::Color4<float> > {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (Color4fPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::CompoundNumericPlug<Imath_3_1::Color4<float> > {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def setValue (self, *args, **kwargs):
      '''
setValue( (Color4fPlug)arg1, (Color4f)arg2) -> None :

    C++ signature :
        void setValue(Gaffer::CompoundNumericPlug<Imath_3_1::Color4<float> >*,Imath_3_1::Color4<float>)'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (Color4fPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::CompoundNumericPlug<Imath_3_1::Color4<float> > {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (Color4fPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::CompoundNumericPlug<Imath_3_1::Color4<float> > {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def ungang (self, *args, **kwargs):
      '''
ungang( (Color4fPlug)arg1) -> None :

    C++ signature :
        void ungang(Gaffer::CompoundNumericPlug<Imath_3_1::Color4<float> >*)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def Color4fVectorDataPlug (*args):
      '''
__init__(boost::python::api::object, char const* name='Color4fVectorDataPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, boost::intrusive_ptr<IECore::TypedData<std::vector<Imath_3_1::Color4<float>, std::allocator<Imath_3_1::Color4<float> > > > > defaultValue, unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class Color4fVectorDataPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ValueType (self, *args, **kwargs):
      '''Color4f-type vector class derived from Data class.
This class behaves like the native python lists, except that it only accepts Color4f values.
The copy constructor accepts another instance of this class or a python list containing Color4f
or any other python built-in type that is convertible into it.
It accepts slicing, negative indexing and special functions like extend, insert, etc.
'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (Color4fVectorDataPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Color4<float>, std::allocator<Imath_3_1::Color4<float> > > > >,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (Color4fVectorDataPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Color4<float>, std::allocator<Imath_3_1::Color4<float> > > > >,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (Color4fVectorDataPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Color4<float>, std::allocator<Imath_3_1::Color4<float> > > > >,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (Color4fVectorDataPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Color4<float>, std::allocator<Imath_3_1::Color4<float> > > > > {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def defaultValue (self, *args, **kwargs):
      '''
defaultValue( (object)arg1 [, (bool)_copy=True]) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::TypedData<std::vector<Imath_3_1::Color4<float>, std::allocator<Imath_3_1::Color4<float> > > > > defaultValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Color4<float>, std::allocator<Imath_3_1::Color4<float> > > > > > [,bool=True])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getValue (self, *args, **kwargs):
      '''
getValue( (object)arg1 [, (MurmurHash)_precomputedHash=None [, (bool)_copy=True]]) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::Object> getValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Color4<float>, std::allocator<Imath_3_1::Color4<float> > > > > > [,IECore::MurmurHash const*=None [,bool=True]])'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (Color4fVectorDataPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Color4<float>, std::allocator<Imath_3_1::Color4<float> > > > > {lvalue},IECore::TypeId)

isInstanceOf( (Color4fVectorDataPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Color4<float>, std::allocator<Imath_3_1::Color4<float> > > > > {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (Color4fVectorDataPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Color4<float>, std::allocator<Imath_3_1::Color4<float> > > > > {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def setValue (self, *args, **kwargs):
      '''
setValue( (object)arg1, (object)value [, (bool)_copy=True]) -> None :

    C++ signature :
        void setValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Color4<float>, std::allocator<Imath_3_1::Color4<float> > > > > >,boost::intrusive_ptr<IECore::TypedData<std::vector<Imath_3_1::Color4<float>, std::allocator<Imath_3_1::Color4<float> > > > > [,bool=True])'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (Color4fVectorDataPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Color4<float>, std::allocator<Imath_3_1::Color4<float> > > > > {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (Color4fVectorDataPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Color4<float>, std::allocator<Imath_3_1::Color4<float> > > > > {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def CompoundDataPlug (*args):
      '''
__init__(boost::python::api::object, char const* name='CompoundDataPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, unsigned int flags=Gaffer._Gaffer.Flags.Default, boost::python::tuple children=())

'''      
    ...

class CompoundDataPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def MemberPlug (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (CompoundDataPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::CompoundDataPlug,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (CompoundDataPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::CompoundDataPlug,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (CompoundDataPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::CompoundDataPlug,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def addMember (self, name, defaultValueOrValuePlug, plugName='member1', plugFlags=15):
      '''None'''
    ...
    def addMembers (self, *args, **kwargs):
      '''
addMembers( (CompoundDataPlug)arg1, (CompoundData)members [, (bool)useNameAsPlugName=False]) -> None :

    C++ signature :
        void addMembers(Gaffer::CompoundDataPlug {lvalue},IECore::CompoundData const* [,bool=False])'''
    ...
    def addOptionalMember (self, name, defaultValueOrValuePlug, plugName='member1', plugFlags=15, enabled=False):
      '''None'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (CompoundDataPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::CompoundDataPlug {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fillCompoundData (self, *args, **kwargs):
      '''
fillCompoundData( (CompoundDataPlug)arg1, (CompoundData)arg2) -> None :

    C++ signature :
        void fillCompoundData(Gaffer::CompoundDataPlug,IECore::CompoundData*)'''
    ...
    def fillCompoundObject (self, *args, **kwargs):
      '''
fillCompoundObject( (CompoundDataPlug)arg1, (CompoundObject)arg2) -> None :

    C++ signature :
        void fillCompoundObject(Gaffer::CompoundDataPlug,IECore::CompoundObject*)'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (CompoundDataPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::CompoundDataPlug {lvalue},IECore::TypeId)

isInstanceOf( (CompoundDataPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::CompoundDataPlug {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def memberDataAndName (self, *args, **kwargs):
      '''
memberDataAndName( (CompoundDataPlug)arg1, (NameValuePlug)arg2) -> tuple :

    C++ signature :
        boost::python::tuple memberDataAndName(Gaffer::CompoundDataPlug {lvalue},Gaffer::NameValuePlug const*)'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (CompoundDataPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::CompoundDataPlug {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (CompoundDataPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::CompoundDataPlug {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (CompoundDataPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::CompoundDataPlug {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def CompoundObjectPlug (*args):
      '''
__init__(boost::python::api::object, char const* name='CompoundObjectPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, boost::intrusive_ptr<IECore::CompoundObject> defaultValue, unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class CompoundObjectPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ValueType (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (CompoundObjectPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::TypedObjectPlug<IECore::CompoundObject>,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (CompoundObjectPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::TypedObjectPlug<IECore::CompoundObject>,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (CompoundObjectPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::TypedObjectPlug<IECore::CompoundObject>,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (CompoundObjectPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::TypedObjectPlug<IECore::CompoundObject> {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def defaultValue (self, *args, **kwargs):
      '''
defaultValue( (object)arg1 [, (bool)_copy=True]) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::CompoundObject> defaultValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::CompoundObject> > [,bool=True])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getValue (self, *args, **kwargs):
      '''
getValue( (object)arg1 [, (MurmurHash)_precomputedHash=None [, (bool)_copy=True]]) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::Object> getValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::CompoundObject> > [,IECore::MurmurHash const*=None [,bool=True]])'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (CompoundObjectPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedObjectPlug<IECore::CompoundObject> {lvalue},IECore::TypeId)

isInstanceOf( (CompoundObjectPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedObjectPlug<IECore::CompoundObject> {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (CompoundObjectPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::TypedObjectPlug<IECore::CompoundObject> {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def setValue (self, *args, **kwargs):
      '''
setValue( (object)arg1, (object)value [, (bool)_copy=True]) -> None :

    C++ signature :
        void setValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::CompoundObject> >,boost::intrusive_ptr<IECore::CompoundObject> [,bool=True])'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (CompoundObjectPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::TypedObjectPlug<IECore::CompoundObject> {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (CompoundObjectPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::TypedObjectPlug<IECore::CompoundObject> {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def CompoundPathFilter (*args):
      '''
__init__(boost::python::api::object, boost::python::api::object filters=[], boost::intrusive_ptr<IECore::CompoundData> userData=None)

'''      
    ...

class CompoundPathFilter:
    def PathChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def addFilter (self, *args, **kwargs):
      '''
addFilter( (CompoundPathFilter)arg1, (object)arg2) -> None :

    C++ signature :
        void addFilter(Gaffer::CompoundPathFilter {lvalue},boost::intrusive_ptr<Gaffer::PathFilter>)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def changedSignal (self, *args, **kwargs):
      '''
changedSignal( (PathFilter)arg1) -> PathChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::PathFilter*), Gaffer::Signals::DefaultCombiner<void> > {lvalue} changedSignal(Gaffer::PathFilter {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def filter (self, *args, **kwargs):
      '''
filter( (PathFilter)arg1, (list)paths [, (Canceller)canceller=None]) -> list :

    C++ signature :
        boost::python::list filter(Gaffer::PathFilter {lvalue},boost::python::list [,IECore::Canceller const*=None])'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getEnabled (self, *args, **kwargs):
      '''
getEnabled( (PathFilter)arg1) -> bool :

    C++ signature :
        bool getEnabled(Gaffer::PathFilter {lvalue})'''
    ...
    def getFilters (self, *args, **kwargs):
      '''
getFilters( (CompoundPathFilter)arg1) -> list :

    C++ signature :
        boost::python::list getFilters(Gaffer::CompoundPathFilter)'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (CompoundPathFilter)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::CompoundPathFilter {lvalue},IECore::TypeId)

isInstanceOf( (CompoundPathFilter)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::CompoundPathFilter {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def removeFilter (self, *args, **kwargs):
      '''
removeFilter( (CompoundPathFilter)arg1, (PathFilter)arg2) -> None :

    C++ signature :
        void removeFilter(Gaffer::CompoundPathFilter {lvalue},Gaffer::PathFilter*)'''
    ...
    def setEnabled (self, *args, **kwargs):
      '''
setEnabled( (PathFilter)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnabled(Gaffer::PathFilter {lvalue},bool)'''
    ...
    def setFilters (self, *args, **kwargs):
      '''
setFilters( (CompoundPathFilter)arg1, (object)arg2) -> None :

    C++ signature :
        void setFilters(Gaffer::CompoundPathFilter {lvalue},boost::python::api::object)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (CompoundPathFilter)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::CompoundPathFilter {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (CompoundPathFilter)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::CompoundPathFilter {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def userData (self, *args, **kwargs):
      '''
userData( (PathFilter)arg1) -> object :

    C++ signature :
        IECore::CompoundData* userData(Gaffer::PathFilter {lvalue})'''
    ...

def CompoundPlug (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='Plug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class CompoundPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (Plug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::Plug,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (Plug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::Plug,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (Plug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::Plug,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (Plug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::Plug {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (Plug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Plug {lvalue},IECore::TypeId)

isInstanceOf( (Plug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Plug {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (Plug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::Plug {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (Plug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::Plug {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (Plug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::Plug {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def ComputeNode (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='ComputeNode')

'''      
    ...

class ComputeNode:
    def BinaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ErrorSignal (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def UnaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (ComputeNode)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::ComputeNode,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (ComputeNode)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::ComputeNode,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def affects (self, *args, **kwargs):
      '''
affects( (ComputeNode)arg1, (Plug)arg2) -> list :

    C++ signature :
        boost::python::list affects(Gaffer::ComputeNode,Gaffer::Plug const*)'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def correspondingInput (self, *args, **kwargs):
      '''
correspondingInput( (ComputeNode)arg1, (Plug)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> correspondingInput(Gaffer::ComputeNode {lvalue},Gaffer::Plug const*)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def enabledPlug (self, *args, **kwargs):
      '''
enabledPlug( (ComputeNode)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::TypedPlug<bool> > enabledPlug(Gaffer::ComputeNode {lvalue})'''
    ...
    def errorSignal (self, *args, **kwargs):
      '''
errorSignal( (Node)arg1) -> ErrorSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug const*, Gaffer::Plug const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} errorSignal(Gaffer::Node {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (ComputeNode)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::ComputeNode {lvalue},IECore::TypeId)

isInstanceOf( (ComputeNode)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::ComputeNode {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plugDirtiedSignal (self, *args, **kwargs):
      '''
plugDirtiedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugDirtiedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugInputChangedSignal (self, *args, **kwargs):
      '''
plugInputChangedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugInputChangedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugSetSignal (self, *args, **kwargs):
      '''
plugSetSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugSetSignal(Gaffer::Node {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def scriptNode (self, *args, **kwargs):
      '''
scriptNode( (Node)arg1) -> object :

    C++ signature :
        Gaffer::ScriptNode* scriptNode(Gaffer::Node {lvalue})'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (ComputeNode)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::ComputeNode {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (ComputeNode)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::ComputeNode {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def Connection (*args):
      '''
__init__(_object*, Gaffer::Signals::Connection)

'''      
    ...

class Connection:
    def connected (self, *args, **kwargs):
      '''
connected( (Connection)arg1) -> bool :

    C++ signature :
        bool connected(Gaffer::Signals::Connection {lvalue})'''
    ...
    def disconnect (self, *args, **kwargs):
      '''
disconnect( (Connection)arg1) -> None :

    C++ signature :
        void disconnect(Gaffer::Signals::Connection {lvalue})'''
    ...
    def getBlocked (self, *args, **kwargs):
      '''
getBlocked( (Connection)arg1) -> bool :

    C++ signature :
        bool getBlocked(Gaffer::Signals::Connection {lvalue})'''
    ...
    def setBlocked (self, *args, **kwargs):
      '''
setBlocked( (Connection)arg1, (bool)blocked) -> None :

    C++ signature :
        void setBlocked(Gaffer::Signals::Connection {lvalue},bool)'''
    ...

def Context (*args):
      '''
__init__(_object*, Gaffer::Context other, bool omitCanceller)
__init__(_object*, Gaffer::Context other, IECore::Canceller canceller)
__init__(_object*, Gaffer::Context other)
__init__(_object*)

'''      
    ...

class Context:
    def ChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Substitutions (self, *args, **kwargs):
      '''None'''
    ...
    def _Scope (self, *args, **kwargs):
      '''None'''
    ...
    def canceller (self, *args, **kwargs):
      '''
canceller( (Context)arg1) -> Canceller :

    C++ signature :
        IECore::Canceller const* canceller(Gaffer::Context {lvalue})'''
    ...
    def changedSignal (self, *args, **kwargs):
      '''
changedSignal( (Context)arg1) -> ChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Context const*, IECore::InternedString const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} changedSignal(Gaffer::Context {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def current (self, *args, **kwargs):
      '''
current() -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Context> current()'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def get (self, *args, **kwargs):
      '''
get( (Context)arg1, (InternedString)arg2 [, (object)defaultValue=None]) -> object :

    C++ signature :
        boost::python::api::object get(Gaffer::Context {lvalue},IECore::InternedString [,boost::python::api::object=None])'''
    ...
    def getFrame (self, *args, **kwargs):
      '''
getFrame( (Context)arg1) -> float :

    C++ signature :
        float getFrame(Gaffer::Context {lvalue})'''
    ...
    def getFramesPerSecond (self, *args, **kwargs):
      '''
getFramesPerSecond( (Context)arg1) -> float :

    C++ signature :
        float getFramesPerSecond(Gaffer::Context {lvalue})'''
    ...
    def getTime (self, *args, **kwargs):
      '''
getTime( (Context)arg1) -> float :

    C++ signature :
        float getTime(Gaffer::Context {lvalue})'''
    ...
    def hasSubstitutions (self, *args, **kwargs):
      '''
hasSubstitutions( (object)arg1) -> bool :

    C++ signature :
        bool hasSubstitutions(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (Context)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::Context {lvalue})'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (Context)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::Context)'''
    ...
    def names (self, *args, **kwargs):
      '''
names( (Context)arg1) -> list :

    C++ signature :
        boost::python::list names(Gaffer::Context)'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def remove (self, *args, **kwargs):
      '''
remove( (Context)arg1, (InternedString)arg2) -> None :

    C++ signature :
        void remove(Gaffer::Context {lvalue},IECore::InternedString)'''
    ...
    def removeMatching (self, *args, **kwargs):
      '''
removeMatching( (Context)arg1, (object)arg2) -> None :

    C++ signature :
        void removeMatching(Gaffer::Context {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def set (self, *args, **kwargs):
      '''
set( (Context)arg1, (InternedString)arg2, (float)arg3) -> None :

    C++ signature :
        void set(Gaffer::Context {lvalue},IECore::InternedString,float)

set( (Context)arg1, (InternedString)arg2, (int)arg3) -> None :

    C++ signature :
        void set(Gaffer::Context {lvalue},IECore::InternedString,int)

set( (Context)arg1, (InternedString)arg2, (object)arg3) -> None :

    C++ signature :
        void set(Gaffer::Context {lvalue},IECore::InternedString,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)

set( (Context)arg1, (InternedString)arg2, (V2i)arg3) -> None :

    C++ signature :
        void set(Gaffer::Context {lvalue},IECore::InternedString,Imath_3_1::Vec2<int>)

set( (Context)arg1, (InternedString)arg2, (V3i)arg3) -> None :

    C++ signature :
        void set(Gaffer::Context {lvalue},IECore::InternedString,Imath_3_1::Vec3<int>)

set( (Context)arg1, (InternedString)arg2, (V2f)arg3) -> None :

    C++ signature :
        void set(Gaffer::Context {lvalue},IECore::InternedString,Imath_3_1::Vec2<float>)

set( (Context)arg1, (InternedString)arg2, (V3f)arg3) -> None :

    C++ signature :
        void set(Gaffer::Context {lvalue},IECore::InternedString,Imath_3_1::Vec3<float>)

set( (Context)arg1, (InternedString)arg2, (Color3f)arg3) -> None :

    C++ signature :
        void set(Gaffer::Context {lvalue},IECore::InternedString,Imath_3_1::Color3<float>)

set( (Context)arg1, (InternedString)arg2, (Box2i)arg3) -> None :

    C++ signature :
        void set(Gaffer::Context {lvalue},IECore::InternedString,Imath_3_1::Box<Imath_3_1::Vec2<int> >)

set( (Context)arg1, (InternedString)arg2, (Data)arg3) -> None :

    C++ signature :
        void set(Gaffer::Context {lvalue},IECore::InternedString,IECore::Data const*)'''
    ...
    def setFrame (self, *args, **kwargs):
      '''
setFrame( (Context)arg1, (float)arg2) -> None :

    C++ signature :
        void setFrame(Gaffer::Context {lvalue},float)'''
    ...
    def setFramesPerSecond (self, *args, **kwargs):
      '''
setFramesPerSecond( (Context)arg1, (float)arg2) -> None :

    C++ signature :
        void setFramesPerSecond(Gaffer::Context {lvalue},float)'''
    ...
    def setTime (self, *args, **kwargs):
      '''
setTime( (Context)arg1, (float)arg2) -> None :

    C++ signature :
        void setTime(Gaffer::Context {lvalue},float)'''
    ...
    def substitute (self, *args, **kwargs):
      '''
substitute( (Context)arg1, (object)input [, (int)substitutions=IECore.StringAlgo.Substitutions.AllSubstitutions]) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > substitute(Gaffer::Context {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > [,unsigned int=IECore.StringAlgo.Substitutions.AllSubstitutions])'''
    ...
    def substitutions (self, *args, **kwargs):
      '''
substitutions( (object)arg1) -> int :

    C++ signature :
        unsigned int substitutions(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def variableHash (self, *args, **kwargs):
      '''
variableHash( (Context)arg1, (InternedString)arg2) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash variableHash(Gaffer::Context {lvalue},IECore::InternedString)'''
    ...

def ContextMonitor (*args):
      '''
__init__(_object*, Gaffer::GraphComponent const* root=None)

'''      
    ...

class ContextMonitor:
    def Statistics (self, *args, **kwargs):
      '''None'''
    ...
    def _Scope (self, *args, **kwargs):
      '''None'''
    ...
    def allStatistics (self, *args, **kwargs):
      '''
allStatistics( (ContextMonitor)arg1) -> dict :

    C++ signature :
        boost::python::dict allStatistics(Gaffer::ContextMonitor {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def combinedStatistics (self, *args, **kwargs):
      '''
combinedStatistics( (ContextMonitor)arg1) -> Statistics :

    C++ signature :
        Gaffer::ContextMonitor::Statistics combinedStatistics(Gaffer::ContextMonitor {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def plugStatistics (self, *args, **kwargs):
      '''
plugStatistics( (ContextMonitor)arg1, (Plug)arg2) -> Statistics :

    C++ signature :
        Gaffer::ContextMonitor::Statistics plugStatistics(Gaffer::ContextMonitor {lvalue},Gaffer::Plug const*)'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...

def ContextProcessor (*args):
      '''

'''      
    ...

class ContextProcessor:
    def BinaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ErrorSignal (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def UnaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (ContextProcessor)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::ContextProcessor,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (ContextProcessor)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::ContextProcessor,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def affects (self, *args, **kwargs):
      '''
affects( (ContextProcessor)arg1, (Plug)arg2) -> list :

    C++ signature :
        boost::python::list affects(Gaffer::ContextProcessor,Gaffer::Plug const*)'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def correspondingInput (self, *args, **kwargs):
      '''
correspondingInput( (ContextProcessor)arg1, (Plug)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> correspondingInput(Gaffer::ContextProcessor {lvalue},Gaffer::Plug const*)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def enabledPlug (self, *args, **kwargs):
      '''
enabledPlug( (ContextProcessor)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::TypedPlug<bool> > enabledPlug(Gaffer::ContextProcessor {lvalue})'''
    ...
    def errorSignal (self, *args, **kwargs):
      '''
errorSignal( (Node)arg1) -> ErrorSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug const*, Gaffer::Plug const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} errorSignal(Gaffer::Node {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def inPlugContext (self, *args, **kwargs):
      '''
inPlugContext( (ContextProcessor)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Context> inPlugContext(Gaffer::ContextProcessor)'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (ContextProcessor)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::ContextProcessor {lvalue},IECore::TypeId)

isInstanceOf( (ContextProcessor)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::ContextProcessor {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plugDirtiedSignal (self, *args, **kwargs):
      '''
plugDirtiedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugDirtiedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugInputChangedSignal (self, *args, **kwargs):
      '''
plugInputChangedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugInputChangedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugSetSignal (self, *args, **kwargs):
      '''
plugSetSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugSetSignal(Gaffer::Node {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def scriptNode (self, *args, **kwargs):
      '''
scriptNode( (Node)arg1) -> object :

    C++ signature :
        Gaffer::ScriptNode* scriptNode(Gaffer::Node {lvalue})'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setup (self, *args, **kwargs):
      '''
setup( (ContextProcessor)arg1, (Plug)arg2) -> None :

    C++ signature :
        void setup(Gaffer::ContextProcessor {lvalue},Gaffer::Plug)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (ContextProcessor)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::ContextProcessor {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (ContextProcessor)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::ContextProcessor {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def ContextProcessorComputeNode (*args):
      '''

'''      
    ...

class ContextProcessorComputeNode:
    def BinaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ErrorSignal (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def UnaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (ContextProcessor)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::ContextProcessor,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (ContextProcessor)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::ContextProcessor,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def affects (self, *args, **kwargs):
      '''
affects( (ContextProcessor)arg1, (Plug)arg2) -> list :

    C++ signature :
        boost::python::list affects(Gaffer::ContextProcessor,Gaffer::Plug const*)'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def correspondingInput (self, *args, **kwargs):
      '''
correspondingInput( (ContextProcessor)arg1, (Plug)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> correspondingInput(Gaffer::ContextProcessor {lvalue},Gaffer::Plug const*)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def enabledPlug (self, *args, **kwargs):
      '''
enabledPlug( (ContextProcessor)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::TypedPlug<bool> > enabledPlug(Gaffer::ContextProcessor {lvalue})'''
    ...
    def errorSignal (self, *args, **kwargs):
      '''
errorSignal( (Node)arg1) -> ErrorSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug const*, Gaffer::Plug const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} errorSignal(Gaffer::Node {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def inPlugContext (self, *args, **kwargs):
      '''
inPlugContext( (ContextProcessor)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Context> inPlugContext(Gaffer::ContextProcessor)'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (ContextProcessor)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::ContextProcessor {lvalue},IECore::TypeId)

isInstanceOf( (ContextProcessor)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::ContextProcessor {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plugDirtiedSignal (self, *args, **kwargs):
      '''
plugDirtiedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugDirtiedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugInputChangedSignal (self, *args, **kwargs):
      '''
plugInputChangedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugInputChangedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugSetSignal (self, *args, **kwargs):
      '''
plugSetSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugSetSignal(Gaffer::Node {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def scriptNode (self, *args, **kwargs):
      '''
scriptNode( (Node)arg1) -> object :

    C++ signature :
        Gaffer::ScriptNode* scriptNode(Gaffer::Node {lvalue})'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setup (self, *args, **kwargs):
      '''
setup( (ContextProcessor)arg1, (Plug)arg2) -> None :

    C++ signature :
        void setup(Gaffer::ContextProcessor {lvalue},Gaffer::Plug)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (ContextProcessor)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::ContextProcessor {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (ContextProcessor)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::ContextProcessor {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def ContextQuery (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='ContextQuery')

'''      
    ...

class ContextQuery:
    def BinaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ErrorSignal (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def UnaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (ContextQuery)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::ContextQuery,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (ContextQuery)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::ContextQuery,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def addQuery (self, *args, **kwargs):
      '''
addQuery( (ContextQuery)arg1, (ValuePlug)plug [, (object)variable='']) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::NameValuePlug> addQuery(Gaffer::ContextQuery {lvalue},Gaffer::ValuePlug [,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >=''])'''
    ...
    def affects (self, *args, **kwargs):
      '''
affects( (ContextQuery)arg1, (Plug)arg2) -> list :

    C++ signature :
        boost::python::list affects(Gaffer::ContextQuery,Gaffer::Plug const*)'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def correspondingInput (self, *args, **kwargs):
      '''
correspondingInput( (ContextQuery)arg1, (Plug)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> correspondingInput(Gaffer::ContextQuery {lvalue},Gaffer::Plug const*)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def enabledPlug (self, *args, **kwargs):
      '''
enabledPlug( (ContextQuery)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::TypedPlug<bool> > enabledPlug(Gaffer::ContextQuery {lvalue})'''
    ...
    def errorSignal (self, *args, **kwargs):
      '''
errorSignal( (Node)arg1) -> ErrorSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug const*, Gaffer::Plug const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} errorSignal(Gaffer::Node {lvalue})'''
    ...
    def existsPlugFromQueryPlug (self, *args, **kwargs):
      '''
existsPlugFromQueryPlug( (ContextQuery)arg1, (NameValuePlug)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::TypedPlug<bool> > existsPlugFromQueryPlug(Gaffer::ContextQuery {lvalue},Gaffer::NameValuePlug)'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (ContextQuery)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::ContextQuery {lvalue},IECore::TypeId)

isInstanceOf( (ContextQuery)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::ContextQuery {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outPlugFromQueryPlug (self, *args, **kwargs):
      '''
outPlugFromQueryPlug( (ContextQuery)arg1, (NameValuePlug)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::ValuePlug> outPlugFromQueryPlug(Gaffer::ContextQuery,Gaffer::NameValuePlug)'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plugDirtiedSignal (self, *args, **kwargs):
      '''
plugDirtiedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugDirtiedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugInputChangedSignal (self, *args, **kwargs):
      '''
plugInputChangedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugInputChangedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugSetSignal (self, *args, **kwargs):
      '''
plugSetSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugSetSignal(Gaffer::Node {lvalue})'''
    ...
    def queryPlugFromOutPlug (self, *args, **kwargs):
      '''
queryPlugFromOutPlug( (ContextQuery)arg1, (ValuePlug)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::NameValuePlug> queryPlugFromOutPlug(Gaffer::ContextQuery,Gaffer::ValuePlug)'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeQuery (self, *args, **kwargs):
      '''
removeQuery( (ContextQuery)arg1, (NameValuePlug)arg2) -> None :

    C++ signature :
        void removeQuery(Gaffer::ContextQuery {lvalue},Gaffer::NameValuePlug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def scriptNode (self, *args, **kwargs):
      '''
scriptNode( (Node)arg1) -> object :

    C++ signature :
        Gaffer::ScriptNode* scriptNode(Gaffer::Node {lvalue})'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (ContextQuery)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::ContextQuery {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (ContextQuery)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::ContextQuery {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def valuePlugFromQueryPlug (self, *args, **kwargs):
      '''
valuePlugFromQueryPlug( (ContextQuery)arg1, (NameValuePlug)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::ValuePlug> valuePlugFromQueryPlug(Gaffer::ContextQuery {lvalue},Gaffer::NameValuePlug)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def ContextVariableTweaks (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='ContextVariableTweaks')

'''      
    ...

class ContextVariableTweaks:
    def BinaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ErrorSignal (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def UnaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (ContextVariableTweaks)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::ContextVariableTweaks,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (ContextVariableTweaks)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::ContextVariableTweaks,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def affects (self, *args, **kwargs):
      '''
affects( (ContextVariableTweaks)arg1, (Plug)arg2) -> list :

    C++ signature :
        boost::python::list affects(Gaffer::ContextVariableTweaks,Gaffer::Plug const*)'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def correspondingInput (self, *args, **kwargs):
      '''
correspondingInput( (ContextVariableTweaks)arg1, (Plug)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> correspondingInput(Gaffer::ContextVariableTweaks {lvalue},Gaffer::Plug const*)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def enabledPlug (self, *args, **kwargs):
      '''
enabledPlug( (ContextVariableTweaks)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::TypedPlug<bool> > enabledPlug(Gaffer::ContextVariableTweaks {lvalue})'''
    ...
    def errorSignal (self, *args, **kwargs):
      '''
errorSignal( (Node)arg1) -> ErrorSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug const*, Gaffer::Plug const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} errorSignal(Gaffer::Node {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def inPlugContext (self, *args, **kwargs):
      '''
inPlugContext( (ContextProcessor)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Context> inPlugContext(Gaffer::ContextProcessor)'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (ContextVariableTweaks)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::ContextVariableTweaks {lvalue},IECore::TypeId)

isInstanceOf( (ContextVariableTweaks)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::ContextVariableTweaks {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plugDirtiedSignal (self, *args, **kwargs):
      '''
plugDirtiedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugDirtiedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugInputChangedSignal (self, *args, **kwargs):
      '''
plugInputChangedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugInputChangedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugSetSignal (self, *args, **kwargs):
      '''
plugSetSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugSetSignal(Gaffer::Node {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def scriptNode (self, *args, **kwargs):
      '''
scriptNode( (Node)arg1) -> object :

    C++ signature :
        Gaffer::ScriptNode* scriptNode(Gaffer::Node {lvalue})'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setup (self, *args, **kwargs):
      '''
setup( (ContextProcessor)arg1, (Plug)arg2) -> None :

    C++ signature :
        void setup(Gaffer::ContextProcessor {lvalue},Gaffer::Plug)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (ContextVariableTweaks)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::ContextVariableTweaks {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (ContextVariableTweaks)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::ContextVariableTweaks {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def ContextVariables (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='ContextVariables')

'''      
    ...

class ContextVariables:
    def BinaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ErrorSignal (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def UnaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (ContextVariables)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::ContextVariables,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (ContextVariables)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::ContextVariables,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def affects (self, *args, **kwargs):
      '''
affects( (ContextVariables)arg1, (Plug)arg2) -> list :

    C++ signature :
        boost::python::list affects(Gaffer::ContextVariables,Gaffer::Plug const*)'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def correspondingInput (self, *args, **kwargs):
      '''
correspondingInput( (ContextVariables)arg1, (Plug)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> correspondingInput(Gaffer::ContextVariables {lvalue},Gaffer::Plug const*)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def enabledPlug (self, *args, **kwargs):
      '''
enabledPlug( (ContextVariables)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::TypedPlug<bool> > enabledPlug(Gaffer::ContextVariables {lvalue})'''
    ...
    def errorSignal (self, *args, **kwargs):
      '''
errorSignal( (Node)arg1) -> ErrorSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug const*, Gaffer::Plug const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} errorSignal(Gaffer::Node {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def inPlugContext (self, *args, **kwargs):
      '''
inPlugContext( (ContextProcessor)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Context> inPlugContext(Gaffer::ContextProcessor)'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (ContextVariables)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::ContextVariables {lvalue},IECore::TypeId)

isInstanceOf( (ContextVariables)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::ContextVariables {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plugDirtiedSignal (self, *args, **kwargs):
      '''
plugDirtiedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugDirtiedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugInputChangedSignal (self, *args, **kwargs):
      '''
plugInputChangedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugInputChangedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugSetSignal (self, *args, **kwargs):
      '''
plugSetSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugSetSignal(Gaffer::Node {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def scriptNode (self, *args, **kwargs):
      '''
scriptNode( (Node)arg1) -> object :

    C++ signature :
        Gaffer::ScriptNode* scriptNode(Gaffer::Node {lvalue})'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setup (self, *args, **kwargs):
      '''
setup( (ContextProcessor)arg1, (Plug)arg2) -> None :

    C++ signature :
        void setup(Gaffer::ContextProcessor {lvalue},Gaffer::Plug)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (ContextVariables)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::ContextVariables {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (ContextVariables)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::ContextVariables {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def ContextVariablesComputeNode (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='ContextVariables')

'''      
    ...

class ContextVariablesComputeNode:
    def BinaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ErrorSignal (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def UnaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (ContextVariables)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::ContextVariables,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (ContextVariables)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::ContextVariables,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def affects (self, *args, **kwargs):
      '''
affects( (ContextVariables)arg1, (Plug)arg2) -> list :

    C++ signature :
        boost::python::list affects(Gaffer::ContextVariables,Gaffer::Plug const*)'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def correspondingInput (self, *args, **kwargs):
      '''
correspondingInput( (ContextVariables)arg1, (Plug)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> correspondingInput(Gaffer::ContextVariables {lvalue},Gaffer::Plug const*)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def enabledPlug (self, *args, **kwargs):
      '''
enabledPlug( (ContextVariables)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::TypedPlug<bool> > enabledPlug(Gaffer::ContextVariables {lvalue})'''
    ...
    def errorSignal (self, *args, **kwargs):
      '''
errorSignal( (Node)arg1) -> ErrorSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug const*, Gaffer::Plug const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} errorSignal(Gaffer::Node {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def inPlugContext (self, *args, **kwargs):
      '''
inPlugContext( (ContextProcessor)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Context> inPlugContext(Gaffer::ContextProcessor)'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (ContextVariables)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::ContextVariables {lvalue},IECore::TypeId)

isInstanceOf( (ContextVariables)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::ContextVariables {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plugDirtiedSignal (self, *args, **kwargs):
      '''
plugDirtiedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugDirtiedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugInputChangedSignal (self, *args, **kwargs):
      '''
plugInputChangedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugInputChangedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugSetSignal (self, *args, **kwargs):
      '''
plugSetSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugSetSignal(Gaffer::Node {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def scriptNode (self, *args, **kwargs):
      '''
scriptNode( (Node)arg1) -> object :

    C++ signature :
        Gaffer::ScriptNode* scriptNode(Gaffer::Node {lvalue})'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setup (self, *args, **kwargs):
      '''
setup( (ContextProcessor)arg1, (Plug)arg2) -> None :

    C++ signature :
        void setup(Gaffer::ContextProcessor {lvalue},Gaffer::Plug)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (ContextVariables)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::ContextVariables {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (ContextVariables)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::ContextVariables {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def DeleteContextVariables (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='DeleteContextVariables')

'''      
    ...

class DeleteContextVariables:
    def BinaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ErrorSignal (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def UnaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (DeleteContextVariables)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::DeleteContextVariables,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (DeleteContextVariables)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::DeleteContextVariables,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def affects (self, *args, **kwargs):
      '''
affects( (DeleteContextVariables)arg1, (Plug)arg2) -> list :

    C++ signature :
        boost::python::list affects(Gaffer::DeleteContextVariables,Gaffer::Plug const*)'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def correspondingInput (self, *args, **kwargs):
      '''
correspondingInput( (DeleteContextVariables)arg1, (Plug)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> correspondingInput(Gaffer::DeleteContextVariables {lvalue},Gaffer::Plug const*)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def enabledPlug (self, *args, **kwargs):
      '''
enabledPlug( (DeleteContextVariables)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::TypedPlug<bool> > enabledPlug(Gaffer::DeleteContextVariables {lvalue})'''
    ...
    def errorSignal (self, *args, **kwargs):
      '''
errorSignal( (Node)arg1) -> ErrorSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug const*, Gaffer::Plug const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} errorSignal(Gaffer::Node {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def inPlugContext (self, *args, **kwargs):
      '''
inPlugContext( (ContextProcessor)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Context> inPlugContext(Gaffer::ContextProcessor)'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (DeleteContextVariables)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::DeleteContextVariables {lvalue},IECore::TypeId)

isInstanceOf( (DeleteContextVariables)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::DeleteContextVariables {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plugDirtiedSignal (self, *args, **kwargs):
      '''
plugDirtiedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugDirtiedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugInputChangedSignal (self, *args, **kwargs):
      '''
plugInputChangedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugInputChangedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugSetSignal (self, *args, **kwargs):
      '''
plugSetSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugSetSignal(Gaffer::Node {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def scriptNode (self, *args, **kwargs):
      '''
scriptNode( (Node)arg1) -> object :

    C++ signature :
        Gaffer::ScriptNode* scriptNode(Gaffer::Node {lvalue})'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setup (self, *args, **kwargs):
      '''
setup( (ContextProcessor)arg1, (Plug)arg2) -> None :

    C++ signature :
        void setup(Gaffer::ContextProcessor {lvalue},Gaffer::Plug)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (DeleteContextVariables)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::DeleteContextVariables {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (DeleteContextVariables)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::DeleteContextVariables {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def DeleteContextVariablesComputeNode (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='DeleteContextVariables')

'''      
    ...

class DeleteContextVariablesComputeNode:
    def BinaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ErrorSignal (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def UnaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (DeleteContextVariables)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::DeleteContextVariables,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (DeleteContextVariables)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::DeleteContextVariables,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def affects (self, *args, **kwargs):
      '''
affects( (DeleteContextVariables)arg1, (Plug)arg2) -> list :

    C++ signature :
        boost::python::list affects(Gaffer::DeleteContextVariables,Gaffer::Plug const*)'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def correspondingInput (self, *args, **kwargs):
      '''
correspondingInput( (DeleteContextVariables)arg1, (Plug)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> correspondingInput(Gaffer::DeleteContextVariables {lvalue},Gaffer::Plug const*)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def enabledPlug (self, *args, **kwargs):
      '''
enabledPlug( (DeleteContextVariables)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::TypedPlug<bool> > enabledPlug(Gaffer::DeleteContextVariables {lvalue})'''
    ...
    def errorSignal (self, *args, **kwargs):
      '''
errorSignal( (Node)arg1) -> ErrorSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug const*, Gaffer::Plug const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} errorSignal(Gaffer::Node {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def inPlugContext (self, *args, **kwargs):
      '''
inPlugContext( (ContextProcessor)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Context> inPlugContext(Gaffer::ContextProcessor)'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (DeleteContextVariables)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::DeleteContextVariables {lvalue},IECore::TypeId)

isInstanceOf( (DeleteContextVariables)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::DeleteContextVariables {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plugDirtiedSignal (self, *args, **kwargs):
      '''
plugDirtiedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugDirtiedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugInputChangedSignal (self, *args, **kwargs):
      '''
plugInputChangedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugInputChangedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugSetSignal (self, *args, **kwargs):
      '''
plugSetSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugSetSignal(Gaffer::Node {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def scriptNode (self, *args, **kwargs):
      '''
scriptNode( (Node)arg1) -> object :

    C++ signature :
        Gaffer::ScriptNode* scriptNode(Gaffer::Node {lvalue})'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setup (self, *args, **kwargs):
      '''
setup( (ContextProcessor)arg1, (Plug)arg2) -> None :

    C++ signature :
        void setup(Gaffer::ContextProcessor {lvalue},Gaffer::Plug)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (DeleteContextVariables)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::DeleteContextVariables {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (DeleteContextVariables)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::DeleteContextVariables {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def DependencyNode (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='DependencyNode')

'''      
    ...

class DependencyNode:
    def BinaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ErrorSignal (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def UnaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (DependencyNode)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::DependencyNode,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (DependencyNode)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::DependencyNode,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def affects (self, *args, **kwargs):
      '''
affects( (DependencyNode)arg1, (Plug)arg2) -> list :

    C++ signature :
        boost::python::list affects(Gaffer::DependencyNode,Gaffer::Plug const*)'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def correspondingInput (self, *args, **kwargs):
      '''
correspondingInput( (DependencyNode)arg1, (Plug)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> correspondingInput(Gaffer::DependencyNode {lvalue},Gaffer::Plug const*)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def enabledPlug (self, *args, **kwargs):
      '''
enabledPlug( (DependencyNode)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::TypedPlug<bool> > enabledPlug(Gaffer::DependencyNode {lvalue})'''
    ...
    def errorSignal (self, *args, **kwargs):
      '''
errorSignal( (Node)arg1) -> ErrorSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug const*, Gaffer::Plug const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} errorSignal(Gaffer::Node {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (DependencyNode)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::DependencyNode {lvalue},IECore::TypeId)

isInstanceOf( (DependencyNode)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::DependencyNode {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plugDirtiedSignal (self, *args, **kwargs):
      '''
plugDirtiedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugDirtiedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugInputChangedSignal (self, *args, **kwargs):
      '''
plugInputChangedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugInputChangedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugSetSignal (self, *args, **kwargs):
      '''
plugSetSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugSetSignal(Gaffer::Node {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def scriptNode (self, *args, **kwargs):
      '''
scriptNode( (Node)arg1) -> object :

    C++ signature :
        Gaffer::ScriptNode* scriptNode(Gaffer::Node {lvalue})'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (DependencyNode)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::DependencyNode {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (DependencyNode)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::DependencyNode {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def DictPath (*args):
      '''

'''      
    ...

class DictPath:
    def PathChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _DictPath__dictEntry (self):
      '''None'''
    ...
    def _children (self, canceller):
      '''None'''
    ...
    def _emitPathChanged (self, *args, **kwargs):
      '''
_emitPathChanged( (Path)arg1) -> None :

    C++ signature :
        void _emitPathChanged(Gaffer::Path {lvalue})'''
    ...
    def _havePathChangedSignal (self, *args, **kwargs):
      '''
_havePathChangedSignal( (Path)arg1) -> bool :

    C++ signature :
        bool _havePathChangedSignal(Gaffer::Path {lvalue})'''
    ...
    def _pathChangedSignalCreated (self, *args, **kwargs):
      '''
_pathChangedSignalCreated( (Path)arg1) -> None :

    C++ signature :
        void _pathChangedSignalCreated((anonymous namespace)::PathWrapper<Gaffer::Path> {lvalue})'''
    ...
    def append (self, *args, **kwargs):
      '''
append( (Path)arg1, (InternedString)arg2) -> Path :

    C++ signature :
        Gaffer::Path {lvalue} append(Gaffer::Path {lvalue},IECore::InternedString)'''
    ...
    def baseTypeId ():
      '''None'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName ():
      '''None'''
    ...
    def cancellationSubject (self, *args, **kwargs):
      '''
cancellationSubject( (Path)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> cancellationSubject(Gaffer::Path)'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (Path)arg1 [, (Canceller)canceller=None]) -> list :

    C++ signature :
        boost::python::list children(Gaffer::Path {lvalue} [,IECore::Canceller const*=None])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def copy (self):
      '''None'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def dict (self):
      '''None'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getFilter (self, *args, **kwargs):
      '''
getFilter( (Path)arg1) -> object :

    C++ signature :
        Gaffer::PathFilter* getFilter(Gaffer::Path {lvalue})'''
    ...
    def info (self, *args, **kwargs):
      '''
info( (object)arg1) -> object :

    C++ signature :
        boost::python::api::object info(boost::python::api::object)'''
    ...
    def inheritsFrom (t):
      '''None'''
    ...
    def isEmpty (self, *args, **kwargs):
      '''
isEmpty( (Path)arg1) -> bool :

    C++ signature :
        bool isEmpty(Gaffer::Path {lvalue})'''
    ...
    def isInstanceOf (self, t):
      '''None'''
    ...
    def isLeaf (self, canceller=None):
      '''None'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isValid (self, canceller=None):
      '''None'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (Path)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Path> parent(Gaffer::Path {lvalue})'''
    ...
    def pathChangedSignal (self, *args, **kwargs):
      '''
pathChangedSignal( (Path)arg1) -> PathChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Path*), Gaffer::Signals::DefaultCombiner<void> > {lvalue} pathChangedSignal(Gaffer::Path {lvalue})'''
    ...
    def property (self, name, canceller=None):
      '''None'''
    ...
    def propertyNames (self, canceller=None):
      '''None'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def root (self, *args, **kwargs):
      '''
root( (Path)arg1) -> str :

    C++ signature :
        char const* root(Gaffer::Path {lvalue})'''
    ...
    def setFilter (self, *args, **kwargs):
      '''
setFilter( (Path)arg1, (object)arg2) -> None :

    C++ signature :
        void setFilter(Gaffer::Path {lvalue},boost::intrusive_ptr<Gaffer::PathFilter>)'''
    ...
    def setFromPath (self, *args, **kwargs):
      '''
setFromPath( (Path)arg1, (Path)arg2) -> None :

    C++ signature :
        void setFromPath(Gaffer::Path {lvalue},Gaffer::Path const*)'''
    ...
    def setFromString (self, *args, **kwargs):
      '''
setFromString( (Path)arg1, (object)arg2) -> Path :

    C++ signature :
        Gaffer::Path {lvalue} setFromString(Gaffer::Path {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def staticTypeId ():
      '''None'''
    ...
    def staticTypeName ():
      '''None'''
    ...
    def truncateUntilValid (self, *args, **kwargs):
      '''
truncateUntilValid( (Path)arg1) -> Path :

    C++ signature :
        Gaffer::Path {lvalue} truncateUntilValid(Gaffer::Path {lvalue})'''
    ...
    def typeId (x):
      '''None'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (x):
      '''None'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...

def DirtyPropagationScope (*args):
      '''
__init__(_object*)

'''      
    ...

class DirtyPropagationScope:

def Dot (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='Dot')

'''      
    ...

class Dot:
    def BinaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ErrorSignal (self, *args, **kwargs):
      '''None'''
    ...
    def LabelType (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def UnaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (Dot)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::Dot,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (Dot)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::Dot,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def affects (self, *args, **kwargs):
      '''
affects( (Dot)arg1, (Plug)arg2) -> list :

    C++ signature :
        boost::python::list affects(Gaffer::Dot,Gaffer::Plug const*)'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def correspondingInput (self, *args, **kwargs):
      '''
correspondingInput( (Dot)arg1, (Plug)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> correspondingInput(Gaffer::Dot {lvalue},Gaffer::Plug const*)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def enabledPlug (self, *args, **kwargs):
      '''
enabledPlug( (Dot)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::TypedPlug<bool> > enabledPlug(Gaffer::Dot {lvalue})'''
    ...
    def errorSignal (self, *args, **kwargs):
      '''
errorSignal( (Node)arg1) -> ErrorSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug const*, Gaffer::Plug const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} errorSignal(Gaffer::Node {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (Dot)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Dot {lvalue},IECore::TypeId)

isInstanceOf( (Dot)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Dot {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plugDirtiedSignal (self, *args, **kwargs):
      '''
plugDirtiedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugDirtiedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugInputChangedSignal (self, *args, **kwargs):
      '''
plugInputChangedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugInputChangedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugSetSignal (self, *args, **kwargs):
      '''
plugSetSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugSetSignal(Gaffer::Node {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def scriptNode (self, *args, **kwargs):
      '''
scriptNode( (Node)arg1) -> object :

    C++ signature :
        Gaffer::ScriptNode* scriptNode(Gaffer::Node {lvalue})'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setup (self, *args, **kwargs):
      '''
setup( (Dot)arg1, (Plug)arg2) -> None :

    C++ signature :
        void setup(Gaffer::Dot {lvalue},Gaffer::Plug)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (Dot)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::Dot {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (Dot)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::Dot {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def EditScope (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='EditScope')

'''      
    ...

class EditScope:
    def BinaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ErrorSignal (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def UnaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (EditScope)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::EditScope,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (EditScope)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::EditScope,Gaffer::GraphComponent const*)'''
    ...
    def acquireProcessor (self, *args, **kwargs):
      '''
acquireProcessor( (EditScope)arg1, (object)type [, (bool)createIfNecessary=True]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::DependencyNode> acquireProcessor(Gaffer::EditScope {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > [,bool=True])'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def affects (self, *args, **kwargs):
      '''
affects( (Box)arg1, (Plug)arg2) -> list :

    C++ signature :
        boost::python::list affects(Gaffer::Box,Gaffer::Plug const*)'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def canPromotePlug (self, *args, **kwargs):
      '''
canPromotePlug( (Box)arg1, (Plug)descendantPlug) -> bool :

    C++ signature :
        bool canPromotePlug(Gaffer::Box {lvalue},Gaffer::Plug const*)'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def correspondingInput (self, *args, **kwargs):
      '''
correspondingInput( (Box)arg1, (Plug)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> correspondingInput(Gaffer::Box {lvalue},Gaffer::Plug const*)'''
    ...
    def create (self, *args, **kwargs):
      '''
create( (Node)arg1, (Set)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Box> create(Gaffer::Node*,Gaffer::Set const*)'''
    ...
    def deregisterProcessor (self, *args, **kwargs):
      '''
deregisterProcessor( (object)arg1) -> None :

    C++ signature :
        void deregisterProcessor(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def enabledPlug (self, *args, **kwargs):
      '''
enabledPlug( (Box)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::TypedPlug<bool> > enabledPlug(Gaffer::Box {lvalue})'''
    ...
    def errorSignal (self, *args, **kwargs):
      '''
errorSignal( (Node)arg1) -> ErrorSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug const*, Gaffer::Plug const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} errorSignal(Gaffer::Node {lvalue})'''
    ...
    def exportForReference (self, *args, **kwargs):
      '''
exportForReference( (Box)arg1, (object)arg2) -> None :

    C++ signature :
        void exportForReference(Gaffer::Box {lvalue},std::filesystem::__cxx11::path)'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (EditScope)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::EditScope {lvalue},IECore::TypeId)

isInstanceOf( (EditScope)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::EditScope {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plugDirtiedSignal (self, *args, **kwargs):
      '''
plugDirtiedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugDirtiedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugInputChangedSignal (self, *args, **kwargs):
      '''
plugInputChangedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugInputChangedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugIsPromoted (self, *args, **kwargs):
      '''
plugIsPromoted( (Box)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool plugIsPromoted(Gaffer::Box {lvalue},Gaffer::Plug const*)'''
    ...
    def plugSetSignal (self, *args, **kwargs):
      '''
plugSetSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugSetSignal(Gaffer::Node {lvalue})'''
    ...
    def processors (self, *args, **kwargs):
      '''
processors( (EditScope)arg1) -> list :

    C++ signature :
        boost::python::list processors(Gaffer::EditScope {lvalue})'''
    ...
    def promotePlug (self, *args, **kwargs):
      '''
promotePlug( (Box)arg1, (Plug)descendantPlug) -> object :

    C++ signature :
        Gaffer::Plug* promotePlug(Gaffer::Box {lvalue},Gaffer::Plug*)'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerProcessor (self, *args, **kwargs):
      '''
registerProcessor( (object)arg1, (object)arg2) -> None :

    C++ signature :
        void registerProcessor(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,boost::python::api::object)'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def registeredProcessors (self, *args, **kwargs):
      '''
registeredProcessors() -> list :

    C++ signature :
        boost::python::list registeredProcessors()'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def scriptNode (self, *args, **kwargs):
      '''
scriptNode( (Node)arg1) -> object :

    C++ signature :
        Gaffer::ScriptNode* scriptNode(Gaffer::Node {lvalue})'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setup (self, *args, **kwargs):
      '''
setup( (EditScope)arg1, (Plug)plug) -> None :

    C++ signature :
        void setup(Gaffer::EditScope {lvalue},Gaffer::Plug)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (EditScope)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::EditScope {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (EditScope)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::EditScope {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def unpromotePlug (self, *args, **kwargs):
      '''
unpromotePlug( (Box)arg1, (Plug)arg2) -> None :

    C++ signature :
        void unpromotePlug(Gaffer::Box {lvalue},Gaffer::Plug*)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def Expression (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='Expression')

'''      
    ...

class Expression:
    def BinaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def Engine (self, *args, **kwargs):
      '''None'''
    ...
    def ErrorSignal (self, *args, **kwargs):
      '''None'''
    ...
    def ExpressionChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def UnaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (Expression)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::Expression,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (Expression)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::Expression,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def affects (self, *args, **kwargs):
      '''
affects( (Expression)arg1, (Plug)arg2) -> list :

    C++ signature :
        boost::python::list affects(Gaffer::Expression,Gaffer::Plug const*)'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def correspondingInput (self, *args, **kwargs):
      '''
correspondingInput( (Expression)arg1, (Plug)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> correspondingInput(Gaffer::Expression {lvalue},Gaffer::Plug const*)'''
    ...
    def defaultExpression (self, *args, **kwargs):
      '''
defaultExpression( (ValuePlug)arg1, (object)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > defaultExpression(Gaffer::ValuePlug const*,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def enabledPlug (self, *args, **kwargs):
      '''
enabledPlug( (Expression)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::TypedPlug<bool> > enabledPlug(Gaffer::Expression {lvalue})'''
    ...
    def errorSignal (self, *args, **kwargs):
      '''
errorSignal( (Node)arg1) -> ErrorSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug const*, Gaffer::Plug const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} errorSignal(Gaffer::Node {lvalue})'''
    ...
    def expressionChangedSignal (self, *args, **kwargs):
      '''
expressionChangedSignal( (Expression)arg1) -> ExpressionChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Expression*), Gaffer::Signals::DefaultCombiner<void> > {lvalue} expressionChangedSignal(Gaffer::Expression {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getExpression (self, *args, **kwargs):
      '''
getExpression( (Expression)arg1) -> tuple :

    C++ signature :
        boost::python::tuple getExpression(Gaffer::Expression {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def identifier (self, *args, **kwargs):
      '''
identifier( (Expression)arg1, (ValuePlug)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > identifier(Gaffer::Expression {lvalue},Gaffer::ValuePlug const*)'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (Expression)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Expression {lvalue},IECore::TypeId)

isInstanceOf( (Expression)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Expression {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def languages (self, *args, **kwargs):
      '''
languages() -> tuple :

    C++ signature :
        boost::python::tuple languages()'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plugDirtiedSignal (self, *args, **kwargs):
      '''
plugDirtiedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugDirtiedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugInputChangedSignal (self, *args, **kwargs):
      '''
plugInputChangedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugInputChangedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugSetSignal (self, *args, **kwargs):
      '''
plugSetSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugSetSignal(Gaffer::Node {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def scriptNode (self, *args, **kwargs):
      '''
scriptNode( (Node)arg1) -> object :

    C++ signature :
        Gaffer::ScriptNode* scriptNode(Gaffer::Node {lvalue})'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setExpression (self, *args, **kwargs):
      '''
setExpression( (Expression)arg1, (object)expression [, (object)language='python']) -> None :

    C++ signature :
        void setExpression(Gaffer::Expression {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > [,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >='python'])'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (Expression)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::Expression {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (Expression)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::Expression {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def ExtensionAlgo (*args):
      '''

'''      
    ...

def FileNamePathFilter (*args):
      '''

'''      
    ...

class FileNamePathFilter:
    def PathChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _filter (self, paths, canceller):
      '''None'''
    ...
    def baseTypeId ():
      '''None'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName ():
      '''None'''
    ...
    def changedSignal (self, *args, **kwargs):
      '''
changedSignal( (PathFilter)arg1) -> PathChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::PathFilter*), Gaffer::Signals::DefaultCombiner<void> > {lvalue} changedSignal(Gaffer::PathFilter {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def filter (self, *args, **kwargs):
      '''
filter( (PathFilter)arg1, (list)paths [, (Canceller)canceller=None]) -> list :

    C++ signature :
        boost::python::list filter(Gaffer::PathFilter {lvalue},boost::python::list [,IECore::Canceller const*=None])'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getEnabled (self, *args, **kwargs):
      '''
getEnabled( (PathFilter)arg1) -> bool :

    C++ signature :
        bool getEnabled(Gaffer::PathFilter {lvalue})'''
    ...
    def inheritsFrom (t):
      '''None'''
    ...
    def isInstanceOf (self, t):
      '''None'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def setEnabled (self, *args, **kwargs):
      '''
setEnabled( (PathFilter)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnabled(Gaffer::PathFilter {lvalue},bool)'''
    ...
    def staticTypeId ():
      '''None'''
    ...
    def staticTypeName ():
      '''None'''
    ...
    def typeId (x):
      '''None'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (x):
      '''None'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def userData (self, *args, **kwargs):
      '''
userData( (PathFilter)arg1) -> object :

    C++ signature :
        IECore::CompoundData* userData(Gaffer::PathFilter {lvalue})'''
    ...

def FileSequencePathFilter (*args):
      '''
__init__(_object*, Gaffer::FileSequencePathFilter::Keep mode=Gaffer._Gaffer.Keep.Concise, boost::intrusive_ptr<IECore::CompoundData> userData=None)

'''      
    ...

class FileSequencePathFilter:
    def Keep (self, *args, **kwargs):
      '''None'''
    ...
    def PathChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def changedSignal (self, *args, **kwargs):
      '''
changedSignal( (PathFilter)arg1) -> PathChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::PathFilter*), Gaffer::Signals::DefaultCombiner<void> > {lvalue} changedSignal(Gaffer::PathFilter {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def filter (self, *args, **kwargs):
      '''
filter( (PathFilter)arg1, (list)paths [, (Canceller)canceller=None]) -> list :

    C++ signature :
        boost::python::list filter(Gaffer::PathFilter {lvalue},boost::python::list [,IECore::Canceller const*=None])'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getEnabled (self, *args, **kwargs):
      '''
getEnabled( (PathFilter)arg1) -> bool :

    C++ signature :
        bool getEnabled(Gaffer::PathFilter {lvalue})'''
    ...
    def getMode (self, *args, **kwargs):
      '''
getMode( (FileSequencePathFilter)arg1) -> Keep :

    C++ signature :
        Gaffer::FileSequencePathFilter::Keep getMode(Gaffer::FileSequencePathFilter {lvalue})'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (FileSequencePathFilter)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::FileSequencePathFilter {lvalue},IECore::TypeId)

isInstanceOf( (FileSequencePathFilter)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::FileSequencePathFilter {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def setEnabled (self, *args, **kwargs):
      '''
setEnabled( (PathFilter)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnabled(Gaffer::PathFilter {lvalue},bool)'''
    ...
    def setMode (self, *args, **kwargs):
      '''
setMode( (FileSequencePathFilter)arg1, (Keep)arg2) -> None :

    C++ signature :
        void setMode(Gaffer::FileSequencePathFilter {lvalue},Gaffer::FileSequencePathFilter::Keep)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (FileSequencePathFilter)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::FileSequencePathFilter {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (FileSequencePathFilter)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::FileSequencePathFilter {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def userData (self, *args, **kwargs):
      '''
userData( (PathFilter)arg1) -> object :

    C++ signature :
        IECore::CompoundData* userData(Gaffer::PathFilter {lvalue})'''
    ...

def FileSystemPath (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > path, boost::intrusive_ptr<Gaffer::PathFilter> filter=None, bool includeSequences=False)
__init__(_object*, std::filesystem::__cxx11::path path, boost::intrusive_ptr<Gaffer::PathFilter> filter=None, bool includeSequences=False)
__init__(_object*, boost::intrusive_ptr<Gaffer::PathFilter> filter=None, bool includeSequences=False)

'''      
    ...

class FileSystemPath:
    def PathChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _emitPathChanged (self, *args, **kwargs):
      '''
_emitPathChanged( (Path)arg1) -> None :

    C++ signature :
        void _emitPathChanged(Gaffer::Path {lvalue})'''
    ...
    def _havePathChangedSignal (self, *args, **kwargs):
      '''
_havePathChangedSignal( (Path)arg1) -> bool :

    C++ signature :
        bool _havePathChangedSignal(Gaffer::Path {lvalue})'''
    ...
    def _pathChangedSignalCreated (self, *args, **kwargs):
      '''
_pathChangedSignalCreated( (Path)arg1) -> None :

    C++ signature :
        void _pathChangedSignalCreated((anonymous namespace)::PathWrapper<Gaffer::Path> {lvalue})'''
    ...
    def append (self, *args, **kwargs):
      '''
append( (Path)arg1, (InternedString)arg2) -> Path :

    C++ signature :
        Gaffer::Path {lvalue} append(Gaffer::Path {lvalue},IECore::InternedString)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cancellationSubject (self, *args, **kwargs):
      '''
cancellationSubject( (FileSystemPath)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> cancellationSubject(Gaffer::FileSystemPath)'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (Path)arg1 [, (Canceller)canceller=None]) -> list :

    C++ signature :
        boost::python::list children(Gaffer::Path {lvalue} [,IECore::Canceller const*=None])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (FileSystemPath)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Path> copy(Gaffer::FileSystemPath)'''
    ...
    def createStandardFilter (self, *args, **kwargs):
      '''
createStandardFilter([  (object)extensions=[] [, (object)extensionsLabel='' [, (bool)includeSequenceFilter=False]]]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::PathFilter> createStandardFilter([ boost::python::api::object=[] [,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >='' [,bool=False]]])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def fileSequence (self, *args, **kwargs):
      '''
fileSequence( (FileSystemPath)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::FileSequence> fileSequence(Gaffer::FileSystemPath {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getFilter (self, *args, **kwargs):
      '''
getFilter( (Path)arg1) -> object :

    C++ signature :
        Gaffer::PathFilter* getFilter(Gaffer::Path {lvalue})'''
    ...
    def getIncludeSequences (self, *args, **kwargs):
      '''
getIncludeSequences( (FileSystemPath)arg1) -> bool :

    C++ signature :
        bool getIncludeSequences(Gaffer::FileSystemPath {lvalue})'''
    ...
    def info (self, *args, **kwargs):
      '''
info( (object)arg1) -> object :

    C++ signature :
        boost::python::api::object info(boost::python::api::object)'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isEmpty (self, *args, **kwargs):
      '''
isEmpty( (Path)arg1) -> bool :

    C++ signature :
        bool isEmpty(Gaffer::Path {lvalue})'''
    ...
    def isFileSequence (self, *args, **kwargs):
      '''
isFileSequence( (FileSystemPath)arg1) -> bool :

    C++ signature :
        bool isFileSequence(Gaffer::FileSystemPath {lvalue})'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (FileSystemPath)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::FileSystemPath {lvalue},IECore::TypeId)

isInstanceOf( (FileSystemPath)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::FileSystemPath {lvalue},char const*)'''
    ...
    def isLeaf (self, *args, **kwargs):
      '''
isLeaf( (FileSystemPath)arg1 [, (Canceller)canceller=None]) -> bool :

    C++ signature :
        bool isLeaf(Gaffer::FileSystemPath [,IECore::Canceller const*=None])'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isValid (self, *args, **kwargs):
      '''
isValid( (FileSystemPath)arg1 [, (Canceller)canceller=None]) -> bool :

    C++ signature :
        bool isValid(Gaffer::FileSystemPath [,IECore::Canceller const*=None])'''
    ...
    def nativeString (self, *args, **kwargs):
      '''
nativeString( (FileSystemPath)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > nativeString(Gaffer::FileSystemPath {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (Path)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Path> parent(Gaffer::Path {lvalue})'''
    ...
    def pathChangedSignal (self, *args, **kwargs):
      '''
pathChangedSignal( (Path)arg1) -> PathChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Path*), Gaffer::Signals::DefaultCombiner<void> > {lvalue} pathChangedSignal(Gaffer::Path {lvalue})'''
    ...
    def property (self, *args, **kwargs):
      '''
property( (FileSystemPath)arg1, (InternedString)name [, (Canceller)canceller=None]) -> object :

    C++ signature :
        boost::python::api::object property(Gaffer::FileSystemPath,IECore::InternedString [,IECore::Canceller const*=None])'''
    ...
    def propertyNames (self, *args, **kwargs):
      '''
propertyNames( (FileSystemPath)arg1 [, (Canceller)canceller=None]) -> list :

    C++ signature :
        boost::python::list propertyNames(Gaffer::FileSystemPath [,IECore::Canceller const*=None])'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def root (self, *args, **kwargs):
      '''
root( (Path)arg1) -> str :

    C++ signature :
        char const* root(Gaffer::Path {lvalue})'''
    ...
    def setFilter (self, *args, **kwargs):
      '''
setFilter( (Path)arg1, (object)arg2) -> None :

    C++ signature :
        void setFilter(Gaffer::Path {lvalue},boost::intrusive_ptr<Gaffer::PathFilter>)'''
    ...
    def setFromPath (self, *args, **kwargs):
      '''
setFromPath( (Path)arg1, (Path)arg2) -> None :

    C++ signature :
        void setFromPath(Gaffer::Path {lvalue},Gaffer::Path const*)'''
    ...
    def setFromString (self, *args, **kwargs):
      '''
setFromString( (Path)arg1, (object)arg2) -> Path :

    C++ signature :
        Gaffer::Path {lvalue} setFromString(Gaffer::Path {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def setIncludeSequences (self, *args, **kwargs):
      '''
setIncludeSequences( (FileSystemPath)arg1, (bool)arg2) -> None :

    C++ signature :
        void setIncludeSequences(Gaffer::FileSystemPath {lvalue},bool)'''
    ...
    def standardPath (self, *args, **kwargs):
      '''
standardPath( (FileSystemPath)arg1) -> object :

    C++ signature :
        std::filesystem::__cxx11::path standardPath(Gaffer::FileSystemPath {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def truncateUntilValid (self, *args, **kwargs):
      '''
truncateUntilValid( (Path)arg1) -> Path :

    C++ signature :
        Gaffer::Path {lvalue} truncateUntilValid(Gaffer::Path {lvalue})'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (FileSystemPath)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::FileSystemPath {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (FileSystemPath)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::FileSystemPath {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...

def FloatPlug (*args):
      '''
__init__(_object*, char const* name='FloatPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, float defaultValue=0.0, float minValue=-3.4028234663852886e+38, float maxValue=3.4028234663852886e+38, unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class FloatPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ValueType (x=0, /):
      '''Convert a string or number to a floating point number, if possible.'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (FloatPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::NumericPlug<float>,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (FloatPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::NumericPlug<float>,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (FloatPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::NumericPlug<float>,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (FloatPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::NumericPlug<float> {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def defaultValue (self, *args, **kwargs):
      '''
defaultValue( (FloatPlug)arg1) -> float :

    C++ signature :
        float defaultValue(Gaffer::NumericPlug<float> {lvalue})'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getValue (self, *args, **kwargs):
      '''
getValue( (FloatPlug)arg1 [, (MurmurHash)_precomputedHash=None]) -> float :

    C++ signature :
        float getValue(Gaffer::NumericPlug<float> const* [,IECore::MurmurHash const*=None])'''
    ...
    def hasMaxValue (self, *args, **kwargs):
      '''
hasMaxValue( (FloatPlug)arg1) -> bool :

    C++ signature :
        bool hasMaxValue(Gaffer::NumericPlug<float> {lvalue})'''
    ...
    def hasMinValue (self, *args, **kwargs):
      '''
hasMinValue( (FloatPlug)arg1) -> bool :

    C++ signature :
        bool hasMinValue(Gaffer::NumericPlug<float> {lvalue})'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (FloatPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::NumericPlug<float> {lvalue},IECore::TypeId)

isInstanceOf( (FloatPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::NumericPlug<float> {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def maxValue (self, *args, **kwargs):
      '''
maxValue( (FloatPlug)arg1) -> float :

    C++ signature :
        float maxValue(Gaffer::NumericPlug<float> {lvalue})'''
    ...
    def minValue (self, *args, **kwargs):
      '''
minValue( (FloatPlug)arg1) -> float :

    C++ signature :
        float minValue(Gaffer::NumericPlug<float> {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (FloatPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::NumericPlug<float> {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def setValue (self, *args, **kwargs):
      '''
setValue( (FloatPlug)arg1, (float)arg2) -> None :

    C++ signature :
        void setValue(Gaffer::NumericPlug<float>*,float)'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (FloatPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::NumericPlug<float> {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (FloatPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::NumericPlug<float> {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def FloatVectorDataPlug (*args):
      '''
__init__(boost::python::api::object, char const* name='FloatVectorDataPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, boost::intrusive_ptr<IECore::TypedData<std::vector<float, std::allocator<float> > > > defaultValue, unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class FloatVectorDataPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ValueType (self, *args, **kwargs):
      '''float-type vector class derived from Data class.
This class behaves like the native python lists, except that it only accepts float values.
The copy constructor accepts another instance of this class or a python list containing float
or any other python built-in type that is convertible into it.
It accepts slicing, negative indexing and special functions like extend, insert, etc.
'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (FloatVectorDataPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<float, std::allocator<float> > > >,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (FloatVectorDataPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<float, std::allocator<float> > > >,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (FloatVectorDataPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<float, std::allocator<float> > > >,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (FloatVectorDataPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<float, std::allocator<float> > > > {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def defaultValue (self, *args, **kwargs):
      '''
defaultValue( (object)arg1 [, (bool)_copy=True]) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::TypedData<std::vector<float, std::allocator<float> > > > defaultValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<float, std::allocator<float> > > > > [,bool=True])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getValue (self, *args, **kwargs):
      '''
getValue( (object)arg1 [, (MurmurHash)_precomputedHash=None [, (bool)_copy=True]]) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::Object> getValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<float, std::allocator<float> > > > > [,IECore::MurmurHash const*=None [,bool=True]])'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (FloatVectorDataPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<float, std::allocator<float> > > > {lvalue},IECore::TypeId)

isInstanceOf( (FloatVectorDataPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<float, std::allocator<float> > > > {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (FloatVectorDataPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<float, std::allocator<float> > > > {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def setValue (self, *args, **kwargs):
      '''
setValue( (object)arg1, (object)value [, (bool)_copy=True]) -> None :

    C++ signature :
        void setValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<float, std::allocator<float> > > > >,boost::intrusive_ptr<IECore::TypedData<std::vector<float, std::allocator<float> > > > [,bool=True])'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (FloatVectorDataPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<float, std::allocator<float> > > > {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (FloatVectorDataPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<float, std::allocator<float> > > > {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def GraphComponent (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)
__init__(_object*)

'''      
    ...

class GraphComponent:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::GraphComponent,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::GraphComponent,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (GraphComponent)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::GraphComponent {lvalue},IECore::TypeId)

isInstanceOf( (GraphComponent)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::GraphComponent {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (GraphComponent)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::GraphComponent {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::GraphComponent {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def GraphComponentPath (*args):
      '''

'''      
    ...

class GraphComponentPath:
    def PathChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _GraphComponentPath__graphComponent (self):
      '''None'''
    ...
    def _children (self, canceller):
      '''None'''
    ...
    def _emitPathChanged (self, *args, **kwargs):
      '''
_emitPathChanged( (Path)arg1) -> None :

    C++ signature :
        void _emitPathChanged(Gaffer::Path {lvalue})'''
    ...
    def _havePathChangedSignal (self, *args, **kwargs):
      '''
_havePathChangedSignal( (Path)arg1) -> bool :

    C++ signature :
        bool _havePathChangedSignal(Gaffer::Path {lvalue})'''
    ...
    def _pathChangedSignalCreated (self, *args, **kwargs):
      '''
_pathChangedSignalCreated( (Path)arg1) -> None :

    C++ signature :
        void _pathChangedSignalCreated((anonymous namespace)::PathWrapper<Gaffer::Path> {lvalue})'''
    ...
    def append (self, *args, **kwargs):
      '''
append( (Path)arg1, (InternedString)arg2) -> Path :

    C++ signature :
        Gaffer::Path {lvalue} append(Gaffer::Path {lvalue},IECore::InternedString)'''
    ...
    def baseTypeId ():
      '''None'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName ():
      '''None'''
    ...
    def cancellationSubject (self):
      '''None'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (Path)arg1 [, (Canceller)canceller=None]) -> list :

    C++ signature :
        boost::python::list children(Gaffer::Path {lvalue} [,IECore::Canceller const*=None])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def copy (self):
      '''None'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getFilter (self, *args, **kwargs):
      '''
getFilter( (Path)arg1) -> object :

    C++ signature :
        Gaffer::PathFilter* getFilter(Gaffer::Path {lvalue})'''
    ...
    def info (self, *args, **kwargs):
      '''
info( (object)arg1) -> object :

    C++ signature :
        boost::python::api::object info(boost::python::api::object)'''
    ...
    def inheritsFrom (t):
      '''None'''
    ...
    def isEmpty (self, *args, **kwargs):
      '''
isEmpty( (Path)arg1) -> bool :

    C++ signature :
        bool isEmpty(Gaffer::Path {lvalue})'''
    ...
    def isInstanceOf (self, t):
      '''None'''
    ...
    def isLeaf (self, canceller=None):
      '''None'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isValid (self, canceller=None):
      '''None'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (Path)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Path> parent(Gaffer::Path {lvalue})'''
    ...
    def pathChangedSignal (self, *args, **kwargs):
      '''
pathChangedSignal( (Path)arg1) -> PathChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Path*), Gaffer::Signals::DefaultCombiner<void> > {lvalue} pathChangedSignal(Gaffer::Path {lvalue})'''
    ...
    def property (self, name, canceller=None):
      '''None'''
    ...
    def propertyNames (self, canceller=None):
      '''None'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def root (self, *args, **kwargs):
      '''
root( (Path)arg1) -> str :

    C++ signature :
        char const* root(Gaffer::Path {lvalue})'''
    ...
    def setFilter (self, *args, **kwargs):
      '''
setFilter( (Path)arg1, (object)arg2) -> None :

    C++ signature :
        void setFilter(Gaffer::Path {lvalue},boost::intrusive_ptr<Gaffer::PathFilter>)'''
    ...
    def setFromPath (self, *args, **kwargs):
      '''
setFromPath( (Path)arg1, (Path)arg2) -> None :

    C++ signature :
        void setFromPath(Gaffer::Path {lvalue},Gaffer::Path const*)'''
    ...
    def setFromString (self, *args, **kwargs):
      '''
setFromString( (Path)arg1, (object)arg2) -> Path :

    C++ signature :
        Gaffer::Path {lvalue} setFromString(Gaffer::Path {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def staticTypeId ():
      '''None'''
    ...
    def staticTypeName ():
      '''None'''
    ...
    def truncateUntilValid (self, *args, **kwargs):
      '''
truncateUntilValid( (Path)arg1) -> Path :

    C++ signature :
        Gaffer::Path {lvalue} truncateUntilValid(Gaffer::Path {lvalue})'''
    ...
    def typeId (x):
      '''None'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (x):
      '''None'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...

def HiddenFilePathFilter (*args):
      '''
__init__(_object*, boost::intrusive_ptr<IECore::CompoundData> userData=None)

'''      
    ...

class HiddenFilePathFilter:
    def PathChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def changedSignal (self, *args, **kwargs):
      '''
changedSignal( (PathFilter)arg1) -> PathChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::PathFilter*), Gaffer::Signals::DefaultCombiner<void> > {lvalue} changedSignal(Gaffer::PathFilter {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def filter (self, *args, **kwargs):
      '''
filter( (PathFilter)arg1, (list)paths [, (Canceller)canceller=None]) -> list :

    C++ signature :
        boost::python::list filter(Gaffer::PathFilter {lvalue},boost::python::list [,IECore::Canceller const*=None])'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getEnabled (self, *args, **kwargs):
      '''
getEnabled( (PathFilter)arg1) -> bool :

    C++ signature :
        bool getEnabled(Gaffer::PathFilter {lvalue})'''
    ...
    def getInverted (self, *args, **kwargs):
      '''
getInverted( (HiddenFilePathFilter)arg1) -> bool :

    C++ signature :
        bool getInverted(Gaffer::HiddenFilePathFilter {lvalue})'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (HiddenFilePathFilter)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::HiddenFilePathFilter {lvalue},IECore::TypeId)

isInstanceOf( (HiddenFilePathFilter)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::HiddenFilePathFilter {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def setEnabled (self, *args, **kwargs):
      '''
setEnabled( (PathFilter)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnabled(Gaffer::PathFilter {lvalue},bool)'''
    ...
    def setInverted (self, *args, **kwargs):
      '''
setInverted( (HiddenFilePathFilter)arg1, (bool)arg2) -> None :

    C++ signature :
        void setInverted(Gaffer::HiddenFilePathFilter {lvalue},bool)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (HiddenFilePathFilter)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::HiddenFilePathFilter {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (HiddenFilePathFilter)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::HiddenFilePathFilter {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def userData (self, *args, **kwargs):
      '''
userData( (PathFilter)arg1) -> object :

    C++ signature :
        IECore::CompoundData* userData(Gaffer::PathFilter {lvalue})'''
    ...

def InfoPathFilter (*args):
      '''

'''      
    ...

class InfoPathFilter:
    def PathChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _filter (self, paths, canceller):
      '''None'''
    ...
    def baseTypeId ():
      '''None'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName ():
      '''None'''
    ...
    def changedSignal (self, *args, **kwargs):
      '''
changedSignal( (PathFilter)arg1) -> PathChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::PathFilter*), Gaffer::Signals::DefaultCombiner<void> > {lvalue} changedSignal(Gaffer::PathFilter {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def filter (self, *args, **kwargs):
      '''
filter( (PathFilter)arg1, (list)paths [, (Canceller)canceller=None]) -> list :

    C++ signature :
        boost::python::list filter(Gaffer::PathFilter {lvalue},boost::python::list [,IECore::Canceller const*=None])'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getEnabled (self, *args, **kwargs):
      '''
getEnabled( (PathFilter)arg1) -> bool :

    C++ signature :
        bool getEnabled(Gaffer::PathFilter {lvalue})'''
    ...
    def getMatcher (self):
      '''None'''
    ...
    def inheritsFrom (t):
      '''None'''
    ...
    def isInstanceOf (self, t):
      '''None'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def setEnabled (self, *args, **kwargs):
      '''
setEnabled( (PathFilter)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnabled(Gaffer::PathFilter {lvalue},bool)'''
    ...
    def setMatcher (self, infoKey, matcher):
      '''None'''
    ...
    def staticTypeId ():
      '''None'''
    ...
    def staticTypeName ():
      '''None'''
    ...
    def typeId (x):
      '''None'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (x):
      '''None'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def userData (self, *args, **kwargs):
      '''
userData( (PathFilter)arg1) -> object :

    C++ signature :
        IECore::CompoundData* userData(Gaffer::PathFilter {lvalue})'''
    ...

def IntPlug (*args):
      '''
__init__(_object*, char const* name='IntPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, int defaultValue=0, int minValue=-2147483648, int maxValue=2147483647, unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class IntPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ValueType (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (IntPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::NumericPlug<int>,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (IntPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::NumericPlug<int>,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (IntPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::NumericPlug<int>,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (IntPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::NumericPlug<int> {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def defaultValue (self, *args, **kwargs):
      '''
defaultValue( (IntPlug)arg1) -> int :

    C++ signature :
        int defaultValue(Gaffer::NumericPlug<int> {lvalue})'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getValue (self, *args, **kwargs):
      '''
getValue( (IntPlug)arg1 [, (MurmurHash)_precomputedHash=None]) -> int :

    C++ signature :
        int getValue(Gaffer::NumericPlug<int> const* [,IECore::MurmurHash const*=None])'''
    ...
    def hasMaxValue (self, *args, **kwargs):
      '''
hasMaxValue( (IntPlug)arg1) -> bool :

    C++ signature :
        bool hasMaxValue(Gaffer::NumericPlug<int> {lvalue})'''
    ...
    def hasMinValue (self, *args, **kwargs):
      '''
hasMinValue( (IntPlug)arg1) -> bool :

    C++ signature :
        bool hasMinValue(Gaffer::NumericPlug<int> {lvalue})'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (IntPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::NumericPlug<int> {lvalue},IECore::TypeId)

isInstanceOf( (IntPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::NumericPlug<int> {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def maxValue (self, *args, **kwargs):
      '''
maxValue( (IntPlug)arg1) -> int :

    C++ signature :
        int maxValue(Gaffer::NumericPlug<int> {lvalue})'''
    ...
    def minValue (self, *args, **kwargs):
      '''
minValue( (IntPlug)arg1) -> int :

    C++ signature :
        int minValue(Gaffer::NumericPlug<int> {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (IntPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::NumericPlug<int> {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def setValue (self, *args, **kwargs):
      '''
setValue( (IntPlug)arg1, (int)arg2) -> None :

    C++ signature :
        void setValue(Gaffer::NumericPlug<int>*,int)'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (IntPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::NumericPlug<int> {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (IntPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::NumericPlug<int> {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def IntVectorDataPlug (*args):
      '''
__init__(boost::python::api::object, char const* name='IntVectorDataPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, boost::intrusive_ptr<IECore::TypedData<std::vector<int, std::allocator<int> > > > defaultValue, unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class IntVectorDataPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ValueType (self, *args, **kwargs):
      '''int-type vector class derived from Data class.
This class behaves like the native python lists, except that it only accepts int values.
The copy constructor accepts another instance of this class or a python list containing int
or any other python built-in type that is convertible into it.
It accepts slicing, negative indexing and special functions like extend, insert, etc.
'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (IntVectorDataPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<int, std::allocator<int> > > >,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (IntVectorDataPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<int, std::allocator<int> > > >,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (IntVectorDataPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<int, std::allocator<int> > > >,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (IntVectorDataPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<int, std::allocator<int> > > > {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def defaultValue (self, *args, **kwargs):
      '''
defaultValue( (object)arg1 [, (bool)_copy=True]) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::TypedData<std::vector<int, std::allocator<int> > > > defaultValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<int, std::allocator<int> > > > > [,bool=True])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getValue (self, *args, **kwargs):
      '''
getValue( (object)arg1 [, (MurmurHash)_precomputedHash=None [, (bool)_copy=True]]) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::Object> getValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<int, std::allocator<int> > > > > [,IECore::MurmurHash const*=None [,bool=True]])'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (IntVectorDataPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<int, std::allocator<int> > > > {lvalue},IECore::TypeId)

isInstanceOf( (IntVectorDataPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<int, std::allocator<int> > > > {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (IntVectorDataPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<int, std::allocator<int> > > > {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def setValue (self, *args, **kwargs):
      '''
setValue( (object)arg1, (object)value [, (bool)_copy=True]) -> None :

    C++ signature :
        void setValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<int, std::allocator<int> > > > >,boost::intrusive_ptr<IECore::TypedData<std::vector<int, std::allocator<int> > > > [,bool=True])'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (IntVectorDataPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<int, std::allocator<int> > > > {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (IntVectorDataPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<int, std::allocator<int> > > > {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def InternedStringVectorDataPlug (*args):
      '''
__init__(boost::python::api::object, char const* name='InternedStringVectorDataPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, boost::intrusive_ptr<IECore::TypedData<std::vector<IECore::InternedString, std::allocator<IECore::InternedString> > > > defaultValue, unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class InternedStringVectorDataPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ValueType (self, *args, **kwargs):
      '''InternedString-type vector class derived from Data class.
This class behaves like the native python lists, except that it only accepts InternedString values.
The copy constructor accepts another instance of this class or a python list containing InternedString
or any other python built-in type that is convertible into it.
It accepts slicing, negative indexing and special functions like extend, insert, etc.
'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (InternedStringVectorDataPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<IECore::InternedString, std::allocator<IECore::InternedString> > > >,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (InternedStringVectorDataPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<IECore::InternedString, std::allocator<IECore::InternedString> > > >,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (InternedStringVectorDataPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<IECore::InternedString, std::allocator<IECore::InternedString> > > >,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (InternedStringVectorDataPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<IECore::InternedString, std::allocator<IECore::InternedString> > > > {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def defaultValue (self, *args, **kwargs):
      '''
defaultValue( (object)arg1 [, (bool)_copy=True]) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::TypedData<std::vector<IECore::InternedString, std::allocator<IECore::InternedString> > > > defaultValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<IECore::InternedString, std::allocator<IECore::InternedString> > > > > [,bool=True])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getValue (self, *args, **kwargs):
      '''
getValue( (object)arg1 [, (MurmurHash)_precomputedHash=None [, (bool)_copy=True]]) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::Object> getValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<IECore::InternedString, std::allocator<IECore::InternedString> > > > > [,IECore::MurmurHash const*=None [,bool=True]])'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (InternedStringVectorDataPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<IECore::InternedString, std::allocator<IECore::InternedString> > > > {lvalue},IECore::TypeId)

isInstanceOf( (InternedStringVectorDataPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<IECore::InternedString, std::allocator<IECore::InternedString> > > > {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (InternedStringVectorDataPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<IECore::InternedString, std::allocator<IECore::InternedString> > > > {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def setValue (self, *args, **kwargs):
      '''
setValue( (object)arg1, (object)value [, (bool)_copy=True]) -> None :

    C++ signature :
        void setValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<IECore::InternedString, std::allocator<IECore::InternedString> > > > >,boost::intrusive_ptr<IECore::TypedData<std::vector<IECore::InternedString, std::allocator<IECore::InternedString> > > > [,bool=True])'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (InternedStringVectorDataPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<IECore::InternedString, std::allocator<IECore::InternedString> > > > {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (InternedStringVectorDataPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<IECore::InternedString, std::allocator<IECore::InternedString> > > > {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def LeafPathFilter (*args):
      '''
__init__(_object*, boost::intrusive_ptr<IECore::CompoundData> userData=None)

'''      
    ...

class LeafPathFilter:
    def PathChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def changedSignal (self, *args, **kwargs):
      '''
changedSignal( (PathFilter)arg1) -> PathChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::PathFilter*), Gaffer::Signals::DefaultCombiner<void> > {lvalue} changedSignal(Gaffer::PathFilter {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def filter (self, *args, **kwargs):
      '''
filter( (PathFilter)arg1, (list)paths [, (Canceller)canceller=None]) -> list :

    C++ signature :
        boost::python::list filter(Gaffer::PathFilter {lvalue},boost::python::list [,IECore::Canceller const*=None])'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getEnabled (self, *args, **kwargs):
      '''
getEnabled( (PathFilter)arg1) -> bool :

    C++ signature :
        bool getEnabled(Gaffer::PathFilter {lvalue})'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (LeafPathFilter)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::LeafPathFilter {lvalue},IECore::TypeId)

isInstanceOf( (LeafPathFilter)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::LeafPathFilter {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def setEnabled (self, *args, **kwargs):
      '''
setEnabled( (PathFilter)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnabled(Gaffer::PathFilter {lvalue},bool)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (LeafPathFilter)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::LeafPathFilter {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (LeafPathFilter)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::LeafPathFilter {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def userData (self, *args, **kwargs):
      '''
userData( (PathFilter)arg1) -> object :

    C++ signature :
        IECore::CompoundData* userData(Gaffer::PathFilter {lvalue})'''
    ...

def Loop (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='Loop')

'''      
    ...

class Loop:
    def BinaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ErrorSignal (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def UnaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (Loop)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::Loop,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (Loop)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::Loop,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def affects (self, *args, **kwargs):
      '''
affects( (Loop)arg1, (Plug)arg2) -> list :

    C++ signature :
        boost::python::list affects(Gaffer::Loop,Gaffer::Plug const*)'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def correspondingInput (self, *args, **kwargs):
      '''
correspondingInput( (Loop)arg1, (Plug)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> correspondingInput(Gaffer::Loop {lvalue},Gaffer::Plug const*)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def enabledPlug (self, *args, **kwargs):
      '''
enabledPlug( (Loop)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::TypedPlug<bool> > enabledPlug(Gaffer::Loop {lvalue})'''
    ...
    def errorSignal (self, *args, **kwargs):
      '''
errorSignal( (Node)arg1) -> ErrorSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug const*, Gaffer::Plug const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} errorSignal(Gaffer::Node {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (Loop)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Loop {lvalue},IECore::TypeId)

isInstanceOf( (Loop)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Loop {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plugDirtiedSignal (self, *args, **kwargs):
      '''
plugDirtiedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugDirtiedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugInputChangedSignal (self, *args, **kwargs):
      '''
plugInputChangedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugInputChangedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugSetSignal (self, *args, **kwargs):
      '''
plugSetSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugSetSignal(Gaffer::Node {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def scriptNode (self, *args, **kwargs):
      '''
scriptNode( (Node)arg1) -> object :

    C++ signature :
        Gaffer::ScriptNode* scriptNode(Gaffer::Node {lvalue})'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setup (self, *args, **kwargs):
      '''
setup( (Loop)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setup(Gaffer::Loop {lvalue},Gaffer::ValuePlug)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (Loop)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::Loop {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (Loop)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::Loop {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def LoopComputeNode (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='Loop')

'''      
    ...

class LoopComputeNode:
    def BinaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ErrorSignal (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def UnaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (Loop)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::Loop,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (Loop)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::Loop,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def affects (self, *args, **kwargs):
      '''
affects( (Loop)arg1, (Plug)arg2) -> list :

    C++ signature :
        boost::python::list affects(Gaffer::Loop,Gaffer::Plug const*)'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def correspondingInput (self, *args, **kwargs):
      '''
correspondingInput( (Loop)arg1, (Plug)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> correspondingInput(Gaffer::Loop {lvalue},Gaffer::Plug const*)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def enabledPlug (self, *args, **kwargs):
      '''
enabledPlug( (Loop)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::TypedPlug<bool> > enabledPlug(Gaffer::Loop {lvalue})'''
    ...
    def errorSignal (self, *args, **kwargs):
      '''
errorSignal( (Node)arg1) -> ErrorSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug const*, Gaffer::Plug const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} errorSignal(Gaffer::Node {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (Loop)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Loop {lvalue},IECore::TypeId)

isInstanceOf( (Loop)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Loop {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plugDirtiedSignal (self, *args, **kwargs):
      '''
plugDirtiedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugDirtiedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugInputChangedSignal (self, *args, **kwargs):
      '''
plugInputChangedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugInputChangedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugSetSignal (self, *args, **kwargs):
      '''
plugSetSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugSetSignal(Gaffer::Node {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def scriptNode (self, *args, **kwargs):
      '''
scriptNode( (Node)arg1) -> object :

    C++ signature :
        Gaffer::ScriptNode* scriptNode(Gaffer::Node {lvalue})'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setup (self, *args, **kwargs):
      '''
setup( (Loop)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setup(Gaffer::Loop {lvalue},Gaffer::ValuePlug)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (Loop)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::Loop {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (Loop)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::Loop {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def M33fPlug (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='M33fPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, Imath_3_1::Matrix33<float> defaultValue=M33f((1, 0, 0), (0, 1, 0), (0, 0, 1)), unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class M33fPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ValueType (self, *args, **kwargs):
      '''M33f'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (M33fPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::TypedPlug<Imath_3_1::Matrix33<float> >,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (M33fPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::TypedPlug<Imath_3_1::Matrix33<float> >,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (M33fPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::TypedPlug<Imath_3_1::Matrix33<float> >,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (M33fPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::TypedPlug<Imath_3_1::Matrix33<float> > {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def defaultValue (self, *args, **kwargs):
      '''
defaultValue( (M33fPlug)arg1) -> M33f :

    C++ signature :
        Imath_3_1::Matrix33<float> defaultValue(Gaffer::TypedPlug<Imath_3_1::Matrix33<float> > {lvalue})'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getValue (self, *args, **kwargs):
      '''
getValue( (M33fPlug)arg1 [, (MurmurHash)_precomputedHash=None]) -> M33f :

    C++ signature :
        Imath_3_1::Matrix33<float> getValue(Gaffer::TypedPlug<Imath_3_1::Matrix33<float> > const* [,IECore::MurmurHash const*=None])'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (M33fPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedPlug<Imath_3_1::Matrix33<float> > {lvalue},IECore::TypeId)

isInstanceOf( (M33fPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedPlug<Imath_3_1::Matrix33<float> > {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (M33fPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::TypedPlug<Imath_3_1::Matrix33<float> > {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def setValue (self, *args, **kwargs):
      '''
setValue( (M33fPlug)arg1, (M33f)arg2) -> None :

    C++ signature :
        void setValue(Gaffer::TypedPlug<Imath_3_1::Matrix33<float> >*,Imath_3_1::Matrix33<float>)'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (M33fPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::TypedPlug<Imath_3_1::Matrix33<float> > {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (M33fPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::TypedPlug<Imath_3_1::Matrix33<float> > {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def M33fVectorDataPlug (*args):
      '''
__init__(boost::python::api::object, char const* name='M33fVectorDataPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, boost::intrusive_ptr<IECore::TypedData<std::vector<Imath_3_1::Matrix33<float>, std::allocator<Imath_3_1::Matrix33<float> > > > > defaultValue, unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class M33fVectorDataPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ValueType (self, *args, **kwargs):
      '''M33f-type vector class derived from Data class.
This class behaves like the native python lists, except that it only accepts M33f values.
The copy constructor accepts another instance of this class or a python list containing M33f
or any other python built-in type that is convertible into it.
It accepts slicing, negative indexing and special functions like extend, insert, etc.
'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (M33fVectorDataPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Matrix33<float>, std::allocator<Imath_3_1::Matrix33<float> > > > >,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (M33fVectorDataPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Matrix33<float>, std::allocator<Imath_3_1::Matrix33<float> > > > >,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (M33fVectorDataPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Matrix33<float>, std::allocator<Imath_3_1::Matrix33<float> > > > >,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (M33fVectorDataPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Matrix33<float>, std::allocator<Imath_3_1::Matrix33<float> > > > > {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def defaultValue (self, *args, **kwargs):
      '''
defaultValue( (object)arg1 [, (bool)_copy=True]) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::TypedData<std::vector<Imath_3_1::Matrix33<float>, std::allocator<Imath_3_1::Matrix33<float> > > > > defaultValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Matrix33<float>, std::allocator<Imath_3_1::Matrix33<float> > > > > > [,bool=True])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getValue (self, *args, **kwargs):
      '''
getValue( (object)arg1 [, (MurmurHash)_precomputedHash=None [, (bool)_copy=True]]) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::Object> getValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Matrix33<float>, std::allocator<Imath_3_1::Matrix33<float> > > > > > [,IECore::MurmurHash const*=None [,bool=True]])'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (M33fVectorDataPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Matrix33<float>, std::allocator<Imath_3_1::Matrix33<float> > > > > {lvalue},IECore::TypeId)

isInstanceOf( (M33fVectorDataPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Matrix33<float>, std::allocator<Imath_3_1::Matrix33<float> > > > > {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (M33fVectorDataPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Matrix33<float>, std::allocator<Imath_3_1::Matrix33<float> > > > > {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def setValue (self, *args, **kwargs):
      '''
setValue( (object)arg1, (object)value [, (bool)_copy=True]) -> None :

    C++ signature :
        void setValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Matrix33<float>, std::allocator<Imath_3_1::Matrix33<float> > > > > >,boost::intrusive_ptr<IECore::TypedData<std::vector<Imath_3_1::Matrix33<float>, std::allocator<Imath_3_1::Matrix33<float> > > > > [,bool=True])'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (M33fVectorDataPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Matrix33<float>, std::allocator<Imath_3_1::Matrix33<float> > > > > {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (M33fVectorDataPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Matrix33<float>, std::allocator<Imath_3_1::Matrix33<float> > > > > {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def M44fPlug (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='M44fPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, Imath_3_1::Matrix44<float> defaultValue=M44f((1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1)), unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class M44fPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ValueType (self, *args, **kwargs):
      '''M44f'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (M44fPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::TypedPlug<Imath_3_1::Matrix44<float> >,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (M44fPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::TypedPlug<Imath_3_1::Matrix44<float> >,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (M44fPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::TypedPlug<Imath_3_1::Matrix44<float> >,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (M44fPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::TypedPlug<Imath_3_1::Matrix44<float> > {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def defaultValue (self, *args, **kwargs):
      '''
defaultValue( (M44fPlug)arg1) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> defaultValue(Gaffer::TypedPlug<Imath_3_1::Matrix44<float> > {lvalue})'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getValue (self, *args, **kwargs):
      '''
getValue( (M44fPlug)arg1 [, (MurmurHash)_precomputedHash=None]) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> getValue(Gaffer::TypedPlug<Imath_3_1::Matrix44<float> > const* [,IECore::MurmurHash const*=None])'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (M44fPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedPlug<Imath_3_1::Matrix44<float> > {lvalue},IECore::TypeId)

isInstanceOf( (M44fPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedPlug<Imath_3_1::Matrix44<float> > {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (M44fPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::TypedPlug<Imath_3_1::Matrix44<float> > {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def setValue (self, *args, **kwargs):
      '''
setValue( (M44fPlug)arg1, (M44f)arg2) -> None :

    C++ signature :
        void setValue(Gaffer::TypedPlug<Imath_3_1::Matrix44<float> >*,Imath_3_1::Matrix44<float>)'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (M44fPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::TypedPlug<Imath_3_1::Matrix44<float> > {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (M44fPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::TypedPlug<Imath_3_1::Matrix44<float> > {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def M44fVectorDataPlug (*args):
      '''
__init__(boost::python::api::object, char const* name='M44fVectorDataPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, boost::intrusive_ptr<IECore::TypedData<std::vector<Imath_3_1::Matrix44<float>, std::allocator<Imath_3_1::Matrix44<float> > > > > defaultValue, unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class M44fVectorDataPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ValueType (self, *args, **kwargs):
      '''M44f-type vector class derived from Data class.
This class behaves like the native python lists, except that it only accepts M44f values.
The copy constructor accepts another instance of this class or a python list containing M44f
or any other python built-in type that is convertible into it.
It accepts slicing, negative indexing and special functions like extend, insert, etc.
'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (M44fVectorDataPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Matrix44<float>, std::allocator<Imath_3_1::Matrix44<float> > > > >,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (M44fVectorDataPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Matrix44<float>, std::allocator<Imath_3_1::Matrix44<float> > > > >,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (M44fVectorDataPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Matrix44<float>, std::allocator<Imath_3_1::Matrix44<float> > > > >,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (M44fVectorDataPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Matrix44<float>, std::allocator<Imath_3_1::Matrix44<float> > > > > {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def defaultValue (self, *args, **kwargs):
      '''
defaultValue( (object)arg1 [, (bool)_copy=True]) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::TypedData<std::vector<Imath_3_1::Matrix44<float>, std::allocator<Imath_3_1::Matrix44<float> > > > > defaultValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Matrix44<float>, std::allocator<Imath_3_1::Matrix44<float> > > > > > [,bool=True])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getValue (self, *args, **kwargs):
      '''
getValue( (object)arg1 [, (MurmurHash)_precomputedHash=None [, (bool)_copy=True]]) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::Object> getValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Matrix44<float>, std::allocator<Imath_3_1::Matrix44<float> > > > > > [,IECore::MurmurHash const*=None [,bool=True]])'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (M44fVectorDataPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Matrix44<float>, std::allocator<Imath_3_1::Matrix44<float> > > > > {lvalue},IECore::TypeId)

isInstanceOf( (M44fVectorDataPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Matrix44<float>, std::allocator<Imath_3_1::Matrix44<float> > > > > {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (M44fVectorDataPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Matrix44<float>, std::allocator<Imath_3_1::Matrix44<float> > > > > {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def setValue (self, *args, **kwargs):
      '''
setValue( (object)arg1, (object)value [, (bool)_copy=True]) -> None :

    C++ signature :
        void setValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Matrix44<float>, std::allocator<Imath_3_1::Matrix44<float> > > > > >,boost::intrusive_ptr<IECore::TypedData<std::vector<Imath_3_1::Matrix44<float>, std::allocator<Imath_3_1::Matrix44<float> > > > > [,bool=True])'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (M44fVectorDataPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Matrix44<float>, std::allocator<Imath_3_1::Matrix44<float> > > > > {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (M44fVectorDataPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<Imath_3_1::Matrix44<float>, std::allocator<Imath_3_1::Matrix44<float> > > > > {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def MatchPatternPathFilter (*args):
      '''
__init__(boost::python::api::object, boost::python::api::object patterns, char const* propertyName='name', bool leafOnly=True)

'''      
    ...

class MatchPatternPathFilter:
    def PathChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def changedSignal (self, *args, **kwargs):
      '''
changedSignal( (PathFilter)arg1) -> PathChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::PathFilter*), Gaffer::Signals::DefaultCombiner<void> > {lvalue} changedSignal(Gaffer::PathFilter {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def filter (self, *args, **kwargs):
      '''
filter( (PathFilter)arg1, (list)paths [, (Canceller)canceller=None]) -> list :

    C++ signature :
        boost::python::list filter(Gaffer::PathFilter {lvalue},boost::python::list [,IECore::Canceller const*=None])'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getEnabled (self, *args, **kwargs):
      '''
getEnabled( (PathFilter)arg1) -> bool :

    C++ signature :
        bool getEnabled(Gaffer::PathFilter {lvalue})'''
    ...
    def getInverted (self, *args, **kwargs):
      '''
getInverted( (MatchPatternPathFilter)arg1) -> bool :

    C++ signature :
        bool getInverted(Gaffer::MatchPatternPathFilter {lvalue})'''
    ...
    def getMatchPatterns (self, *args, **kwargs):
      '''
getMatchPatterns( (MatchPatternPathFilter)arg1) -> list :

    C++ signature :
        boost::python::list getMatchPatterns(Gaffer::MatchPatternPathFilter)'''
    ...
    def getPropertyName (self, *args, **kwargs):
      '''
getPropertyName( (MatchPatternPathFilter)arg1) -> str :

    C++ signature :
        char const* getPropertyName(Gaffer::MatchPatternPathFilter)'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (MatchPatternPathFilter)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::MatchPatternPathFilter {lvalue},IECore::TypeId)

isInstanceOf( (MatchPatternPathFilter)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::MatchPatternPathFilter {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def setEnabled (self, *args, **kwargs):
      '''
setEnabled( (PathFilter)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnabled(Gaffer::PathFilter {lvalue},bool)'''
    ...
    def setInverted (self, *args, **kwargs):
      '''
setInverted( (MatchPatternPathFilter)arg1, (bool)arg2) -> None :

    C++ signature :
        void setInverted(Gaffer::MatchPatternPathFilter {lvalue},bool)'''
    ...
    def setMatchPatterns (self, *args, **kwargs):
      '''
setMatchPatterns( (MatchPatternPathFilter)arg1, (object)arg2) -> None :

    C++ signature :
        void setMatchPatterns(Gaffer::MatchPatternPathFilter {lvalue},boost::python::api::object)'''
    ...
    def setPropertyName (self, *args, **kwargs):
      '''
setPropertyName( (MatchPatternPathFilter)arg1, (InternedString)arg2) -> None :

    C++ signature :
        void setPropertyName(Gaffer::MatchPatternPathFilter {lvalue},IECore::InternedString)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (MatchPatternPathFilter)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::MatchPatternPathFilter {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (MatchPatternPathFilter)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::MatchPatternPathFilter {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def userData (self, *args, **kwargs):
      '''
userData( (PathFilter)arg1) -> object :

    C++ signature :
        IECore::CompoundData* userData(Gaffer::PathFilter {lvalue})'''
    ...

def Metadata (*args):
      '''

'''      
    ...

class Metadata:
    def LegacyNodeValueChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def LegacyPlugValueChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def NodeValueChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def PlugValueChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def RegistrationTypes (self, *args, **kwargs):
      '''None'''
    ...
    def ValueChangedReason (self, *args, **kwargs):
      '''None'''
    ...
    def ValueChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def deregisterValue (self, *args, **kwargs):
      '''
deregisterValue( (InternedString)arg1, (InternedString)arg2) -> None :

    C++ signature :
        void deregisterValue(IECore::InternedString,IECore::InternedString)

deregisterValue( (TypeId)arg1, (InternedString)arg2) -> None :

    C++ signature :
        void deregisterValue(IECore::TypeId,IECore::InternedString)

deregisterValue( (TypeId)arg1, (object)arg2, (InternedString)arg3) -> None :

    C++ signature :
        void deregisterValue(IECore::TypeId,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,IECore::InternedString)

deregisterValue( (GraphComponent)arg1, (InternedString)arg2) -> None :

    C++ signature :
        void deregisterValue(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def nodeValueChangedSignal (self, *args, **kwargs):
      '''
nodeValueChangedSignal() -> LegacyNodeValueChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (IECore::TypeId, IECore::InternedString, Gaffer::Node*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nodeValueChangedSignal()

nodeValueChangedSignal( (Node)arg1) -> NodeValueChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Node*, IECore::InternedString, Gaffer::Metadata::ValueChangedReason), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nodeValueChangedSignal(Gaffer::Node*)'''
    ...
    def nodesWithMetadata (self, *args, **kwargs):
      '''
nodesWithMetadata( (GraphComponent)root, (object)key [, (bool)instanceOnly=False]) -> list :

    C++ signature :
        boost::python::list nodesWithMetadata(Gaffer::GraphComponent*,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > [,bool=False])'''
    ...
    def plugValueChangedSignal (self, *args, **kwargs):
      '''
plugValueChangedSignal() -> LegacyPlugValueChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (IECore::TypeId, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, IECore::InternedString, Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugValueChangedSignal()

plugValueChangedSignal( (Node)arg1) -> PlugValueChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*, IECore::InternedString, Gaffer::Metadata::ValueChangedReason), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugValueChangedSignal(Gaffer::Node*)'''
    ...
    def plugsWithMetadata (self, *args, **kwargs):
      '''
plugsWithMetadata( (GraphComponent)root, (object)key [, (bool)instanceOnly=False]) -> list :

    C++ signature :
        boost::python::list plugsWithMetadata(Gaffer::GraphComponent*,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > [,bool=False])'''
    ...
    def registerNode (self, *args, **kwargs):
      '''
object registerNode(tuple args, dict kwds) :

    C++ signature :
        object registerNode(tuple args, dict kwds)'''
    ...
    def registerNodeValue (self, *args, **kwargs):
      '''
registerValue( (InternedString)arg1, (InternedString)arg2, (object)arg3) -> None :

    C++ signature :
        void registerValue(IECore::InternedString,IECore::InternedString,boost::python::api::object {lvalue})

registerValue( (TypeId)arg1, (InternedString)arg2, (object)arg3) -> None :

    C++ signature :
        void registerValue(IECore::TypeId,IECore::InternedString,boost::python::api::object {lvalue})

registerValue( (TypeId)arg1, (str)arg2, (InternedString)arg3, (object)arg4) -> None :

    C++ signature :
        void registerValue(IECore::TypeId,char const*,IECore::InternedString,boost::python::api::object {lvalue})

registerValue( (GraphComponent)arg1, (InternedString)target, (object)value [, (bool)persistent=True]) -> None :

    C++ signature :
        void registerValue(Gaffer::GraphComponent {lvalue},IECore::InternedString,boost::intrusive_ptr<IECore::Data const> [,bool=True])'''
    ...
    def registerPlugValue (self, *args, **kwargs):
      '''
registerValue( (InternedString)arg1, (InternedString)arg2, (object)arg3) -> None :

    C++ signature :
        void registerValue(IECore::InternedString,IECore::InternedString,boost::python::api::object {lvalue})

registerValue( (TypeId)arg1, (InternedString)arg2, (object)arg3) -> None :

    C++ signature :
        void registerValue(IECore::TypeId,IECore::InternedString,boost::python::api::object {lvalue})

registerValue( (TypeId)arg1, (str)arg2, (InternedString)arg3, (object)arg4) -> None :

    C++ signature :
        void registerValue(IECore::TypeId,char const*,IECore::InternedString,boost::python::api::object {lvalue})

registerValue( (GraphComponent)arg1, (InternedString)target, (object)value [, (bool)persistent=True]) -> None :

    C++ signature :
        void registerValue(Gaffer::GraphComponent {lvalue},IECore::InternedString,boost::intrusive_ptr<IECore::Data const> [,bool=True])'''
    ...
    def registerValue (self, *args, **kwargs):
      '''
registerValue( (InternedString)arg1, (InternedString)arg2, (object)arg3) -> None :

    C++ signature :
        void registerValue(IECore::InternedString,IECore::InternedString,boost::python::api::object {lvalue})

registerValue( (TypeId)arg1, (InternedString)arg2, (object)arg3) -> None :

    C++ signature :
        void registerValue(IECore::TypeId,IECore::InternedString,boost::python::api::object {lvalue})

registerValue( (TypeId)arg1, (str)arg2, (InternedString)arg3, (object)arg4) -> None :

    C++ signature :
        void registerValue(IECore::TypeId,char const*,IECore::InternedString,boost::python::api::object {lvalue})

registerValue( (GraphComponent)arg1, (InternedString)target, (object)value [, (bool)persistent=True]) -> None :

    C++ signature :
        void registerValue(Gaffer::GraphComponent {lvalue},IECore::InternedString,boost::intrusive_ptr<IECore::Data const> [,bool=True])'''
    ...
    def registeredValues (self, *args, **kwargs):
      '''
registeredValues( (InternedString)arg1) -> list :

    C++ signature :
        boost::python::list registeredValues(IECore::InternedString)

registeredValues( (GraphComponent)target [, (bool)instanceOnly=False [, (bool)persistentOnly=False]]) -> list :

    C++ signature :
        boost::python::list registeredValues(Gaffer::GraphComponent const* [,bool=False [,bool=False]])

registeredValues( (GraphComponent)target [, (RegistrationTypes)registrationTypes=Gaffer._Gaffer.RegistrationTypes.All]) -> list :

    C++ signature :
        boost::python::list registeredValues(Gaffer::GraphComponent const* [,Gaffer::Metadata::RegistrationTypes=Gaffer._Gaffer.RegistrationTypes.All])'''
    ...
    def value (self, *args, **kwargs):
      '''
value( (InternedString)target, (InternedString)key [, (bool)_copy=True]) -> object :

    C++ signature :
        boost::python::api::object value(IECore::InternedString,IECore::InternedString [,bool=True])

value( (GraphComponent)target, (InternedString)key [, (bool)instanceOnly=False [, (bool)_copy=True]]) -> object :

    C++ signature :
        boost::python::api::object value(Gaffer::GraphComponent,IECore::InternedString [,bool=False [,bool=True]])

value( (GraphComponent)arg1, (InternedString)target [, (int)registrationTypes=Gaffer._Gaffer.RegistrationTypes.All [, (bool)_copy=True]]) -> object :

    C++ signature :
        boost::python::api::object value(Gaffer::GraphComponent,IECore::InternedString [,unsigned int=Gaffer._Gaffer.RegistrationTypes.All [,bool=True]])'''
    ...
    def valueChangedSignal (self, *args, **kwargs):
      '''
valueChangedSignal() -> ValueChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (IECore::InternedString, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} valueChangedSignal()'''
    ...

def MetadataAlgo (*args):
      '''

'''      
    ...

def Monitor (*args):
      '''

'''      
    ...

class Monitor:
    def _Scope (self, *args, **kwargs):
      '''None'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...

def MonitorAlgo (*args):
      '''

'''      
    ...

def NameSwitch (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='NameSwitch')

'''      
    ...

class NameSwitch:
    def BinaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ErrorSignal (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def UnaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (NameSwitch)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::NameSwitch,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (NameSwitch)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::NameSwitch,Gaffer::GraphComponent const*)'''
    ...
    def activeInPlug (self, *args, **kwargs):
      '''
activeInPlug( (Switch)arg1 [, (Plug)plug=None]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> activeInPlug(Gaffer::Switch {lvalue} [,Gaffer::Plug const*=None])'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def affects (self, *args, **kwargs):
      '''
affects( (NameSwitch)arg1, (Plug)arg2) -> list :

    C++ signature :
        boost::python::list affects(Gaffer::NameSwitch,Gaffer::Plug const*)'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def correspondingInput (self, *args, **kwargs):
      '''
correspondingInput( (NameSwitch)arg1, (Plug)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> correspondingInput(Gaffer::NameSwitch {lvalue},Gaffer::Plug const*)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def enabledPlug (self, *args, **kwargs):
      '''
enabledPlug( (NameSwitch)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::TypedPlug<bool> > enabledPlug(Gaffer::NameSwitch {lvalue})'''
    ...
    def errorSignal (self, *args, **kwargs):
      '''
errorSignal( (Node)arg1) -> ErrorSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug const*, Gaffer::Plug const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} errorSignal(Gaffer::Node {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (NameSwitch)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::NameSwitch {lvalue},IECore::TypeId)

isInstanceOf( (NameSwitch)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::NameSwitch {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plugDirtiedSignal (self, *args, **kwargs):
      '''
plugDirtiedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugDirtiedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugInputChangedSignal (self, *args, **kwargs):
      '''
plugInputChangedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugInputChangedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugSetSignal (self, *args, **kwargs):
      '''
plugSetSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugSetSignal(Gaffer::Node {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def scriptNode (self, *args, **kwargs):
      '''
scriptNode( (Node)arg1) -> object :

    C++ signature :
        Gaffer::ScriptNode* scriptNode(Gaffer::Node {lvalue})'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setup (self, *args, **kwargs):
      '''
setup( (NameSwitch)arg1, (Plug)arg2) -> None :

    C++ signature :
        void setup(Gaffer::NameSwitch {lvalue},Gaffer::Plug)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (NameSwitch)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::NameSwitch {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (NameSwitch)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::NameSwitch {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def NameValuePlug (*args):
      '''
__init__(boost::python::api::object, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > nameDefault, boost::intrusive_ptr<Gaffer::Plug> valuePlug, bool defaultEnabled, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='NameValuePlug', boost::python::api::object flags=None)
__init__(boost::python::api::object, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > nameDefault, boost::intrusive_ptr<IECore::Data> valueDefault, bool defaultEnabled, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='NameValuePlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, unsigned int flags=Gaffer._Gaffer.Flags.Default)
__init__(boost::python::api::object, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > nameDefault, boost::intrusive_ptr<Gaffer::Plug> valuePlug, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='NameValuePlug', boost::python::api::object flags=None)
__init__(boost::python::api::object, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > nameDefault, boost::intrusive_ptr<IECore::Data> valueDefault, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='NameValuePlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, unsigned int flags=Gaffer._Gaffer.Flags.Default)
__init__(_object*, char const* name='NameValuePlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class NameValuePlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (NameValuePlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::NameValuePlug,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (NameValuePlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::NameValuePlug,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (NameValuePlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::NameValuePlug,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (NameValuePlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::NameValuePlug {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (NameValuePlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::NameValuePlug {lvalue},IECore::TypeId)

isInstanceOf( (NameValuePlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::NameValuePlug {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (NameValuePlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::NameValuePlug {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (NameValuePlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::NameValuePlug {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (NameValuePlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::NameValuePlug {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def Node (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='Node')

'''      
    ...

class Node:
    def BinaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ErrorSignal (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def UnaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (Node)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::Node,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (Node)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::Node,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def errorSignal (self, *args, **kwargs):
      '''
errorSignal( (Node)arg1) -> ErrorSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug const*, Gaffer::Plug const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} errorSignal(Gaffer::Node {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (Node)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Node {lvalue},IECore::TypeId)

isInstanceOf( (Node)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Node {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plugDirtiedSignal (self, *args, **kwargs):
      '''
plugDirtiedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugDirtiedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugInputChangedSignal (self, *args, **kwargs):
      '''
plugInputChangedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugInputChangedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugSetSignal (self, *args, **kwargs):
      '''
plugSetSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugSetSignal(Gaffer::Node {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def scriptNode (self, *args, **kwargs):
      '''
scriptNode( (Node)arg1) -> object :

    C++ signature :
        Gaffer::ScriptNode* scriptNode(Gaffer::Node {lvalue})'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (Node)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::Node {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (Node)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::Node {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def NodeAlgo (*args):
      '''

'''      
    ...

def NodeSerialiser (*args):
      '''
__init__(_object*)

'''      
    ...

class NodeSerialiser:
    def childNeedsConstruction (self, *args, **kwargs):
      '''
childNeedsConstruction( (NodeSerialiser)arg1, (GraphComponent)arg2, (Serialisation)arg3) -> bool :

    C++ signature :
        bool childNeedsConstruction(GafferBindings::NodeSerialiser const*,Gaffer::GraphComponent const*,GafferBindings::Serialisation)'''
    ...
    def childNeedsSerialisation (self, *args, **kwargs):
      '''
childNeedsSerialisation( (NodeSerialiser)arg1, (GraphComponent)arg2, (Serialisation)arg3) -> bool :

    C++ signature :
        bool childNeedsSerialisation(GafferBindings::NodeSerialiser const*,Gaffer::GraphComponent const*,GafferBindings::Serialisation)'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def constructor (self, *args, **kwargs):
      '''
constructor( (NodeSerialiser)arg1, (GraphComponent)arg2, (Serialisation)arg3) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > constructor(GafferBindings::NodeSerialiser const*,Gaffer::GraphComponent const*,GafferBindings::Serialisation {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def moduleDependencies (self, *args, **kwargs):
      '''
moduleDependencies( (NodeSerialiser)arg1, (GraphComponent)arg2, (Serialisation)arg3) -> object :

    C++ signature :
        boost::python::api::object moduleDependencies(GafferBindings::NodeSerialiser const*,Gaffer::GraphComponent const*,GafferBindings::Serialisation)'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def postConstructor (self, *args, **kwargs):
      '''
postConstructor( (NodeSerialiser)arg1, (GraphComponent)arg2, (object)arg3, (Serialisation)arg4) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > postConstructor(GafferBindings::NodeSerialiser const*,Gaffer::GraphComponent const*,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,GafferBindings::Serialisation {lvalue})'''
    ...
    def postHierarchy (self, *args, **kwargs):
      '''
postHierarchy( (NodeSerialiser)arg1, (GraphComponent)arg2, (object)arg3, (Serialisation)arg4) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > postHierarchy(GafferBindings::NodeSerialiser const*,Gaffer::GraphComponent const*,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,GafferBindings::Serialisation {lvalue})'''
    ...
    def postScript (self, *args, **kwargs):
      '''
postScript( (NodeSerialiser)arg1, (GraphComponent)arg2, (object)arg3, (Serialisation)arg4) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > postScript(GafferBindings::NodeSerialiser const*,Gaffer::GraphComponent const*,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,GafferBindings::Serialisation {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...

def NumericBookmarkSet (*args):
      '''
__init__(_object*, boost::intrusive_ptr<Gaffer::ScriptNode>, int)

'''      
    ...

class NumericBookmarkSet:
    def MemberSignal (self, *args, **kwargs):
      '''None'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def contains (self, *args, **kwargs):
      '''
contains( (Set)arg1, (RunTimeTyped)arg2) -> bool :

    C++ signature :
        bool contains(Gaffer::Set {lvalue},IECore::RunTimeTyped const*)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getBookmark (self, *args, **kwargs):
      '''
getBookmark( (NumericBookmarkSet)arg1) -> int :

    C++ signature :
        int getBookmark(Gaffer::NumericBookmarkSet {lvalue})'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (NumericBookmarkSet)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::NumericBookmarkSet {lvalue},IECore::TypeId)

isInstanceOf( (NumericBookmarkSet)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::NumericBookmarkSet {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def memberAddedSignal (self, *args, **kwargs):
      '''
memberAddedSignal( (Set)arg1) -> MemberSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Set*, IECore::RunTimeTyped*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} memberAddedSignal(Gaffer::Set {lvalue})'''
    ...
    def memberRemovedSignal (self, *args, **kwargs):
      '''
memberRemovedSignal( (Set)arg1) -> MemberSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Set*, IECore::RunTimeTyped*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} memberRemovedSignal(Gaffer::Set {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def setBookmark (self, *args, **kwargs):
      '''
setBookmark( (NumericBookmarkSet)arg1, (int)arg2) -> None :

    C++ signature :
        void setBookmark(Gaffer::NumericBookmarkSet {lvalue},int)'''
    ...
    def size (self, *args, **kwargs):
      '''
size( (Set)arg1) -> int :

    C++ signature :
        unsigned long size(Gaffer::Set {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (NumericBookmarkSet)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::NumericBookmarkSet {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (NumericBookmarkSet)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::NumericBookmarkSet {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...

def ObjectPlug (*args):
      '''
__init__(boost::python::api::object, char const* name='ObjectPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, boost::intrusive_ptr<IECore::Object> defaultValue, unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class ObjectPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ValueType (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (ObjectPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::TypedObjectPlug<IECore::Object>,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (ObjectPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::TypedObjectPlug<IECore::Object>,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (ObjectPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::TypedObjectPlug<IECore::Object>,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (ObjectPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::TypedObjectPlug<IECore::Object> {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def defaultValue (self, *args, **kwargs):
      '''
defaultValue( (object)arg1 [, (bool)_copy=True]) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::Object> defaultValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::Object> > [,bool=True])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getValue (self, *args, **kwargs):
      '''
getValue( (object)arg1 [, (MurmurHash)_precomputedHash=None [, (bool)_copy=True]]) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::Object> getValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::Object> > [,IECore::MurmurHash const*=None [,bool=True]])'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (ObjectPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedObjectPlug<IECore::Object> {lvalue},IECore::TypeId)

isInstanceOf( (ObjectPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedObjectPlug<IECore::Object> {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (ObjectPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::TypedObjectPlug<IECore::Object> {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def setValue (self, *args, **kwargs):
      '''
setValue( (object)arg1, (object)value [, (bool)_copy=True]) -> None :

    C++ signature :
        void setValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::Object> >,boost::intrusive_ptr<IECore::Object> [,bool=True])'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (ObjectPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::TypedObjectPlug<IECore::Object> {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (ObjectPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::TypedObjectPlug<IECore::Object> {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def ObjectVectorPlug (*args):
      '''
__init__(boost::python::api::object, char const* name='ObjectVectorPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, boost::intrusive_ptr<IECore::ObjectVector> defaultValue, unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class ObjectVectorPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ValueType (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (ObjectVectorPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::TypedObjectPlug<IECore::ObjectVector>,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (ObjectVectorPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::TypedObjectPlug<IECore::ObjectVector>,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (ObjectVectorPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::TypedObjectPlug<IECore::ObjectVector>,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (ObjectVectorPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::TypedObjectPlug<IECore::ObjectVector> {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def defaultValue (self, *args, **kwargs):
      '''
defaultValue( (object)arg1 [, (bool)_copy=True]) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::ObjectVector> defaultValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::ObjectVector> > [,bool=True])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getValue (self, *args, **kwargs):
      '''
getValue( (object)arg1 [, (MurmurHash)_precomputedHash=None [, (bool)_copy=True]]) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::Object> getValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::ObjectVector> > [,IECore::MurmurHash const*=None [,bool=True]])'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (ObjectVectorPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedObjectPlug<IECore::ObjectVector> {lvalue},IECore::TypeId)

isInstanceOf( (ObjectVectorPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedObjectPlug<IECore::ObjectVector> {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (ObjectVectorPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::TypedObjectPlug<IECore::ObjectVector> {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def setValue (self, *args, **kwargs):
      '''
setValue( (object)arg1, (object)value [, (bool)_copy=True]) -> None :

    C++ signature :
        void setValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::ObjectVector> >,boost::intrusive_ptr<IECore::ObjectVector> [,bool=True])'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (ObjectVectorPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::TypedObjectPlug<IECore::ObjectVector> {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (ObjectVectorPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::TypedObjectPlug<IECore::ObjectVector> {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def OptionalValuePlug (*args):
      '''
__init__(_object*, IECore::InternedString name='OptionalValuePlug', boost::intrusive_ptr<Gaffer::ValuePlug> valuePlug, bool enabledPlugDefaultValue=False, Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class OptionalValuePlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (OptionalValuePlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::OptionalValuePlug,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (OptionalValuePlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::OptionalValuePlug,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (OptionalValuePlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::OptionalValuePlug,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (OptionalValuePlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::OptionalValuePlug {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (OptionalValuePlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::OptionalValuePlug {lvalue},IECore::TypeId)

isInstanceOf( (OptionalValuePlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::OptionalValuePlug {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (OptionalValuePlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::OptionalValuePlug {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (OptionalValuePlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::OptionalValuePlug {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (OptionalValuePlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::OptionalValuePlug {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def OutputRedirection (*args):
      '''

'''      
    ...

class OutputRedirection:
    def _OutputRedirection__sysLock (self, *args, **kwargs):
      '''None'''
    ...
    def _originalStdErr (self, *args, **kwargs):
      '''Character and line based layer over a BufferedIOBase object, buffer.

encoding gives the name of the encoding that the stream will be
decoded or encoded with. It defaults to locale.getpreferredencoding(False).

errors determines the strictness of encoding and decoding (see
help(codecs.Codec) or the documentation for codecs.register) and
defaults to "strict".

newline controls how line endings are handled. It can be None, '',
'\n', '\r', and '\r\n'.  It works as follows:

* On input, if newline is None, universal newlines mode is
  enabled. Lines in the input can end in '\n', '\r', or '\r\n', and
  these are translated into '\n' before being returned to the
  caller. If it is '', universal newline mode is enabled, but line
  endings are returned to the caller untranslated. If it has any of
  the other legal values, input lines are only terminated by the given
  string, and the line ending is returned to the caller untranslated.

* On output, if newline is None, any '\n' characters written are
  translated to the system default line separator, os.linesep. If
  newline is '' or '\n', no translation takes place. If newline is any
  of the other legal values, any '\n' characters written are translated
  to the given string.

If line_buffering is True, a call to flush is implied when a call to
write contains a newline character.'''
    ...
    def _originalStdOut (self, *args, **kwargs):
      '''Character and line based layer over a BufferedIOBase object, buffer.

encoding gives the name of the encoding that the stream will be
decoded or encoded with. It defaults to locale.getpreferredencoding(False).

errors determines the strictness of encoding and decoding (see
help(codecs.Codec) or the documentation for codecs.register) and
defaults to "strict".

newline controls how line endings are handled. It can be None, '',
'\n', '\r', and '\r\n'.  It works as follows:

* On input, if newline is None, universal newlines mode is
  enabled. Lines in the input can end in '\n', '\r', or '\r\n', and
  these are translated into '\n' before being returned to the
  caller. If it is '', universal newline mode is enabled, but line
  endings are returned to the caller untranslated. If it has any of
  the other legal values, input lines are only terminated by the given
  string, and the line ending is returned to the caller untranslated.

* On output, if newline is None, any '\n' characters written are
  translated to the system default line separator, os.linesep. If
  newline is '' or '\n', no translation takes place. If newline is any
  of the other legal values, any '\n' characters written are translated
  to the given string.

If line_buffering is True, a call to flush is implied when a call to
write contains a newline character.'''
    ...
    def _streams (self, *args, **kwargs):
      '''Thread-local data'''
    ...

def ParallelAlgo (*args):
      '''

'''      
    ...

def Path (*args):
      '''
__init__(_object*, boost::python::list path, IECore::InternedString root='/', boost::intrusive_ptr<Gaffer::PathFilter> filter=None)
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > path, boost::python::api::object root='/', boost::intrusive_ptr<Gaffer::PathFilter> filter=None)
__init__(_object*, boost::python::api::object path=None, boost::python::api::object root='/', boost::intrusive_ptr<Gaffer::PathFilter> filter=None)

'''      
    ...

class Path:
    def PathChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _emitPathChanged (self, *args, **kwargs):
      '''
_emitPathChanged( (Path)arg1) -> None :

    C++ signature :
        void _emitPathChanged(Gaffer::Path {lvalue})'''
    ...
    def _havePathChangedSignal (self, *args, **kwargs):
      '''
_havePathChangedSignal( (Path)arg1) -> bool :

    C++ signature :
        bool _havePathChangedSignal(Gaffer::Path {lvalue})'''
    ...
    def _pathChangedSignalCreated (self, *args, **kwargs):
      '''
_pathChangedSignalCreated( (Path)arg1) -> None :

    C++ signature :
        void _pathChangedSignalCreated((anonymous namespace)::PathWrapper<Gaffer::Path> {lvalue})'''
    ...
    def append (self, *args, **kwargs):
      '''
append( (Path)arg1, (InternedString)arg2) -> Path :

    C++ signature :
        Gaffer::Path {lvalue} append(Gaffer::Path {lvalue},IECore::InternedString)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cancellationSubject (self, *args, **kwargs):
      '''
cancellationSubject( (Path)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> cancellationSubject(Gaffer::Path)'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (Path)arg1 [, (Canceller)canceller=None]) -> list :

    C++ signature :
        boost::python::list children(Gaffer::Path {lvalue} [,IECore::Canceller const*=None])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (Path)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Path> copy(Gaffer::Path)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getFilter (self, *args, **kwargs):
      '''
getFilter( (Path)arg1) -> object :

    C++ signature :
        Gaffer::PathFilter* getFilter(Gaffer::Path {lvalue})'''
    ...
    def info (self, *args, **kwargs):
      '''
info( (object)arg1) -> object :

    C++ signature :
        boost::python::api::object info(boost::python::api::object)'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isEmpty (self, *args, **kwargs):
      '''
isEmpty( (Path)arg1) -> bool :

    C++ signature :
        bool isEmpty(Gaffer::Path {lvalue})'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (Path)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Path {lvalue},IECore::TypeId)

isInstanceOf( (Path)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Path {lvalue},char const*)'''
    ...
    def isLeaf (self, *args, **kwargs):
      '''
isLeaf( (Path)arg1 [, (Canceller)canceller=None]) -> bool :

    C++ signature :
        bool isLeaf(Gaffer::Path [,IECore::Canceller const*=None])'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isValid (self, *args, **kwargs):
      '''
isValid( (Path)arg1 [, (Canceller)canceller=None]) -> bool :

    C++ signature :
        bool isValid(Gaffer::Path [,IECore::Canceller const*=None])'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (Path)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Path> parent(Gaffer::Path {lvalue})'''
    ...
    def pathChangedSignal (self, *args, **kwargs):
      '''
pathChangedSignal( (Path)arg1) -> PathChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Path*), Gaffer::Signals::DefaultCombiner<void> > {lvalue} pathChangedSignal(Gaffer::Path {lvalue})'''
    ...
    def property (self, *args, **kwargs):
      '''
property( (Path)arg1, (InternedString)name [, (Canceller)canceller=None]) -> object :

    C++ signature :
        boost::python::api::object property(Gaffer::Path,IECore::InternedString [,IECore::Canceller const*=None])'''
    ...
    def propertyNames (self, *args, **kwargs):
      '''
propertyNames( (Path)arg1 [, (Canceller)canceller=None]) -> list :

    C++ signature :
        boost::python::list propertyNames(Gaffer::Path [,IECore::Canceller const*=None])'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def root (self, *args, **kwargs):
      '''
root( (Path)arg1) -> str :

    C++ signature :
        char const* root(Gaffer::Path {lvalue})'''
    ...
    def setFilter (self, *args, **kwargs):
      '''
setFilter( (Path)arg1, (object)arg2) -> None :

    C++ signature :
        void setFilter(Gaffer::Path {lvalue},boost::intrusive_ptr<Gaffer::PathFilter>)'''
    ...
    def setFromPath (self, *args, **kwargs):
      '''
setFromPath( (Path)arg1, (Path)arg2) -> None :

    C++ signature :
        void setFromPath(Gaffer::Path {lvalue},Gaffer::Path const*)'''
    ...
    def setFromString (self, *args, **kwargs):
      '''
setFromString( (Path)arg1, (object)arg2) -> Path :

    C++ signature :
        Gaffer::Path {lvalue} setFromString(Gaffer::Path {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def truncateUntilValid (self, *args, **kwargs):
      '''
truncateUntilValid( (Path)arg1) -> Path :

    C++ signature :
        Gaffer::Path {lvalue} truncateUntilValid(Gaffer::Path {lvalue})'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (Path)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::Path {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (Path)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::Path {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...

def PathFilter (*args):
      '''
__init__(_object*, boost::intrusive_ptr<IECore::CompoundData> userData=None)

'''      
    ...

class PathFilter:
    def PathChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def changedSignal (self, *args, **kwargs):
      '''
changedSignal( (PathFilter)arg1) -> PathChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::PathFilter*), Gaffer::Signals::DefaultCombiner<void> > {lvalue} changedSignal(Gaffer::PathFilter {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def filter (self, *args, **kwargs):
      '''
filter( (PathFilter)arg1, (list)paths [, (Canceller)canceller=None]) -> list :

    C++ signature :
        boost::python::list filter(Gaffer::PathFilter {lvalue},boost::python::list [,IECore::Canceller const*=None])'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getEnabled (self, *args, **kwargs):
      '''
getEnabled( (PathFilter)arg1) -> bool :

    C++ signature :
        bool getEnabled(Gaffer::PathFilter {lvalue})'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (PathFilter)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::PathFilter {lvalue},IECore::TypeId)

isInstanceOf( (PathFilter)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::PathFilter {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def setEnabled (self, *args, **kwargs):
      '''
setEnabled( (PathFilter)arg1, (bool)arg2) -> None :

    C++ signature :
        void setEnabled(Gaffer::PathFilter {lvalue},bool)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (PathFilter)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::PathFilter {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (PathFilter)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::PathFilter {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def userData (self, *args, **kwargs):
      '''
userData( (PathFilter)arg1) -> object :

    C++ signature :
        IECore::CompoundData* userData(Gaffer::PathFilter {lvalue})'''
    ...

def PathMatcherDataPlug (*args):
      '''
__init__(boost::python::api::object, char const* name='PathMatcherDataPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, boost::intrusive_ptr<IECore::TypedData<IECore::PathMatcher> > defaultValue, unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class PathMatcherDataPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ValueType (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (PathMatcherDataPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::TypedObjectPlug<IECore::TypedData<IECore::PathMatcher> >,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (PathMatcherDataPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::TypedObjectPlug<IECore::TypedData<IECore::PathMatcher> >,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (PathMatcherDataPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::TypedObjectPlug<IECore::TypedData<IECore::PathMatcher> >,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (PathMatcherDataPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::TypedObjectPlug<IECore::TypedData<IECore::PathMatcher> > {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def defaultValue (self, *args, **kwargs):
      '''
defaultValue( (object)arg1 [, (bool)_copy=True]) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::TypedData<IECore::PathMatcher> > defaultValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::TypedData<IECore::PathMatcher> > > [,bool=True])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getValue (self, *args, **kwargs):
      '''
getValue( (object)arg1 [, (MurmurHash)_precomputedHash=None [, (bool)_copy=True]]) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::Object> getValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::TypedData<IECore::PathMatcher> > > [,IECore::MurmurHash const*=None [,bool=True]])'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (PathMatcherDataPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedObjectPlug<IECore::TypedData<IECore::PathMatcher> > {lvalue},IECore::TypeId)

isInstanceOf( (PathMatcherDataPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedObjectPlug<IECore::TypedData<IECore::PathMatcher> > {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (PathMatcherDataPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::TypedObjectPlug<IECore::TypedData<IECore::PathMatcher> > {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def setValue (self, *args, **kwargs):
      '''
setValue( (object)arg1, (object)value [, (bool)_copy=True]) -> None :

    C++ signature :
        void setValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::TypedData<IECore::PathMatcher> > >,boost::intrusive_ptr<IECore::TypedData<IECore::PathMatcher> > [,bool=True])'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (PathMatcherDataPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::TypedObjectPlug<IECore::TypedData<IECore::PathMatcher> > {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (PathMatcherDataPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::TypedObjectPlug<IECore::TypedData<IECore::PathMatcher> > {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def PerformanceMonitor (*args):
      '''
__init__(_object*)

'''      
    ...

class PerformanceMonitor:
    def Statistics (self, *args, **kwargs):
      '''None'''
    ...
    def _Scope (self, *args, **kwargs):
      '''None'''
    ...
    def allStatistics (self, *args, **kwargs):
      '''
allStatistics( (PerformanceMonitor)arg1) -> dict :

    C++ signature :
        boost::python::dict allStatistics(Gaffer::PerformanceMonitor {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def combinedStatistics (self, *args, **kwargs):
      '''
combinedStatistics( (PerformanceMonitor)arg1) -> Statistics :

    C++ signature :
        Gaffer::PerformanceMonitor::Statistics combinedStatistics(Gaffer::PerformanceMonitor {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def plugStatistics (self, *args, **kwargs):
      '''
plugStatistics( (PerformanceMonitor)arg1, (Plug)arg2) -> Statistics :

    C++ signature :
        Gaffer::PerformanceMonitor::Statistics plugStatistics(Gaffer::PerformanceMonitor {lvalue},Gaffer::Plug const*)'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...

def Plug (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='Plug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class Plug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (Plug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::Plug,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (Plug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::Plug,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (Plug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::Plug,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (Plug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::Plug {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (Plug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Plug {lvalue},IECore::TypeId)

isInstanceOf( (Plug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Plug {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (Plug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::Plug {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (Plug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::Plug {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (Plug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::Plug {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def PlugAlgo (*args):
      '''

'''      
    ...

def Preferences (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='Preferences')

'''      
    ...

class Preferences:
    def BinaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ErrorSignal (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def UnaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (Preferences)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::Preferences,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (Preferences)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::Preferences,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def errorSignal (self, *args, **kwargs):
      '''
errorSignal( (Node)arg1) -> ErrorSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug const*, Gaffer::Plug const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} errorSignal(Gaffer::Node {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (Preferences)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Preferences {lvalue},IECore::TypeId)

isInstanceOf( (Preferences)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Preferences {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plugDirtiedSignal (self, *args, **kwargs):
      '''
plugDirtiedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugDirtiedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugInputChangedSignal (self, *args, **kwargs):
      '''
plugInputChangedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugInputChangedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugSetSignal (self, *args, **kwargs):
      '''
plugSetSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugSetSignal(Gaffer::Node {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def scriptNode (self, *args, **kwargs):
      '''
scriptNode( (Node)arg1) -> object :

    C++ signature :
        Gaffer::ScriptNode* scriptNode(Gaffer::Node {lvalue})'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (Preferences)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::Preferences {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (Preferences)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::Preferences {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def Private (*args):
      '''

'''      
    ...

def ProcessException (*args):
      '''

'''      
    ...

class ProcessException:
    def args (self, *args, **kwargs):
      '''None'''
    ...
    def with_traceback (self, *args, **kwargs):
      '''Exception.with_traceback(tb) --
    set self.__traceback__ to tb and return self.'''
    ...

def ProcessMessageHandler (*args):
      '''
__init__(_object*, boost::intrusive_ptr<IECore::MessageHandler>)

'''      
    ...

class ProcessMessageHandler:
    def Level (self, *args, **kwargs):
      '''None'''
    ...
    def _Scope (self, *args, **kwargs):
      '''None'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def currentHandler (self, *args, **kwargs):
      '''
currentHandler() -> object :

    C++ signature :
        IECore::MessageHandler* currentHandler()'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getDefaultHandler (self, *args, **kwargs):
      '''
getDefaultHandler() -> object :

    C++ signature :
        IECore::MessageHandler* getDefaultHandler()'''
    ...
    def handle (self, *args, **kwargs):
      '''
handle( (MessageHandler)arg1, (Level)arg2, (object)arg3, (object)arg4) -> None :

    C++ signature :
        void handle(IECore::MessageHandler {lvalue},IECore::MessageHandler::Level,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)

handle( (object)arg1, (Level)arg2, (object)arg3, (object)arg4) -> None :

    C++ signature :
        void handle(IECorePython::Detail::GILReleasePtr<(anonymous namespace)::MessageHandlerWrapper> {lvalue},IECore::MessageHandler::Level,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def levelAsString (self, *args, **kwargs):
      '''
levelAsString( (Level)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > levelAsString(IECore::MessageHandler::Level)'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def output (self, *args, **kwargs):
      '''
output( (Level)arg1, (object)arg2, (object)arg3) -> None :

    C++ signature :
        void output(IECore::MessageHandler::Level,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def setDefaultHandler (self, *args, **kwargs):
      '''
setDefaultHandler( (object)arg1) -> None :

    C++ signature :
        void setDefaultHandler(boost::intrusive_ptr<IECore::MessageHandler>)'''
    ...
    def stringAsLevel (self, *args, **kwargs):
      '''
stringAsLevel( (object)arg1) -> Level :

    C++ signature :
        IECore::MessageHandler::Level stringAsLevel(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...

def PythonExpressionEngine (*args):
      '''

'''      
    ...

class PythonExpressionEngine:
    def _PythonExpressionEngine__plug (self, node, plugPath):
      '''None'''
    ...
    def _PythonExpressionEngine__plugRegex (self, node, plug):
      '''None'''
    ...
    def apply (self, proxyOutput, topLevelProxyOutput, value):
      '''None'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def defaultExpression (self, plug):
      '''None'''
    ...
    def execute (self, context, inputs):
      '''None'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def identifier (self, node, plug):
      '''None'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parse (self, node, expression, inPlugs, outPlugs, contextNames):
      '''None'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerEngine (self, *args, **kwargs):
      '''
registerEngine( (object)arg1, (object)arg2) -> None :

    C++ signature :
        void registerEngine(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,boost::python::api::object)'''
    ...
    def registeredEngines (self, *args, **kwargs):
      '''
registeredEngines() -> tuple :

    C++ signature :
        boost::python::tuple registeredEngines()'''
    ...
    def replace (self, node, expression, oldPlugs, newPlugs):
      '''None'''
    ...

def Random (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='Random')

'''      
    ...

class Random:
    def BinaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ErrorSignal (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def UnaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (Random)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::Random,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (Random)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::Random,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def affects (self, *args, **kwargs):
      '''
affects( (Random)arg1, (Plug)arg2) -> list :

    C++ signature :
        boost::python::list affects(Gaffer::Random,Gaffer::Plug const*)'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def correspondingInput (self, *args, **kwargs):
      '''
correspondingInput( (Random)arg1, (Plug)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> correspondingInput(Gaffer::Random {lvalue},Gaffer::Plug const*)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def enabledPlug (self, *args, **kwargs):
      '''
enabledPlug( (Random)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::TypedPlug<bool> > enabledPlug(Gaffer::Random {lvalue})'''
    ...
    def errorSignal (self, *args, **kwargs):
      '''
errorSignal( (Node)arg1) -> ErrorSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug const*, Gaffer::Plug const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} errorSignal(Gaffer::Node {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (Random)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Random {lvalue},IECore::TypeId)

isInstanceOf( (Random)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Random {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plugDirtiedSignal (self, *args, **kwargs):
      '''
plugDirtiedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugDirtiedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugInputChangedSignal (self, *args, **kwargs):
      '''
plugInputChangedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugInputChangedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugSetSignal (self, *args, **kwargs):
      '''
plugSetSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugSetSignal(Gaffer::Node {lvalue})'''
    ...
    def randomColor (self, *args, **kwargs):
      '''
randomColor( (Random)arg1, (int)arg2) -> Color3f :

    C++ signature :
        Imath_3_1::Color3<float> randomColor(Gaffer::Random {lvalue},int)'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def scriptNode (self, *args, **kwargs):
      '''
scriptNode( (Node)arg1) -> object :

    C++ signature :
        Gaffer::ScriptNode* scriptNode(Gaffer::Node {lvalue})'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (Random)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::Random {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (Random)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::Random {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def RandomChoice (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='RandomChoice')

'''      
    ...

class RandomChoice:
    def BinaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ErrorSignal (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def UnaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (RandomChoice)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::RandomChoice,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (RandomChoice)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::RandomChoice,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def affects (self, *args, **kwargs):
      '''
affects( (RandomChoice)arg1, (Plug)arg2) -> list :

    C++ signature :
        boost::python::list affects(Gaffer::RandomChoice,Gaffer::Plug const*)'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def canSetup (self, *args, **kwargs):
      '''
canSetup( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool canSetup(Gaffer::ValuePlug const*)'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def correspondingInput (self, *args, **kwargs):
      '''
correspondingInput( (RandomChoice)arg1, (Plug)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> correspondingInput(Gaffer::RandomChoice {lvalue},Gaffer::Plug const*)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def enabledPlug (self, *args, **kwargs):
      '''
enabledPlug( (RandomChoice)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::TypedPlug<bool> > enabledPlug(Gaffer::RandomChoice {lvalue})'''
    ...
    def errorSignal (self, *args, **kwargs):
      '''
errorSignal( (Node)arg1) -> ErrorSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug const*, Gaffer::Plug const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} errorSignal(Gaffer::Node {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (RandomChoice)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::RandomChoice {lvalue},IECore::TypeId)

isInstanceOf( (RandomChoice)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::RandomChoice {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plugDirtiedSignal (self, *args, **kwargs):
      '''
plugDirtiedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugDirtiedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugInputChangedSignal (self, *args, **kwargs):
      '''
plugInputChangedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugInputChangedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugSetSignal (self, *args, **kwargs):
      '''
plugSetSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugSetSignal(Gaffer::Node {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def scriptNode (self, *args, **kwargs):
      '''
scriptNode( (Node)arg1) -> object :

    C++ signature :
        Gaffer::ScriptNode* scriptNode(Gaffer::Node {lvalue})'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setup (self, *args, **kwargs):
      '''
setup( (RandomChoice)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setup(Gaffer::RandomChoice {lvalue},Gaffer::ValuePlug)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (RandomChoice)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::RandomChoice {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (RandomChoice)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::RandomChoice {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def Reference (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='Reference')

'''      
    ...

class Reference:
    def BinaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ErrorSignal (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def UnaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (Reference)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::Reference,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (Reference)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::Reference,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def affects (self, *args, **kwargs):
      '''
affects( (SubGraph)arg1, (Plug)arg2) -> list :

    C++ signature :
        boost::python::list affects(Gaffer::SubGraph,Gaffer::Plug const*)'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def correspondingInput (self, *args, **kwargs):
      '''
correspondingInput( (SubGraph)arg1, (Plug)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> correspondingInput(Gaffer::SubGraph {lvalue},Gaffer::Plug const*)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def enabledPlug (self, *args, **kwargs):
      '''
enabledPlug( (SubGraph)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::TypedPlug<bool> > enabledPlug(Gaffer::SubGraph {lvalue})'''
    ...
    def errorSignal (self, *args, **kwargs):
      '''
errorSignal( (Node)arg1) -> ErrorSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug const*, Gaffer::Plug const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} errorSignal(Gaffer::Node {lvalue})'''
    ...
    def fileName (self, *args, **kwargs):
      '''
fileName( (Reference)arg1) -> object :

    C++ signature :
        std::filesystem::__cxx11::path fileName(Gaffer::Reference {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def hasMetadataEdit (self, *args, **kwargs):
      '''
hasMetadataEdit( (Reference)arg1, (Plug)arg2, (InternedString)arg3) -> bool :

    C++ signature :
        bool hasMetadataEdit(Gaffer::Reference {lvalue},Gaffer::Plug const*,IECore::InternedString)'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isChildEdit (self, *args, **kwargs):
      '''
isChildEdit( (Reference)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool isChildEdit(Gaffer::Reference {lvalue},Gaffer::Plug const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (Reference)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Reference {lvalue},IECore::TypeId)

isInstanceOf( (Reference)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Reference {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def load (self, *args, **kwargs):
      '''
load( (Reference)arg1, (object)arg2) -> None :

    C++ signature :
        void load(Gaffer::Reference {lvalue},std::filesystem::__cxx11::path)'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plugDirtiedSignal (self, *args, **kwargs):
      '''
plugDirtiedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugDirtiedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugInputChangedSignal (self, *args, **kwargs):
      '''
plugInputChangedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugInputChangedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugSetSignal (self, *args, **kwargs):
      '''
plugSetSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugSetSignal(Gaffer::Node {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def referenceLoadedSignal (self, *args, **kwargs):
      '''
referenceLoadedSignal( (Reference)arg1) -> ReferenceLoadedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Reference*), Gaffer::Signals::DefaultCombiner<void> > {lvalue} referenceLoadedSignal(Gaffer::Reference {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def scriptNode (self, *args, **kwargs):
      '''
scriptNode( (Node)arg1) -> object :

    C++ signature :
        Gaffer::ScriptNode* scriptNode(Gaffer::Node {lvalue})'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (Reference)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::Reference {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (Reference)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::Reference {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def ReferenceLoadedSignal (*args):
      '''
__init__(_object*)

'''      
    ...

class ReferenceLoadedSignal:
    def connect (self, *args, **kwargs):
      '''
connect( (ReferenceLoadedSignal)arg1, (object)slot [, (object)scoped=None]) -> object :

    C++ signature :
        boost::python::api::object connect(Gaffer::Signals::Signal<void (Gaffer::Reference*), Gaffer::Signals::DefaultCombiner<void> > {lvalue},boost::python::api::object {lvalue} [,boost::python::api::object=None])'''
    ...
    def connectFront (self, *args, **kwargs):
      '''
connectFront( (ReferenceLoadedSignal)arg1, (object)slot [, (object)scoped=None]) -> object :

    C++ signature :
        boost::python::api::object connectFront(Gaffer::Signals::Signal<void (Gaffer::Reference*), Gaffer::Signals::DefaultCombiner<void> > {lvalue},boost::python::api::object {lvalue} [,boost::python::api::object=None])'''
    ...
    def disconnectAllSlots (self, *args, **kwargs):
      '''
disconnectAllSlots( (ReferenceLoadedSignal)arg1) -> None :

    C++ signature :
        void disconnectAllSlots(Gaffer::Signals::Signal<void (Gaffer::Reference*), Gaffer::Signals::DefaultCombiner<void> > {lvalue})'''
    ...
    def empty (self, *args, **kwargs):
      '''
empty( (ReferenceLoadedSignal)arg1) -> bool :

    C++ signature :
        bool empty(Gaffer::Signals::Signal<void (Gaffer::Reference*), Gaffer::Signals::DefaultCombiner<void> > {lvalue})'''
    ...
    def numSlots (self, *args, **kwargs):
      '''
numSlots( (ReferenceLoadedSignal)arg1) -> int :

    C++ signature :
        unsigned long numSlots(Gaffer::Signals::Signal<void (Gaffer::Reference*), Gaffer::Signals::DefaultCombiner<void> > {lvalue})'''
    ...

def ScopedConnection (*args):
      '''
__init__(_object*, Gaffer::Signals::Connection)

'''      
    ...

class ScopedConnection:
    def connected (self, *args, **kwargs):
      '''
connected( (Connection)arg1) -> bool :

    C++ signature :
        bool connected(Gaffer::Signals::Connection {lvalue})'''
    ...
    def disconnect (self, *args, **kwargs):
      '''
disconnect( (Connection)arg1) -> None :

    C++ signature :
        void disconnect(Gaffer::Signals::Connection {lvalue})'''
    ...
    def getBlocked (self, *args, **kwargs):
      '''
getBlocked( (Connection)arg1) -> bool :

    C++ signature :
        bool getBlocked(Gaffer::Signals::Connection {lvalue})'''
    ...
    def setBlocked (self, *args, **kwargs):
      '''
setBlocked( (Connection)arg1, (bool)blocked) -> None :

    C++ signature :
        void setBlocked(Gaffer::Signals::Connection {lvalue},bool)'''
    ...

def ScriptContainer (*args):
      '''

'''      
    ...

class ScriptContainer:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (ScriptContainer)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::Container<Gaffer::GraphComponent, Gaffer::ScriptNode>,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (ScriptContainer)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::Container<Gaffer::GraphComponent, Gaffer::ScriptNode>,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (ScriptContainer)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Container<Gaffer::GraphComponent, Gaffer::ScriptNode> {lvalue},IECore::TypeId)

isInstanceOf( (ScriptContainer)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Container<Gaffer::GraphComponent, Gaffer::ScriptNode> {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (ScriptContainer)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::Container<Gaffer::GraphComponent, Gaffer::ScriptNode> {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (ScriptContainer)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::Container<Gaffer::GraphComponent, Gaffer::ScriptNode> {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def ScriptNode (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='ScriptNode')

'''      
    ...

class ScriptNode:
    def ActionSignal (self, *args, **kwargs):
      '''None'''
    ...
    def BinaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ErrorSignal (self, *args, **kwargs):
      '''None'''
    ...
    def FocusChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def UnaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def UndoAddedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (ScriptNode)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::ScriptNode,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (ScriptNode)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::ScriptNode,Gaffer::GraphComponent const*)'''
    ...
    def actionSignal (self, *args, **kwargs):
      '''
actionSignal( (ScriptNode)arg1) -> ActionSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::ScriptNode*, Gaffer::Action const*, Gaffer::Action::Stage), Gaffer::Signals::CatchingCombiner<void> > {lvalue} actionSignal(Gaffer::ScriptNode {lvalue})'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def applicationRoot (self, *args, **kwargs):
      '''
applicationRoot( (ScriptNode)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::ApplicationRoot> applicationRoot(Gaffer::ScriptNode {lvalue})'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def context (self, *args, **kwargs):
      '''
context( (ScriptNode)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Context> context(Gaffer::ScriptNode {lvalue})'''
    ...
    def copy (self, *args, **kwargs):
      '''
copy( (ScriptNode)arg1 [, (Node)parent=None [, (Set)filter=None]]) -> None :

    C++ signature :
        void copy(Gaffer::ScriptNode {lvalue} [,Gaffer::Node const*=None [,Gaffer::Set const*=None]])'''
    ...
    def currentActionStage (self, *args, **kwargs):
      '''
currentActionStage( (ScriptNode)arg1) -> Stage :

    C++ signature :
        Gaffer::Action::Stage currentActionStage(Gaffer::ScriptNode {lvalue})'''
    ...
    def cut (self, *args, **kwargs):
      '''
cut( (ScriptNode)arg1 [, (Node)parent=None [, (Set)filter=None]]) -> None :

    C++ signature :
        void cut(Gaffer::ScriptNode {lvalue} [,Gaffer::Node*=None [,Gaffer::Set const*=None]])'''
    ...
    def deleteNodes (self, *args, **kwargs):
      '''
deleteNodes( (ScriptNode)arg1 [, (Node)parent=None [, (Set)filter=None [, (bool)reconnect=True]]]) -> None :

    C++ signature :
        void deleteNodes(Gaffer::ScriptNode {lvalue} [,Gaffer::Node*=None [,Gaffer::Set const*=None [,bool=True]]])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def errorSignal (self, *args, **kwargs):
      '''
errorSignal( (Node)arg1) -> ErrorSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug const*, Gaffer::Plug const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} errorSignal(Gaffer::Node {lvalue})'''
    ...
    def execute (self, *args, **kwargs):
      '''
execute( (ScriptNode)arg1, (object)arg2 [, (Node)parent=None [, (bool)continueOnError=False]]) -> bool :

    C++ signature :
        bool execute(Gaffer::ScriptNode {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > [,Gaffer::Node*=None [,bool=False]])'''
    ...
    def executeFile (self, *args, **kwargs):
      '''
executeFile( (ScriptNode)arg1, (object)fileName [, (Node)parent=None [, (bool)continueOnError=False]]) -> bool :

    C++ signature :
        bool executeFile(Gaffer::ScriptNode {lvalue},std::filesystem::__cxx11::path [,Gaffer::Node*=None [,bool=False]])'''
    ...
    def focusChangedSignal (self, *args, **kwargs):
      '''
focusChangedSignal( (ScriptNode)arg1) -> FocusChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::ScriptNode*, Gaffer::Node*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} focusChangedSignal(Gaffer::ScriptNode {lvalue})'''
    ...
    def focusSet (self, *args, **kwargs):
      '''
focusSet( (ScriptNode)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Set> focusSet(Gaffer::ScriptNode {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFocus (self, *args, **kwargs):
      '''
getFocus( (ScriptNode)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> getFocus(Gaffer::ScriptNode {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def importFile (self, *args, **kwargs):
      '''
importFile( (ScriptNode)arg1, (object)fileName [, (Node)parent=None [, (bool)continueOnError=False]]) -> bool :

    C++ signature :
        bool importFile(Gaffer::ScriptNode {lvalue},std::filesystem::__cxx11::path [,Gaffer::Node*=None [,bool=False]])'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isExecuting (self, *args, **kwargs):
      '''
isExecuting( (ScriptNode)arg1) -> bool :

    C++ signature :
        bool isExecuting(Gaffer::ScriptNode {lvalue})'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (ScriptNode)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::ScriptNode {lvalue},IECore::TypeId)

isInstanceOf( (ScriptNode)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::ScriptNode {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def load (self, *args, **kwargs):
      '''
load( (ScriptNode)arg1 [, (bool)continueOnError=False]) -> bool :

    C++ signature :
        bool load(Gaffer::ScriptNode {lvalue} [,bool=False])'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def paste (self, *args, **kwargs):
      '''
paste( (ScriptNode)arg1 [, (Node)parent=None [, (bool)continueOnError=False]]) -> None :

    C++ signature :
        void paste(Gaffer::ScriptNode {lvalue} [,Gaffer::Node*=None [,bool=False]])'''
    ...
    def plugDirtiedSignal (self, *args, **kwargs):
      '''
plugDirtiedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugDirtiedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugInputChangedSignal (self, *args, **kwargs):
      '''
plugInputChangedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugInputChangedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugSetSignal (self, *args, **kwargs):
      '''
plugSetSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugSetSignal(Gaffer::Node {lvalue})'''
    ...
    def redo (self, *args, **kwargs):
      '''
redo( (ScriptNode)arg1) -> None :

    C++ signature :
        void redo(Gaffer::ScriptNode {lvalue})'''
    ...
    def redoAvailable (self, *args, **kwargs):
      '''
redoAvailable( (ScriptNode)arg1) -> bool :

    C++ signature :
        bool redoAvailable(Gaffer::ScriptNode {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def save (self, *args, **kwargs):
      '''
save( (ScriptNode)arg1) -> None :

    C++ signature :
        void save(Gaffer::ScriptNode {lvalue})'''
    ...
    def scriptNode (self, *args, **kwargs):
      '''
scriptNode( (Node)arg1) -> object :

    C++ signature :
        Gaffer::ScriptNode* scriptNode(Gaffer::Node {lvalue})'''
    ...
    def selection (self, *args, **kwargs):
      '''
selection( (ScriptNode)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::StandardSet> selection(Gaffer::ScriptNode {lvalue})'''
    ...
    def serialise (self, *args, **kwargs):
      '''
serialise( (ScriptNode)arg1 [, (Node)parent=None [, (Set)filter=None]]) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > serialise(Gaffer::ScriptNode {lvalue} [,Gaffer::Node const*=None [,Gaffer::Set const*=None]])'''
    ...
    def serialiseToFile (self, *args, **kwargs):
      '''
serialiseToFile( (ScriptNode)arg1, (object)fileName [, (Node)parent=None [, (Set)filter=None]]) -> None :

    C++ signature :
        void serialiseToFile(Gaffer::ScriptNode {lvalue},std::filesystem::__cxx11::path [,Gaffer::Node const*=None [,Gaffer::Set const*=None]])'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFocus (self, *args, **kwargs):
      '''
setFocus( (ScriptNode)arg1, (Node)arg2) -> None :

    C++ signature :
        void setFocus(Gaffer::ScriptNode {lvalue},Gaffer::Node*)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (ScriptNode)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::ScriptNode {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (ScriptNode)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::ScriptNode {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def undo (self, *args, **kwargs):
      '''
undo( (ScriptNode)arg1) -> None :

    C++ signature :
        void undo(Gaffer::ScriptNode {lvalue})'''
    ...
    def undoAddedSignal (self, *args, **kwargs):
      '''
undoAddedSignal( (ScriptNode)arg1) -> UndoAddedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::ScriptNode*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} undoAddedSignal(Gaffer::ScriptNode {lvalue})'''
    ...
    def undoAvailable (self, *args, **kwargs):
      '''
undoAvailable( (ScriptNode)arg1) -> bool :

    C++ signature :
        bool undoAvailable(Gaffer::ScriptNode {lvalue})'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def SequencePath (*args):
      '''

'''      
    ...

class SequencePath:
    def PathChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def _SequencePath__basePath (self, path):
      '''None'''
    ...
    def _SequencePath__basePaths (self):
      '''None'''
    ...
    def _SequencePath__isSequence (self):
      '''None'''
    ...
    def _children (self, canceller):
      '''None'''
    ...
    def _emitPathChanged (self, *args, **kwargs):
      '''
_emitPathChanged( (Path)arg1) -> None :

    C++ signature :
        void _emitPathChanged(Gaffer::Path {lvalue})'''
    ...
    def _havePathChangedSignal (self, *args, **kwargs):
      '''
_havePathChangedSignal( (Path)arg1) -> bool :

    C++ signature :
        bool _havePathChangedSignal(Gaffer::Path {lvalue})'''
    ...
    def _pathChangedSignalCreated (self, *args, **kwargs):
      '''
_pathChangedSignalCreated( (Path)arg1) -> None :

    C++ signature :
        void _pathChangedSignalCreated((anonymous namespace)::PathWrapper<Gaffer::Path> {lvalue})'''
    ...
    def append (self, *args, **kwargs):
      '''
append( (Path)arg1, (InternedString)arg2) -> Path :

    C++ signature :
        Gaffer::Path {lvalue} append(Gaffer::Path {lvalue},IECore::InternedString)'''
    ...
    def baseTypeId ():
      '''None'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName ():
      '''None'''
    ...
    def cancellationSubject (self, *args, **kwargs):
      '''
cancellationSubject( (Path)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> cancellationSubject(Gaffer::Path)'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (Path)arg1 [, (Canceller)canceller=None]) -> list :

    C++ signature :
        boost::python::list children(Gaffer::Path {lvalue} [,IECore::Canceller const*=None])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def copy (self):
      '''None'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getFilter (self, *args, **kwargs):
      '''
getFilter( (Path)arg1) -> object :

    C++ signature :
        Gaffer::PathFilter* getFilter(Gaffer::Path {lvalue})'''
    ...
    def info (self, *args, **kwargs):
      '''
info( (object)arg1) -> object :

    C++ signature :
        boost::python::api::object info(boost::python::api::object)'''
    ...
    def inheritsFrom (t):
      '''None'''
    ...
    def isEmpty (self, *args, **kwargs):
      '''
isEmpty( (Path)arg1) -> bool :

    C++ signature :
        bool isEmpty(Gaffer::Path {lvalue})'''
    ...
    def isInstanceOf (self, t):
      '''None'''
    ...
    def isLeaf (self, canceller=None):
      '''None'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isValid (self, canceller=None):
      '''None'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (Path)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Path> parent(Gaffer::Path {lvalue})'''
    ...
    def pathChangedSignal (self, *args, **kwargs):
      '''
pathChangedSignal( (Path)arg1) -> PathChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Path*), Gaffer::Signals::DefaultCombiner<void> > {lvalue} pathChangedSignal(Gaffer::Path {lvalue})'''
    ...
    def property (self, name, canceller=None):
      '''None'''
    ...
    def propertyNames (self, canceller=None):
      '''None'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def root (self, *args, **kwargs):
      '''
root( (Path)arg1) -> str :

    C++ signature :
        char const* root(Gaffer::Path {lvalue})'''
    ...
    def setFilter (self, *args, **kwargs):
      '''
setFilter( (Path)arg1, (object)arg2) -> None :

    C++ signature :
        void setFilter(Gaffer::Path {lvalue},boost::intrusive_ptr<Gaffer::PathFilter>)'''
    ...
    def setFromPath (self, *args, **kwargs):
      '''
setFromPath( (Path)arg1, (Path)arg2) -> None :

    C++ signature :
        void setFromPath(Gaffer::Path {lvalue},Gaffer::Path const*)'''
    ...
    def setFromString (self, *args, **kwargs):
      '''
setFromString( (Path)arg1, (object)arg2) -> Path :

    C++ signature :
        Gaffer::Path {lvalue} setFromString(Gaffer::Path {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def staticTypeId ():
      '''None'''
    ...
    def staticTypeName ():
      '''None'''
    ...
    def truncateUntilValid (self, *args, **kwargs):
      '''
truncateUntilValid( (Path)arg1) -> Path :

    C++ signature :
        Gaffer::Path {lvalue} truncateUntilValid(Gaffer::Path {lvalue})'''
    ...
    def typeId (x):
      '''None'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (x):
      '''None'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...

def Serialisation (*args):
      '''
__init__(_object*, Gaffer::GraphComponent const* parent, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > parentName='parent', Gaffer::Set const* filter=None)

'''      
    ...

class Serialisation:
    def Serialiser (self, *args, **kwargs):
      '''None'''
    ...
    def acquireSerialiser (self, *args, **kwargs):
      '''
acquireSerialiser( (GraphComponent)arg1) -> Serialiser :

    C++ signature :
        GafferBindings::Serialisation::Serialiser const* acquireSerialiser(Gaffer::GraphComponent const*)'''
    ...
    def addModule (self, *args, **kwargs):
      '''
addModule( (Serialisation)arg1, (object)arg2) -> None :

    C++ signature :
        void addModule(GafferBindings::Serialisation {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def childIdentifier (self, *args, **kwargs):
      '''
childIdentifier( (Serialisation)arg1, (object)arg2, (GraphComponent)arg3) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > childIdentifier(GafferBindings::Serialisation,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::GraphComponent const*)'''
    ...
    def classPath (self, *args, **kwargs):
      '''
classPath( (object)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > classPath(boost::python::api::object)'''
    ...
    def identifier (self, *args, **kwargs):
      '''
identifier( (Serialisation)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > identifier(GafferBindings::Serialisation {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def modulePath (self, *args, **kwargs):
      '''
modulePath( (object)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > modulePath(boost::python::api::object)'''
    ...
    def objectFromBase64 (self, *args, **kwargs):
      '''
objectFromBase64( (object)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::Object> objectFromBase64(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def objectToBase64 (self, *args, **kwargs):
      '''
objectToBase64( (Object)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > objectToBase64(IECore::Object const*)'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (Serialisation)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(GafferBindings::Serialisation)'''
    ...
    def registerSerialiser (self, *args, **kwargs):
      '''
registerSerialiser( (TypeId)arg1, (object)arg2) -> None :

    C++ signature :
        void registerSerialiser(IECore::TypeId,boost::intrusive_ptr<GafferBindings::Serialisation::Serialiser>)'''
    ...
    def result (self, *args, **kwargs):
      '''
result( (Serialisation)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > result(GafferBindings::Serialisation {lvalue})'''
    ...

def Set (*args):
      '''

'''      
    ...

class Set:
    def MemberSignal (self, *args, **kwargs):
      '''None'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def contains (self, *args, **kwargs):
      '''
contains( (Set)arg1, (RunTimeTyped)arg2) -> bool :

    C++ signature :
        bool contains(Gaffer::Set {lvalue},IECore::RunTimeTyped const*)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (Set)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Set {lvalue},IECore::TypeId)

isInstanceOf( (Set)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Set {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def memberAddedSignal (self, *args, **kwargs):
      '''
memberAddedSignal( (Set)arg1) -> MemberSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Set*, IECore::RunTimeTyped*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} memberAddedSignal(Gaffer::Set {lvalue})'''
    ...
    def memberRemovedSignal (self, *args, **kwargs):
      '''
memberRemovedSignal( (Set)arg1) -> MemberSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Set*, IECore::RunTimeTyped*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} memberRemovedSignal(Gaffer::Set {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def size (self, *args, **kwargs):
      '''
size( (Set)arg1) -> int :

    C++ signature :
        unsigned long size(Gaffer::Set {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (Set)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::Set {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (Set)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::Set {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...

def ShufflePlug (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > source, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > destination, bool deleteSource=False, bool enabled=True, bool replaceDestination=True)
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='ShufflePlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class ShufflePlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (ShufflePlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::ShufflePlug,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (ShufflePlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::ShufflePlug,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (ShufflePlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::ShufflePlug,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (ShufflePlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::ShufflePlug {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (ShufflePlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::ShufflePlug {lvalue},IECore::TypeId)

isInstanceOf( (ShufflePlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::ShufflePlug {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (ShufflePlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::ShufflePlug {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (ShufflePlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::ShufflePlug {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (ShufflePlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::ShufflePlug {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def ShufflesPlug (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='ShufflesPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class ShufflesPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (ShufflesPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::ShufflesPlug,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (ShufflesPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::ShufflesPlug,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (ShufflesPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::ShufflesPlug,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (ShufflesPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::ShufflesPlug {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (ShufflesPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::ShufflesPlug {lvalue},IECore::TypeId)

isInstanceOf( (ShufflesPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::ShufflesPlug {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (ShufflesPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::ShufflesPlug {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def shuffle (self, *args, **kwargs):
      '''
shuffle( (ShufflesPlug)arg1, (CompoundObject)sourceContainer [, (bool)ignoreMissingSource=True]) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::CompoundObject> shuffle(Gaffer::ShufflesPlug,IECore::CompoundObject {lvalue} [,bool=True])

shuffle( (ShufflesPlug)arg1, (CompoundData)sourceContainer [, (bool)ignoreMissingSource=True]) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::CompoundData> shuffle(Gaffer::ShufflesPlug,IECore::CompoundData {lvalue} [,bool=True])'''
    ...
    def shuffleWithExtraSources (self, *args, **kwargs):
      '''
shuffleWithExtraSources( (ShufflesPlug)arg1, (CompoundObject)sourceContainer, (CompoundObject)extraSources [, (bool)ignoreMissingSource=True]) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::CompoundObject> shuffleWithExtraSources(Gaffer::ShufflesPlug,IECore::CompoundObject {lvalue},IECore::CompoundObject {lvalue} [,bool=True])

shuffleWithExtraSources( (ShufflesPlug)arg1, (CompoundData)sourceContainer, (CompoundData)extraSources [, (bool)ignoreMissingSource=True]) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::CompoundData> shuffleWithExtraSources(Gaffer::ShufflesPlug,IECore::CompoundData {lvalue},IECore::CompoundData {lvalue} [,bool=True])'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (ShufflesPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::ShufflesPlug {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (ShufflesPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::ShufflesPlug {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def Signal0 (*args):
      '''
__init__(boost::python::api::object, boost::python::api::object)
__init__(_object*)

'''      
    ...

class Signal0:
    def connect (self, *args, **kwargs):
      '''
connect( (Signal0)arg1, (object)slot [, (object)scoped=None]) -> object :

    C++ signature :
        boost::python::api::object connect(Gaffer::Signals::Signal<boost::python::api::object (), (anonymous namespace)::PythonResultCombiner> {lvalue},boost::python::api::object {lvalue} [,boost::python::api::object=None])'''
    ...
    def connectFront (self, *args, **kwargs):
      '''
connectFront( (Signal0)arg1, (object)slot [, (object)scoped=None]) -> object :

    C++ signature :
        boost::python::api::object connectFront(Gaffer::Signals::Signal<boost::python::api::object (), (anonymous namespace)::PythonResultCombiner> {lvalue},boost::python::api::object {lvalue} [,boost::python::api::object=None])'''
    ...
    def disconnectAllSlots (self, *args, **kwargs):
      '''
disconnectAllSlots( (Signal0)arg1) -> None :

    C++ signature :
        void disconnectAllSlots(Gaffer::Signals::Signal<boost::python::api::object (), (anonymous namespace)::PythonResultCombiner> {lvalue})'''
    ...
    def empty (self, *args, **kwargs):
      '''
empty( (Signal0)arg1) -> bool :

    C++ signature :
        bool empty(Gaffer::Signals::Signal<boost::python::api::object (), (anonymous namespace)::PythonResultCombiner> {lvalue})'''
    ...
    def numSlots (self, *args, **kwargs):
      '''
numSlots( (Signal0)arg1) -> int :

    C++ signature :
        unsigned long numSlots(Gaffer::Signals::Signal<boost::python::api::object (), (anonymous namespace)::PythonResultCombiner> {lvalue})'''
    ...

def Signal1 (*args):
      '''
__init__(boost::python::api::object, boost::python::api::object)
__init__(_object*)

'''      
    ...

class Signal1:
    def connect (self, *args, **kwargs):
      '''
connect( (Signal1)arg1, (object)slot [, (object)scoped=None]) -> object :

    C++ signature :
        boost::python::api::object connect(Gaffer::Signals::Signal<boost::python::api::object (boost::python::api::object), (anonymous namespace)::PythonResultCombiner> {lvalue},boost::python::api::object {lvalue} [,boost::python::api::object=None])'''
    ...
    def connectFront (self, *args, **kwargs):
      '''
connectFront( (Signal1)arg1, (object)slot [, (object)scoped=None]) -> object :

    C++ signature :
        boost::python::api::object connectFront(Gaffer::Signals::Signal<boost::python::api::object (boost::python::api::object), (anonymous namespace)::PythonResultCombiner> {lvalue},boost::python::api::object {lvalue} [,boost::python::api::object=None])'''
    ...
    def disconnectAllSlots (self, *args, **kwargs):
      '''
disconnectAllSlots( (Signal1)arg1) -> None :

    C++ signature :
        void disconnectAllSlots(Gaffer::Signals::Signal<boost::python::api::object (boost::python::api::object), (anonymous namespace)::PythonResultCombiner> {lvalue})'''
    ...
    def empty (self, *args, **kwargs):
      '''
empty( (Signal1)arg1) -> bool :

    C++ signature :
        bool empty(Gaffer::Signals::Signal<boost::python::api::object (boost::python::api::object), (anonymous namespace)::PythonResultCombiner> {lvalue})'''
    ...
    def numSlots (self, *args, **kwargs):
      '''
numSlots( (Signal1)arg1) -> int :

    C++ signature :
        unsigned long numSlots(Gaffer::Signals::Signal<boost::python::api::object (boost::python::api::object), (anonymous namespace)::PythonResultCombiner> {lvalue})'''
    ...

def Signal2 (*args):
      '''
__init__(boost::python::api::object, boost::python::api::object)
__init__(_object*)

'''      
    ...

class Signal2:
    def connect (self, *args, **kwargs):
      '''
connect( (Signal2)arg1, (object)slot [, (object)scoped=None]) -> object :

    C++ signature :
        boost::python::api::object connect(Gaffer::Signals::Signal<boost::python::api::object (boost::python::api::object, boost::python::api::object), (anonymous namespace)::PythonResultCombiner> {lvalue},boost::python::api::object {lvalue} [,boost::python::api::object=None])'''
    ...
    def connectFront (self, *args, **kwargs):
      '''
connectFront( (Signal2)arg1, (object)slot [, (object)scoped=None]) -> object :

    C++ signature :
        boost::python::api::object connectFront(Gaffer::Signals::Signal<boost::python::api::object (boost::python::api::object, boost::python::api::object), (anonymous namespace)::PythonResultCombiner> {lvalue},boost::python::api::object {lvalue} [,boost::python::api::object=None])'''
    ...
    def disconnectAllSlots (self, *args, **kwargs):
      '''
disconnectAllSlots( (Signal2)arg1) -> None :

    C++ signature :
        void disconnectAllSlots(Gaffer::Signals::Signal<boost::python::api::object (boost::python::api::object, boost::python::api::object), (anonymous namespace)::PythonResultCombiner> {lvalue})'''
    ...
    def empty (self, *args, **kwargs):
      '''
empty( (Signal2)arg1) -> bool :

    C++ signature :
        bool empty(Gaffer::Signals::Signal<boost::python::api::object (boost::python::api::object, boost::python::api::object), (anonymous namespace)::PythonResultCombiner> {lvalue})'''
    ...
    def numSlots (self, *args, **kwargs):
      '''
numSlots( (Signal2)arg1) -> int :

    C++ signature :
        unsigned long numSlots(Gaffer::Signals::Signal<boost::python::api::object (boost::python::api::object, boost::python::api::object), (anonymous namespace)::PythonResultCombiner> {lvalue})'''
    ...

def Signal3 (*args):
      '''
__init__(boost::python::api::object, boost::python::api::object)
__init__(_object*)

'''      
    ...

class Signal3:
    def connect (self, *args, **kwargs):
      '''
connect( (Signal3)arg1, (object)slot [, (object)scoped=None]) -> object :

    C++ signature :
        boost::python::api::object connect(Gaffer::Signals::Signal<boost::python::api::object (boost::python::api::object, boost::python::api::object, boost::python::api::object), (anonymous namespace)::PythonResultCombiner> {lvalue},boost::python::api::object {lvalue} [,boost::python::api::object=None])'''
    ...
    def connectFront (self, *args, **kwargs):
      '''
connectFront( (Signal3)arg1, (object)slot [, (object)scoped=None]) -> object :

    C++ signature :
        boost::python::api::object connectFront(Gaffer::Signals::Signal<boost::python::api::object (boost::python::api::object, boost::python::api::object, boost::python::api::object), (anonymous namespace)::PythonResultCombiner> {lvalue},boost::python::api::object {lvalue} [,boost::python::api::object=None])'''
    ...
    def disconnectAllSlots (self, *args, **kwargs):
      '''
disconnectAllSlots( (Signal3)arg1) -> None :

    C++ signature :
        void disconnectAllSlots(Gaffer::Signals::Signal<boost::python::api::object (boost::python::api::object, boost::python::api::object, boost::python::api::object), (anonymous namespace)::PythonResultCombiner> {lvalue})'''
    ...
    def empty (self, *args, **kwargs):
      '''
empty( (Signal3)arg1) -> bool :

    C++ signature :
        bool empty(Gaffer::Signals::Signal<boost::python::api::object (boost::python::api::object, boost::python::api::object, boost::python::api::object), (anonymous namespace)::PythonResultCombiner> {lvalue})'''
    ...
    def numSlots (self, *args, **kwargs):
      '''
numSlots( (Signal3)arg1) -> int :

    C++ signature :
        unsigned long numSlots(Gaffer::Signals::Signal<boost::python::api::object (boost::python::api::object, boost::python::api::object, boost::python::api::object), (anonymous namespace)::PythonResultCombiner> {lvalue})'''
    ...

def Signals (*args):
      '''

'''      
    ...

def SplineDefinitionInterpolation (*args):
      '''

'''      
    ...

class SplineDefinitionInterpolation:
    def BSpline (self, *args, **kwargs):
      '''None'''
    ...
    def CatmullRom (self, *args, **kwargs):
      '''None'''
    ...
    def Constant (self, *args, **kwargs):
      '''None'''
    ...
    def Linear (self, *args, **kwargs):
      '''None'''
    ...
    def MonotoneCubic (self, *args, **kwargs):
      '''None'''
    ...
    def as_integer_ratio (self, /):
      '''Return integer ratio.

Return a pair of integers, whose ratio is exactly equal to the original int
and with a positive denominator.

>>> (10).as_integer_ratio()
(10, 1)
>>> (-10).as_integer_ratio()
(-10, 1)
>>> (0).as_integer_ratio()
(0, 1)'''
    ...
    def bit_count (self, /):
      '''Number of ones in the binary representation of the absolute value of self.

Also known as the population count.

>>> bin(13)
'0b1101'
>>> (13).bit_count()
3'''
    ...
    def bit_length (self, /):
      '''Number of bits necessary to represent self in binary.

>>> bin(37)
'0b100101'
>>> (37).bit_length()
6'''
    ...
    def conjugate (self, *args, **kwargs):
      '''Returns self, the complex conjugate of any int.'''
    ...
    def denominator (self, *args, **kwargs):
      '''the denominator of a rational number in lowest terms'''
    ...
    def from_bytes (bytes, byteorder, *, signed=False):
      '''Return the integer represented by the given array of bytes.

  bytes
    Holds the array of bytes to convert.  The argument must either
    support the buffer protocol or be an iterable object producing bytes.
    Bytes and bytearray are examples of built-in objects that support the
    buffer protocol.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Indicates whether two's complement is used to represent the integer.'''
    ...
    def imag (self, *args, **kwargs):
      '''the imaginary part of a complex number'''
    ...
    def name (self, *args, **kwargs):
      '''None'''
    ...
    def names (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...
    def numerator (self, *args, **kwargs):
      '''the numerator of a rational number in lowest terms'''
    ...
    def real (self, *args, **kwargs):
      '''the real part of a complex number'''
    ...
    def to_bytes (self, /, length, byteorder, *, signed=False):
      '''Return an array of bytes representing an integer.

  length
    Length of bytes object to use.  An OverflowError is raised if the
    integer is not representable with the given number of bytes.
  byteorder
    The byte order used to represent the integer.  If byteorder is 'big',
    the most significant byte is at the beginning of the byte array.  If
    byteorder is 'little', the most significant byte is at the end of the
    byte array.  To request the native byte order of the host system, use
    `sys.byteorder' as the byte order value.
  signed
    Determines whether two's complement is used to represent the integer.
    If signed is False and a negative integer is given, an OverflowError
    is raised.'''
    ...
    def values (self, *args, **kwargs):
      '''dict() -> new empty dictionary
dict(mapping) -> new dictionary initialized from a mapping object's
    (key, value) pairs
dict(iterable) -> new dictionary initialized as if via:
    d = {}
    for k, v in iterable:
        d[k] = v
dict(**kwargs) -> new dictionary initialized with the name=value pairs
    in the keyword argument list.  For example:  dict(one=1, two=2)'''
    ...

def SplineDefinitionfColor3f (*args):
      '''
__init__(boost::python::api::object, boost::python::api::object, Gaffer::SplineDefinitionInterpolation)
__init__(_object*)

'''      
    ...

class SplineDefinitionfColor3f:
    def interpolation (self, *args, **kwargs):
      '''None'''
    ...
    def points (self, *args, **kwargs):
      '''
points( (SplineDefinitionfColor3f)arg1) -> tuple :
    Read only access to the control points as a tuple of tuples of ( x, y ) pairs.

    C++ signature :
        boost::python::tuple points(Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color3<float> > >)'''
    ...
    def spline (self, *args, **kwargs):
      '''
spline( (SplineDefinitionfColor3f)arg1) -> SplinefColor3f :

    C++ signature :
        IECore::Spline<float, Imath_3_1::Color3<float> > spline(Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color3<float> > > {lvalue})'''
    ...
    def trimEndPoints (self, *args, **kwargs):
      '''
trimEndPoints( (SplineDefinitionfColor3f)arg1) -> bool :

    C++ signature :
        bool trimEndPoints(Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color3<float> > > {lvalue})'''
    ...

def SplineDefinitionfColor4f (*args):
      '''
__init__(boost::python::api::object, boost::python::api::object, Gaffer::SplineDefinitionInterpolation)
__init__(_object*)

'''      
    ...

class SplineDefinitionfColor4f:
    def interpolation (self, *args, **kwargs):
      '''None'''
    ...
    def points (self, *args, **kwargs):
      '''
points( (SplineDefinitionfColor4f)arg1) -> tuple :
    Read only access to the control points as a tuple of tuples of ( x, y ) pairs.

    C++ signature :
        boost::python::tuple points(Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color4<float> > >)'''
    ...
    def spline (self, *args, **kwargs):
      '''
spline( (SplineDefinitionfColor4f)arg1) -> SplinefColor4f :

    C++ signature :
        IECore::Spline<float, Imath_3_1::Color4<float> > spline(Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color4<float> > > {lvalue})'''
    ...
    def trimEndPoints (self, *args, **kwargs):
      '''
trimEndPoints( (SplineDefinitionfColor4f)arg1) -> bool :

    C++ signature :
        bool trimEndPoints(Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color4<float> > > {lvalue})'''
    ...

def SplineDefinitionff (*args):
      '''
__init__(boost::python::api::object, boost::python::api::object, Gaffer::SplineDefinitionInterpolation)
__init__(_object*)

'''      
    ...

class SplineDefinitionff:
    def interpolation (self, *args, **kwargs):
      '''None'''
    ...
    def points (self, *args, **kwargs):
      '''
points( (SplineDefinitionff)arg1) -> tuple :
    Read only access to the control points as a tuple of tuples of ( x, y ) pairs.

    C++ signature :
        boost::python::tuple points(Gaffer::SplineDefinition<IECore::Spline<float, float> >)'''
    ...
    def spline (self, *args, **kwargs):
      '''
spline( (SplineDefinitionff)arg1) -> Splineff :

    C++ signature :
        IECore::Spline<float, float> spline(Gaffer::SplineDefinition<IECore::Spline<float, float> > {lvalue})'''
    ...
    def trimEndPoints (self, *args, **kwargs):
      '''
trimEndPoints( (SplineDefinitionff)arg1) -> bool :

    C++ signature :
        bool trimEndPoints(Gaffer::SplineDefinition<IECore::Spline<float, float> > {lvalue})'''
    ...

def SplinefColor3fPlug (*args):
      '''

'''      
    ...

class SplinefColor3fPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (SplinefColor3fPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color3<float> > > >,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (SplinefColor3fPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color3<float> > > >,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (SplinefColor3fPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color3<float> > > >,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def addPoint (self, *args, **kwargs):
      '''
addPoint( (SplinefColor3fPlug)arg1) -> int :

    C++ signature :
        unsigned int addPoint(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color3<float> > > > {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def clearPoints (self, *args, **kwargs):
      '''
clearPoints( (SplinefColor3fPlug)arg1) -> None :

    C++ signature :
        void clearPoints(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color3<float> > > > {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (SplinefColor3fPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color3<float> > > > {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def defaultValue (self, *args, **kwargs):
      '''
defaultValue( (SplinefColor3fPlug)arg1) -> SplineDefinitionfColor3f :

    C++ signature :
        Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color3<float> > > defaultValue(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color3<float> > > > {lvalue})'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getValue (self, *args, **kwargs):
      '''
getValue( (SplinefColor3fPlug)arg1) -> SplineDefinitionfColor3f :

    C++ signature :
        Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color3<float> > > getValue(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color3<float> > > >)'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (SplinefColor3fPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color3<float> > > > {lvalue},IECore::TypeId)

isInstanceOf( (SplinefColor3fPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color3<float> > > > {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numPoints (self, *args, **kwargs):
      '''
numPoints( (SplinefColor3fPlug)arg1) -> int :

    C++ signature :
        unsigned int numPoints(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color3<float> > > > {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def pointPlug (self, *args, **kwargs):
      '''
pointPlug( (SplinefColor3fPlug)arg1, (int)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::ValuePlug> pointPlug(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color3<float> > > > {lvalue},unsigned long)'''
    ...
    def pointXPlug (self, *args, **kwargs):
      '''
pointXPlug( (SplinefColor3fPlug)arg1, (int)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::NumericPlug<float> > pointXPlug(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color3<float> > > > {lvalue},unsigned long)'''
    ...
    def pointYPlug (self, *args, **kwargs):
      '''
pointYPlug( (SplinefColor3fPlug)arg1, (int)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::CompoundNumericPlug<Imath_3_1::Color3<float> > > pointYPlug(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color3<float> > > > {lvalue},unsigned long)'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def removePoint (self, *args, **kwargs):
      '''
removePoint( (SplinefColor3fPlug)arg1, (int)arg2) -> None :

    C++ signature :
        void removePoint(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color3<float> > > > {lvalue},unsigned int)'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (SplinefColor3fPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color3<float> > > > {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def setValue (self, value):
      '''None'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (SplinefColor3fPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color3<float> > > > {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (SplinefColor3fPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color3<float> > > > {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def SplinefColor4fPlug (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='SplinefColor4fPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color4<float> > > defaultValue=Gaffer.SplineDefinitionfColor4f( (), Gaffer.SplineDefinitionInterpolation( 1 )), unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class SplinefColor4fPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (SplinefColor4fPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color4<float> > > >,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (SplinefColor4fPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color4<float> > > >,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (SplinefColor4fPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color4<float> > > >,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def addPoint (self, *args, **kwargs):
      '''
addPoint( (SplinefColor4fPlug)arg1) -> int :

    C++ signature :
        unsigned int addPoint(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color4<float> > > > {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def clearPoints (self, *args, **kwargs):
      '''
clearPoints( (SplinefColor4fPlug)arg1) -> None :

    C++ signature :
        void clearPoints(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color4<float> > > > {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (SplinefColor4fPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color4<float> > > > {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def defaultValue (self, *args, **kwargs):
      '''
defaultValue( (SplinefColor4fPlug)arg1) -> SplineDefinitionfColor4f :

    C++ signature :
        Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color4<float> > > defaultValue(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color4<float> > > > {lvalue})'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getValue (self, *args, **kwargs):
      '''
getValue( (SplinefColor4fPlug)arg1) -> SplineDefinitionfColor4f :

    C++ signature :
        Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color4<float> > > getValue(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color4<float> > > >)'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (SplinefColor4fPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color4<float> > > > {lvalue},IECore::TypeId)

isInstanceOf( (SplinefColor4fPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color4<float> > > > {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numPoints (self, *args, **kwargs):
      '''
numPoints( (SplinefColor4fPlug)arg1) -> int :

    C++ signature :
        unsigned int numPoints(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color4<float> > > > {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def pointPlug (self, *args, **kwargs):
      '''
pointPlug( (SplinefColor4fPlug)arg1, (int)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::ValuePlug> pointPlug(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color4<float> > > > {lvalue},unsigned long)'''
    ...
    def pointXPlug (self, *args, **kwargs):
      '''
pointXPlug( (SplinefColor4fPlug)arg1, (int)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::NumericPlug<float> > pointXPlug(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color4<float> > > > {lvalue},unsigned long)'''
    ...
    def pointYPlug (self, *args, **kwargs):
      '''
pointYPlug( (SplinefColor4fPlug)arg1, (int)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::CompoundNumericPlug<Imath_3_1::Color4<float> > > pointYPlug(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color4<float> > > > {lvalue},unsigned long)'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def removePoint (self, *args, **kwargs):
      '''
removePoint( (SplinefColor4fPlug)arg1, (int)arg2) -> None :

    C++ signature :
        void removePoint(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color4<float> > > > {lvalue},unsigned int)'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (SplinefColor4fPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color4<float> > > > {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def setValue (self, *args, **kwargs):
      '''
setValue( (SplinefColor4fPlug)arg1, (SplineDefinitionfColor4f)arg2) -> None :

    C++ signature :
        void setValue(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color4<float> > > > {lvalue},Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color4<float> > >)'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (SplinefColor4fPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color4<float> > > > {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (SplinefColor4fPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, Imath_3_1::Color4<float> > > > {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def SplineffPlug (*args):
      '''

'''      
    ...

class SplineffPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (SplineffPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, float> > >,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (SplineffPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, float> > >,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (SplineffPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, float> > >,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def addPoint (self, *args, **kwargs):
      '''
addPoint( (SplineffPlug)arg1) -> int :

    C++ signature :
        unsigned int addPoint(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, float> > > {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def clearPoints (self, *args, **kwargs):
      '''
clearPoints( (SplineffPlug)arg1) -> None :

    C++ signature :
        void clearPoints(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, float> > > {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (SplineffPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, float> > > {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def defaultValue (self, *args, **kwargs):
      '''
defaultValue( (SplineffPlug)arg1) -> SplineDefinitionff :

    C++ signature :
        Gaffer::SplineDefinition<IECore::Spline<float, float> > defaultValue(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, float> > > {lvalue})'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getValue (self, *args, **kwargs):
      '''
getValue( (SplineffPlug)arg1) -> SplineDefinitionff :

    C++ signature :
        Gaffer::SplineDefinition<IECore::Spline<float, float> > getValue(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, float> > >)'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (SplineffPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, float> > > {lvalue},IECore::TypeId)

isInstanceOf( (SplineffPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, float> > > {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numPoints (self, *args, **kwargs):
      '''
numPoints( (SplineffPlug)arg1) -> int :

    C++ signature :
        unsigned int numPoints(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, float> > > {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def pointPlug (self, *args, **kwargs):
      '''
pointPlug( (SplineffPlug)arg1, (int)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::ValuePlug> pointPlug(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, float> > > {lvalue},unsigned long)'''
    ...
    def pointXPlug (self, *args, **kwargs):
      '''
pointXPlug( (SplineffPlug)arg1, (int)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::NumericPlug<float> > pointXPlug(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, float> > > {lvalue},unsigned long)'''
    ...
    def pointYPlug (self, *args, **kwargs):
      '''
pointYPlug( (SplineffPlug)arg1, (int)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::NumericPlug<float> > pointYPlug(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, float> > > {lvalue},unsigned long)'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def removePoint (self, *args, **kwargs):
      '''
removePoint( (SplineffPlug)arg1, (int)arg2) -> None :

    C++ signature :
        void removePoint(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, float> > > {lvalue},unsigned int)'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (SplineffPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, float> > > {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def setValue (self, value):
      '''None'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (SplineffPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, float> > > {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (SplineffPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::SplinePlug<Gaffer::SplineDefinition<IECore::Spline<float, float> > > {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def Spreadsheet (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='Spreadsheet')

'''      
    ...

class Spreadsheet:
    def BinaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CellPlug (self, *args, **kwargs):
      '''None'''
    ...
    def ErrorSignal (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def RowPlug (self, *args, **kwargs):
      '''None'''
    ...
    def RowsPlug (self, *args, **kwargs):
      '''None'''
    ...
    def UnaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (Spreadsheet)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::Spreadsheet,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (Spreadsheet)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::Spreadsheet,Gaffer::GraphComponent const*)'''
    ...
    def activeInPlug (self, *args, **kwargs):
      '''
activeInPlug( (Spreadsheet)arg1, (ValuePlug)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::ValuePlug> activeInPlug(Gaffer::Spreadsheet {lvalue},Gaffer::ValuePlug)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def affects (self, *args, **kwargs):
      '''
affects( (Spreadsheet)arg1, (Plug)arg2) -> list :

    C++ signature :
        boost::python::list affects(Gaffer::Spreadsheet,Gaffer::Plug const*)'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def correspondingInput (self, *args, **kwargs):
      '''
correspondingInput( (Spreadsheet)arg1, (Plug)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> correspondingInput(Gaffer::Spreadsheet {lvalue},Gaffer::Plug const*)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def enabledPlug (self, *args, **kwargs):
      '''
enabledPlug( (Spreadsheet)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::TypedPlug<bool> > enabledPlug(Gaffer::Spreadsheet {lvalue})'''
    ...
    def errorSignal (self, *args, **kwargs):
      '''
errorSignal( (Node)arg1) -> ErrorSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug const*, Gaffer::Plug const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} errorSignal(Gaffer::Node {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (Spreadsheet)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Spreadsheet {lvalue},IECore::TypeId)

isInstanceOf( (Spreadsheet)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Spreadsheet {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plugDirtiedSignal (self, *args, **kwargs):
      '''
plugDirtiedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugDirtiedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugInputChangedSignal (self, *args, **kwargs):
      '''
plugInputChangedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugInputChangedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugSetSignal (self, *args, **kwargs):
      '''
plugSetSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugSetSignal(Gaffer::Node {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def scriptNode (self, *args, **kwargs):
      '''
scriptNode( (Node)arg1) -> object :

    C++ signature :
        Gaffer::ScriptNode* scriptNode(Gaffer::Node {lvalue})'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (Spreadsheet)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::Spreadsheet {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (Spreadsheet)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::Spreadsheet {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def StandardSet (*args):
      '''
__init__(boost::python::api::object, boost::python::api::object members, bool removeOrphans=False)
__init__(_object*, bool removeOrphans=False)

'''      
    ...

class StandardSet:
    def MemberAcceptanceSignal (self, *args, **kwargs):
      '''None'''
    ...
    def MemberSignal (self, *args, **kwargs):
      '''None'''
    ...
    def add (self, *args, **kwargs):
      '''
add( (StandardSet)arg1, (object)arg2) -> int :

    C++ signature :
        unsigned long add(Gaffer::StandardSet {lvalue},boost::python::api::object)

add( (StandardSet)arg1, (object)arg2) -> bool :

    C++ signature :
        bool add(Gaffer::StandardSet {lvalue},boost::intrusive_ptr<IECore::RunTimeTyped>)

add( (StandardSet)arg1, (Set)arg2) -> int :

    C++ signature :
        unsigned long add(Gaffer::StandardSet {lvalue},Gaffer::Set const*)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def clear (self, *args, **kwargs):
      '''
clear( (StandardSet)arg1) -> None :

    C++ signature :
        void clear(Gaffer::StandardSet {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def contains (self, *args, **kwargs):
      '''
contains( (Set)arg1, (RunTimeTyped)arg2) -> bool :

    C++ signature :
        bool contains(Gaffer::Set {lvalue},IECore::RunTimeTyped const*)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getRemoveOrphans (self, *args, **kwargs):
      '''
getRemoveOrphans( (StandardSet)arg1) -> bool :

    C++ signature :
        bool getRemoveOrphans(Gaffer::StandardSet {lvalue})'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (StandardSet)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::StandardSet {lvalue},IECore::TypeId)

isInstanceOf( (StandardSet)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::StandardSet {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def memberAcceptanceSignal (self, *args, **kwargs):
      '''
memberAcceptanceSignal( (StandardSet)arg1) -> MemberAcceptanceSignal :

    C++ signature :
        Gaffer::Signals::Signal<bool (Gaffer::StandardSet const*, IECore::RunTimeTyped const*), Gaffer::Detail::MemberAcceptanceCombiner> {lvalue} memberAcceptanceSignal(Gaffer::StandardSet {lvalue})'''
    ...
    def memberAddedSignal (self, *args, **kwargs):
      '''
memberAddedSignal( (Set)arg1) -> MemberSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Set*, IECore::RunTimeTyped*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} memberAddedSignal(Gaffer::Set {lvalue})'''
    ...
    def memberRemovedSignal (self, *args, **kwargs):
      '''
memberRemovedSignal( (Set)arg1) -> MemberSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Set*, IECore::RunTimeTyped*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} memberRemovedSignal(Gaffer::Set {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def remove (self, *args, **kwargs):
      '''
remove( (StandardSet)arg1, (object)arg2) -> int :

    C++ signature :
        unsigned long remove(Gaffer::StandardSet {lvalue},boost::python::api::object)

remove( (StandardSet)arg1, (RunTimeTyped)arg2) -> bool :

    C++ signature :
        bool remove(Gaffer::StandardSet {lvalue},IECore::RunTimeTyped*)

remove( (StandardSet)arg1, (Set)arg2) -> int :

    C++ signature :
        unsigned long remove(Gaffer::StandardSet {lvalue},Gaffer::Set const*)'''
    ...
    def setRemoveOrphans (self, *args, **kwargs):
      '''
setRemoveOrphans( (StandardSet)arg1, (bool)arg2) -> None :

    C++ signature :
        void setRemoveOrphans(Gaffer::StandardSet {lvalue},bool)'''
    ...
    def size (self, *args, **kwargs):
      '''
size( (Set)arg1) -> int :

    C++ signature :
        unsigned long size(Gaffer::Set {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (StandardSet)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::StandardSet {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (StandardSet)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::StandardSet {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...

def StringPlug (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='StringPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > defaultValue='', unsigned int flags=Gaffer._Gaffer.Flags.Default, unsigned int substitutions=IECore.StringAlgo.Substitutions.AllSubstitutions)

'''      
    ...

class StringPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ValueType (self, *args, **kwargs):
      '''str(object='') -> str
str(bytes_or_buffer[, encoding[, errors]]) -> str

Create a new string object from the given object. If encoding or
errors is specified, then the object must expose a data buffer
that will be decoded using the given encoding and error handler.
Otherwise, returns the result of object.__str__() (if defined)
or repr(object).
encoding defaults to sys.getdefaultencoding().
errors defaults to 'strict'.'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (StringPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::StringPlug,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (StringPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::StringPlug,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (StringPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::StringPlug,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (StringPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::StringPlug {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def defaultValue (self, *args, **kwargs):
      '''
defaultValue( (StringPlug)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > defaultValue(Gaffer::StringPlug {lvalue})'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getValue (self, *args, **kwargs):
      '''
getValue( (StringPlug)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > getValue(Gaffer::StringPlug const*)'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (StringPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::StringPlug {lvalue},IECore::TypeId)

isInstanceOf( (StringPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::StringPlug {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (StringPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::StringPlug {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def setValue (self, *args, **kwargs):
      '''
setValue( (StringPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setValue(Gaffer::StringPlug*,std::filesystem::__cxx11::path)

setValue( (StringPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setValue(Gaffer::StringPlug*,std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def substitutions (self, *args, **kwargs):
      '''
substitutions( (StringPlug)arg1) -> int :

    C++ signature :
        unsigned int substitutions(Gaffer::StringPlug {lvalue})'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (StringPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::StringPlug {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (StringPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::StringPlug {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def StringVectorDataPlug (*args):
      '''
__init__(boost::python::api::object, char const* name='StringVectorDataPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, boost::intrusive_ptr<IECore::TypedData<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > defaultValue, unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class StringVectorDataPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ValueType (self, *args, **kwargs):
      '''string-type vector class derived from Data class.
This class behaves like the native python lists, except that it only accepts string values.
The copy constructor accepts another instance of this class or a python list containing string
or any other python built-in type that is convertible into it.
It accepts slicing, negative indexing and special functions like extend, insert, etc.
'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (StringVectorDataPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (StringVectorDataPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (StringVectorDataPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (StringVectorDataPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def defaultValue (self, *args, **kwargs):
      '''
defaultValue( (object)arg1 [, (bool)_copy=True]) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::TypedData<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > defaultValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > > [,bool=True])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getValue (self, *args, **kwargs):
      '''
getValue( (object)arg1 [, (MurmurHash)_precomputedHash=None [, (bool)_copy=True]]) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::Object> getValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > > [,IECore::MurmurHash const*=None [,bool=True]])'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (StringVectorDataPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > {lvalue},IECore::TypeId)

isInstanceOf( (StringVectorDataPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (StringVectorDataPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def setValue (self, *args, **kwargs):
      '''
setValue( (object)arg1, (object)value [, (bool)_copy=True]) -> None :

    C++ signature :
        void setValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >,boost::intrusive_ptr<IECore::TypedData<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > [,bool=True])'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (StringVectorDataPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (StringVectorDataPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::TypedObjectPlug<IECore::TypedData<std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def SubGraph (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='SubGraph')

'''      
    ...

class SubGraph:
    def BinaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ErrorSignal (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def UnaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (SubGraph)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::SubGraph,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (SubGraph)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::SubGraph,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def affects (self, *args, **kwargs):
      '''
affects( (SubGraph)arg1, (Plug)arg2) -> list :

    C++ signature :
        boost::python::list affects(Gaffer::SubGraph,Gaffer::Plug const*)'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def correspondingInput (self, *args, **kwargs):
      '''
correspondingInput( (SubGraph)arg1, (Plug)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> correspondingInput(Gaffer::SubGraph {lvalue},Gaffer::Plug const*)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def enabledPlug (self, *args, **kwargs):
      '''
enabledPlug( (SubGraph)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::TypedPlug<bool> > enabledPlug(Gaffer::SubGraph {lvalue})'''
    ...
    def errorSignal (self, *args, **kwargs):
      '''
errorSignal( (Node)arg1) -> ErrorSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug const*, Gaffer::Plug const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} errorSignal(Gaffer::Node {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (SubGraph)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::SubGraph {lvalue},IECore::TypeId)

isInstanceOf( (SubGraph)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::SubGraph {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plugDirtiedSignal (self, *args, **kwargs):
      '''
plugDirtiedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugDirtiedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugInputChangedSignal (self, *args, **kwargs):
      '''
plugInputChangedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugInputChangedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugSetSignal (self, *args, **kwargs):
      '''
plugSetSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugSetSignal(Gaffer::Node {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def scriptNode (self, *args, **kwargs):
      '''
scriptNode( (Node)arg1) -> object :

    C++ signature :
        Gaffer::ScriptNode* scriptNode(Gaffer::Node {lvalue})'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (SubGraph)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::SubGraph {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (SubGraph)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::SubGraph {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def Switch (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='Switch')

'''      
    ...

class Switch:
    def BinaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ErrorSignal (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def UnaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (Switch)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::Switch,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (Switch)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::Switch,Gaffer::GraphComponent const*)'''
    ...
    def activeInPlug (self, *args, **kwargs):
      '''
activeInPlug( (Switch)arg1 [, (Plug)plug=None]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> activeInPlug(Gaffer::Switch {lvalue} [,Gaffer::Plug const*=None])'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def affects (self, *args, **kwargs):
      '''
affects( (Switch)arg1, (Plug)arg2) -> list :

    C++ signature :
        boost::python::list affects(Gaffer::Switch,Gaffer::Plug const*)'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def correspondingInput (self, *args, **kwargs):
      '''
correspondingInput( (Switch)arg1, (Plug)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> correspondingInput(Gaffer::Switch {lvalue},Gaffer::Plug const*)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def enabledPlug (self, *args, **kwargs):
      '''
enabledPlug( (Switch)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::TypedPlug<bool> > enabledPlug(Gaffer::Switch {lvalue})'''
    ...
    def errorSignal (self, *args, **kwargs):
      '''
errorSignal( (Node)arg1) -> ErrorSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug const*, Gaffer::Plug const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} errorSignal(Gaffer::Node {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (Switch)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Switch {lvalue},IECore::TypeId)

isInstanceOf( (Switch)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Switch {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plugDirtiedSignal (self, *args, **kwargs):
      '''
plugDirtiedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugDirtiedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugInputChangedSignal (self, *args, **kwargs):
      '''
plugInputChangedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugInputChangedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugSetSignal (self, *args, **kwargs):
      '''
plugSetSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugSetSignal(Gaffer::Node {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def scriptNode (self, *args, **kwargs):
      '''
scriptNode( (Node)arg1) -> object :

    C++ signature :
        Gaffer::ScriptNode* scriptNode(Gaffer::Node {lvalue})'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setup (self, *args, **kwargs):
      '''
setup( (Switch)arg1, (Plug)arg2) -> None :

    C++ signature :
        void setup(Gaffer::Switch {lvalue},Gaffer::Plug)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (Switch)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::Switch {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (Switch)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::Switch {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def SwitchComputeNode (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='Switch')

'''      
    ...

class SwitchComputeNode:
    def BinaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ErrorSignal (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def UnaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (Switch)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::Switch,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (Switch)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::Switch,Gaffer::GraphComponent const*)'''
    ...
    def activeInPlug (self, *args, **kwargs):
      '''
activeInPlug( (Switch)arg1 [, (Plug)plug=None]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> activeInPlug(Gaffer::Switch {lvalue} [,Gaffer::Plug const*=None])'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def affects (self, *args, **kwargs):
      '''
affects( (Switch)arg1, (Plug)arg2) -> list :

    C++ signature :
        boost::python::list affects(Gaffer::Switch,Gaffer::Plug const*)'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def correspondingInput (self, *args, **kwargs):
      '''
correspondingInput( (Switch)arg1, (Plug)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> correspondingInput(Gaffer::Switch {lvalue},Gaffer::Plug const*)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def enabledPlug (self, *args, **kwargs):
      '''
enabledPlug( (Switch)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::TypedPlug<bool> > enabledPlug(Gaffer::Switch {lvalue})'''
    ...
    def errorSignal (self, *args, **kwargs):
      '''
errorSignal( (Node)arg1) -> ErrorSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug const*, Gaffer::Plug const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} errorSignal(Gaffer::Node {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (Switch)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Switch {lvalue},IECore::TypeId)

isInstanceOf( (Switch)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Switch {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plugDirtiedSignal (self, *args, **kwargs):
      '''
plugDirtiedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugDirtiedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugInputChangedSignal (self, *args, **kwargs):
      '''
plugInputChangedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugInputChangedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugSetSignal (self, *args, **kwargs):
      '''
plugSetSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugSetSignal(Gaffer::Node {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def scriptNode (self, *args, **kwargs):
      '''
scriptNode( (Node)arg1) -> object :

    C++ signature :
        Gaffer::ScriptNode* scriptNode(Gaffer::Node {lvalue})'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setup (self, *args, **kwargs):
      '''
setup( (Switch)arg1, (Plug)arg2) -> None :

    C++ signature :
        void setup(Gaffer::Switch {lvalue},Gaffer::Plug)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (Switch)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::Switch {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (Switch)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::Switch {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def ThreadMonitor (*args):
      '''
__init__(boost::python::api::object, boost::python::api::object processMask=('computeNode:compute',))

'''      
    ...

class ThreadMonitor:
    def _Scope (self, *args, **kwargs):
      '''None'''
    ...
    def allStatistics (self, *args, **kwargs):
      '''
allStatistics( (ThreadMonitor)arg1) -> dict :

    C++ signature :
        boost::python::dict allStatistics(Gaffer::ThreadMonitor)'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def combinedStatistics (self, *args, **kwargs):
      '''
combinedStatistics( (ThreadMonitor)arg1) -> dict :

    C++ signature :
        boost::python::dict combinedStatistics(Gaffer::ThreadMonitor)'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def plugStatistics (self, *args, **kwargs):
      '''
plugStatistics( (ThreadMonitor)arg1, (Plug)arg2) -> dict :

    C++ signature :
        boost::python::dict plugStatistics(Gaffer::ThreadMonitor,Gaffer::Plug)'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def thisThreadId (self, *args, **kwargs):
      '''
thisThreadId() -> int :

    C++ signature :
        int thisThreadId()'''
    ...

def TimeWarp (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='TimeWarp')

'''      
    ...

class TimeWarp:
    def BinaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ErrorSignal (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def UnaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (TimeWarp)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::TimeWarp,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (TimeWarp)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::TimeWarp,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def affects (self, *args, **kwargs):
      '''
affects( (TimeWarp)arg1, (Plug)arg2) -> list :

    C++ signature :
        boost::python::list affects(Gaffer::TimeWarp,Gaffer::Plug const*)'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def correspondingInput (self, *args, **kwargs):
      '''
correspondingInput( (TimeWarp)arg1, (Plug)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> correspondingInput(Gaffer::TimeWarp {lvalue},Gaffer::Plug const*)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def enabledPlug (self, *args, **kwargs):
      '''
enabledPlug( (TimeWarp)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::TypedPlug<bool> > enabledPlug(Gaffer::TimeWarp {lvalue})'''
    ...
    def errorSignal (self, *args, **kwargs):
      '''
errorSignal( (Node)arg1) -> ErrorSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug const*, Gaffer::Plug const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} errorSignal(Gaffer::Node {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def inPlugContext (self, *args, **kwargs):
      '''
inPlugContext( (ContextProcessor)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Context> inPlugContext(Gaffer::ContextProcessor)'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (TimeWarp)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TimeWarp {lvalue},IECore::TypeId)

isInstanceOf( (TimeWarp)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TimeWarp {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plugDirtiedSignal (self, *args, **kwargs):
      '''
plugDirtiedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugDirtiedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugInputChangedSignal (self, *args, **kwargs):
      '''
plugInputChangedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugInputChangedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugSetSignal (self, *args, **kwargs):
      '''
plugSetSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugSetSignal(Gaffer::Node {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def scriptNode (self, *args, **kwargs):
      '''
scriptNode( (Node)arg1) -> object :

    C++ signature :
        Gaffer::ScriptNode* scriptNode(Gaffer::Node {lvalue})'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setup (self, *args, **kwargs):
      '''
setup( (ContextProcessor)arg1, (Plug)arg2) -> None :

    C++ signature :
        void setup(Gaffer::ContextProcessor {lvalue},Gaffer::Plug)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (TimeWarp)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::TimeWarp {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (TimeWarp)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::TimeWarp {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def TimeWarpComputeNode (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='TimeWarp')

'''      
    ...

class TimeWarpComputeNode:
    def BinaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ErrorSignal (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveRange (parent):
      '''None'''
    ...
    def UnaryPlugSignal (self, *args, **kwargs):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (TimeWarp)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::TimeWarp,Gaffer::GraphComponent const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (TimeWarp)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::TimeWarp,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def affects (self, *args, **kwargs):
      '''
affects( (TimeWarp)arg1, (Plug)arg2) -> list :

    C++ signature :
        boost::python::list affects(Gaffer::TimeWarp,Gaffer::Plug const*)'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def correspondingInput (self, *args, **kwargs):
      '''
correspondingInput( (TimeWarp)arg1, (Plug)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> correspondingInput(Gaffer::TimeWarp {lvalue},Gaffer::Plug const*)'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def enabledPlug (self, *args, **kwargs):
      '''
enabledPlug( (TimeWarp)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::TypedPlug<bool> > enabledPlug(Gaffer::TimeWarp {lvalue})'''
    ...
    def errorSignal (self, *args, **kwargs):
      '''
errorSignal( (Node)arg1) -> ErrorSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug const*, Gaffer::Plug const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} errorSignal(Gaffer::Node {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def inPlugContext (self, *args, **kwargs):
      '''
inPlugContext( (ContextProcessor)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Context> inPlugContext(Gaffer::ContextProcessor)'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (TimeWarp)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TimeWarp {lvalue},IECore::TypeId)

isInstanceOf( (TimeWarp)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TimeWarp {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def plugDirtiedSignal (self, *args, **kwargs):
      '''
plugDirtiedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugDirtiedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugInputChangedSignal (self, *args, **kwargs):
      '''
plugInputChangedSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugInputChangedSignal(Gaffer::Node {lvalue})'''
    ...
    def plugSetSignal (self, *args, **kwargs):
      '''
plugSetSignal( (Node)arg1) -> UnaryPlugSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::Plug*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} plugSetSignal(Gaffer::Node {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def scriptNode (self, *args, **kwargs):
      '''
scriptNode( (Node)arg1) -> object :

    C++ signature :
        Gaffer::ScriptNode* scriptNode(Gaffer::Node {lvalue})'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setup (self, *args, **kwargs):
      '''
setup( (ContextProcessor)arg1, (Plug)arg2) -> None :

    C++ signature :
        void setup(Gaffer::ContextProcessor {lvalue},Gaffer::Plug)'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (TimeWarp)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::TimeWarp {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (TimeWarp)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::TimeWarp {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def Trackable (*args):
      '''
__init__(_object*)

'''      
    ...

class Trackable:
    def _disconnectTrackedConnections (self, *args, **kwargs):
      '''
_disconnectTrackedConnections( (Trackable)arg1) -> None :

    C++ signature :
        void _disconnectTrackedConnections(Gaffer::Signals::Trackable {lvalue})'''
    ...

def Transform2DPlug (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='Transform2DPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, Imath_3_1::Vec2<float> defaultTranslate=V2f(0, 0), float defaultRotate=0.0, Imath_3_1::Vec2<float> defaultScale=V2f(1, 1), Imath_3_1::Vec2<float> defaultPivot=V2f(0, 0), unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class Transform2DPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (Transform2DPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::Transform2DPlug,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (Transform2DPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::Transform2DPlug,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (Transform2DPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::Transform2DPlug,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (Transform2DPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::Transform2DPlug {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (Transform2DPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Transform2DPlug {lvalue},IECore::TypeId)

isInstanceOf( (Transform2DPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::Transform2DPlug {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def matrix (self, *args, **kwargs):
      '''
matrix( (Transform2DPlug)arg1) -> M33f :

    C++ signature :
        Imath_3_1::Matrix33<float> matrix(Gaffer::Transform2DPlug {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def repr (self, *args, **kwargs):
      '''
repr( (Transform2DPlug)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > repr(Gaffer::Transform2DPlug const*)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (Transform2DPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::Transform2DPlug {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (Transform2DPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::Transform2DPlug {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (Transform2DPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::Transform2DPlug {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def TransformPlug (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='TransformPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, Imath_3_1::Vec3<float> defaultTranslate=V3f(0, 0, 0), Imath_3_1::Vec3<float> defaultRotate=V3f(0, 0, 0), Imath_3_1::Vec3<float> defaultScale=V3f(1, 1, 1), Imath_3_1::Vec3<float> defaultPivot=V3f(0, 0, 0), unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class TransformPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (TransformPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::TransformPlug,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (TransformPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::TransformPlug,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (TransformPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::TransformPlug,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (TransformPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::TransformPlug {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (TransformPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TransformPlug {lvalue},IECore::TypeId)

isInstanceOf( (TransformPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TransformPlug {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def matrix (self, *args, **kwargs):
      '''
matrix( (TransformPlug)arg1) -> M44f :

    C++ signature :
        Imath_3_1::Matrix44<float> matrix(Gaffer::TransformPlug {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def repr (self, *args, **kwargs):
      '''
repr( (TransformPlug)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > repr(Gaffer::TransformPlug const*)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (TransformPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::TransformPlug {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (TransformPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::TransformPlug {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (TransformPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::TransformPlug {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def TweakPlug (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > tweakName, boost::intrusive_ptr<Gaffer::ValuePlug> value, Gaffer::TweakPlug::Mode mode=Gaffer._Gaffer.Mode.Replace, bool enabled=True)
__init__(boost::python::api::object, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > tweakName, boost::intrusive_ptr<IECore::Data const> valuePlug, Gaffer::TweakPlug::Mode mode=Gaffer._Gaffer.Mode.Replace, bool enabled=True)
__init__(_object*, Gaffer::ValuePlug* valuePlug, char const* name='TweakPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class TweakPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def MissingMode (self, *args, **kwargs):
      '''None'''
    ...
    def Mode (self, *args, **kwargs):
      '''None'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (TweakPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::TweakPlug,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (TweakPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::TweakPlug,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (TweakPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::TweakPlug,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, child):
      '''None'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def applyTweak (self, *args, **kwargs):
      '''
applyTweak( (TweakPlug)arg1, (CompoundData)parameters [, (MissingMode)missingMode=Gaffer._Gaffer.MissingMode.Error]) -> bool :

    C++ signature :
        bool applyTweak(Gaffer::TweakPlug,IECore::CompoundData {lvalue} [,Gaffer::TweakPlug::MissingMode=Gaffer._Gaffer.MissingMode.Error])'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (TweakPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::TweakPlug {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (TweakPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TweakPlug {lvalue},IECore::TypeId)

isInstanceOf( (TweakPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TweakPlug {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (TweakPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::TweakPlug {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (TweakPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::TweakPlug {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (TweakPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::TweakPlug {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def TweaksPlug (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='TweaksPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class TweaksPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (TweaksPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::TweaksPlug,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (TweaksPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::TweaksPlug,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (TweaksPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::TweaksPlug,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def applyTweaks (self, *args, **kwargs):
      '''
applyTweaks( (TweaksPlug)arg1, (CompoundData)parameters [, (MissingMode)missingMode=Gaffer._Gaffer.MissingMode.Error]) -> bool :

    C++ signature :
        bool applyTweaks(Gaffer::TweaksPlug,IECore::CompoundData {lvalue} [,Gaffer::TweakPlug::MissingMode=Gaffer._Gaffer.MissingMode.Error])'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (TweaksPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::TweaksPlug {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (TweaksPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TweaksPlug {lvalue},IECore::TypeId)

isInstanceOf( (TweaksPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TweaksPlug {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (TweaksPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::TweaksPlug {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (TweaksPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::TweaksPlug {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (TweaksPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::TweaksPlug {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def UndoScope (*args):
      '''

'''      
    ...

class UndoScope:
    def State (self, *args, **kwargs):
      '''None'''
    ...

def V2fPlug (*args):
      '''
__init__(_object*, char const* name='V2fPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, Imath_3_1::Vec2<float> defaultValue=V2f(0, 0), Imath_3_1::Vec2<float> minValue=V2f(-3.40282347e+38, -3.40282347e+38), Imath_3_1::Vec2<float> maxValue=V2f(3.40282347e+38, 3.40282347e+38), unsigned int flags=Gaffer._Gaffer.Flags.Default, IECore::GeometricData::Interpretation interpretation=IECore._IECore.Interpretation.Numeric)

'''      
    ...

class V2fPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ValueType (self, *args, **kwargs):
      '''V2f'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (V2fPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<float> >,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (V2fPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<float> >,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (V2fPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<float> >,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def canGang (self, *args, **kwargs):
      '''
canGang( (V2fPlug)arg1) -> bool :

    C++ signature :
        bool canGang(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<float> > {lvalue})'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (V2fPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<float> > {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def defaultValue (self, *args, **kwargs):
      '''
defaultValue( (V2fPlug)arg1) -> V2f :

    C++ signature :
        Imath_3_1::Vec2<float> defaultValue(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<float> > {lvalue})'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def gang (self, *args, **kwargs):
      '''
gang( (V2fPlug)arg1) -> None :

    C++ signature :
        void gang(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<float> >*)'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getValue (self, *args, **kwargs):
      '''
getValue( (V2fPlug)arg1) -> V2f :

    C++ signature :
        Imath_3_1::Vec2<float> getValue(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<float> > const*)'''
    ...
    def hasMaxValue (self, *args, **kwargs):
      '''
hasMaxValue( (V2fPlug)arg1) -> bool :

    C++ signature :
        bool hasMaxValue(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<float> > {lvalue})'''
    ...
    def hasMinValue (self, *args, **kwargs):
      '''
hasMinValue( (V2fPlug)arg1) -> bool :

    C++ signature :
        bool hasMinValue(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<float> > {lvalue})'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def interpretation (self, *args, **kwargs):
      '''
interpretation( (V2fPlug)arg1) -> Interpretation :

    C++ signature :
        IECore::GeometricData::Interpretation interpretation(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<float> > {lvalue})'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isGanged (self, *args, **kwargs):
      '''
isGanged( (V2fPlug)arg1) -> bool :

    C++ signature :
        bool isGanged(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<float> > {lvalue})'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (V2fPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<float> > {lvalue},IECore::TypeId)

isInstanceOf( (V2fPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<float> > {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def maxValue (self, *args, **kwargs):
      '''
maxValue( (V2fPlug)arg1) -> V2f :

    C++ signature :
        Imath_3_1::Vec2<float> maxValue(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<float> > {lvalue})'''
    ...
    def minValue (self, *args, **kwargs):
      '''
minValue( (V2fPlug)arg1) -> V2f :

    C++ signature :
        Imath_3_1::Vec2<float> minValue(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<float> > {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (V2fPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<float> > {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def setValue (self, *args, **kwargs):
      '''
setValue( (V2fPlug)arg1, (V2f)arg2) -> None :

    C++ signature :
        void setValue(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<float> >*,Imath_3_1::Vec2<float>)'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (V2fPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<float> > {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (V2fPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<float> > {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def ungang (self, *args, **kwargs):
      '''
ungang( (V2fPlug)arg1) -> None :

    C++ signature :
        void ungang(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<float> >*)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def V2fVectorDataPlug (*args):
      '''
__init__(boost::python::api::object, char const* name='V2fVectorDataPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, boost::intrusive_ptr<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec2<float>, std::allocator<Imath_3_1::Vec2<float> > > > > defaultValue, unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class V2fVectorDataPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ValueType (self, *args, **kwargs):
      '''V2f-type vector class derived from Data class.
This class behaves like the native python lists, except that it only accepts V2f values.
The copy constructor accepts another instance of this class or a python list containing V2f
or any other python built-in type that is convertible into it.
It accepts slicing, negative indexing and special functions like extend, insert, etc.
'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (V2fVectorDataPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec2<float>, std::allocator<Imath_3_1::Vec2<float> > > > >,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (V2fVectorDataPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec2<float>, std::allocator<Imath_3_1::Vec2<float> > > > >,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (V2fVectorDataPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec2<float>, std::allocator<Imath_3_1::Vec2<float> > > > >,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (V2fVectorDataPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec2<float>, std::allocator<Imath_3_1::Vec2<float> > > > > {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def defaultValue (self, *args, **kwargs):
      '''
defaultValue( (object)arg1 [, (bool)_copy=True]) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec2<float>, std::allocator<Imath_3_1::Vec2<float> > > > > defaultValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec2<float>, std::allocator<Imath_3_1::Vec2<float> > > > > > [,bool=True])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getValue (self, *args, **kwargs):
      '''
getValue( (object)arg1 [, (MurmurHash)_precomputedHash=None [, (bool)_copy=True]]) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::Object> getValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec2<float>, std::allocator<Imath_3_1::Vec2<float> > > > > > [,IECore::MurmurHash const*=None [,bool=True]])'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (V2fVectorDataPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec2<float>, std::allocator<Imath_3_1::Vec2<float> > > > > {lvalue},IECore::TypeId)

isInstanceOf( (V2fVectorDataPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec2<float>, std::allocator<Imath_3_1::Vec2<float> > > > > {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (V2fVectorDataPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec2<float>, std::allocator<Imath_3_1::Vec2<float> > > > > {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def setValue (self, *args, **kwargs):
      '''
setValue( (object)arg1, (object)value [, (bool)_copy=True]) -> None :

    C++ signature :
        void setValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec2<float>, std::allocator<Imath_3_1::Vec2<float> > > > > >,boost::intrusive_ptr<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec2<float>, std::allocator<Imath_3_1::Vec2<float> > > > > [,bool=True])'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (V2fVectorDataPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec2<float>, std::allocator<Imath_3_1::Vec2<float> > > > > {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (V2fVectorDataPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec2<float>, std::allocator<Imath_3_1::Vec2<float> > > > > {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def V2iPlug (*args):
      '''
__init__(_object*, char const* name='V2iPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, Imath_3_1::Vec2<int> defaultValue=V2i(0, 0), Imath_3_1::Vec2<int> minValue=V2i(-2147483648, -2147483648), Imath_3_1::Vec2<int> maxValue=V2i(2147483647, 2147483647), unsigned int flags=Gaffer._Gaffer.Flags.Default, IECore::GeometricData::Interpretation interpretation=IECore._IECore.Interpretation.Numeric)

'''      
    ...

class V2iPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ValueType (self, *args, **kwargs):
      '''V2i'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (V2iPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<int> >,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (V2iPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<int> >,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (V2iPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<int> >,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def canGang (self, *args, **kwargs):
      '''
canGang( (V2iPlug)arg1) -> bool :

    C++ signature :
        bool canGang(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<int> > {lvalue})'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (V2iPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<int> > {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def defaultValue (self, *args, **kwargs):
      '''
defaultValue( (V2iPlug)arg1) -> V2i :

    C++ signature :
        Imath_3_1::Vec2<int> defaultValue(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<int> > {lvalue})'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def gang (self, *args, **kwargs):
      '''
gang( (V2iPlug)arg1) -> None :

    C++ signature :
        void gang(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<int> >*)'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getValue (self, *args, **kwargs):
      '''
getValue( (V2iPlug)arg1) -> V2i :

    C++ signature :
        Imath_3_1::Vec2<int> getValue(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<int> > const*)'''
    ...
    def hasMaxValue (self, *args, **kwargs):
      '''
hasMaxValue( (V2iPlug)arg1) -> bool :

    C++ signature :
        bool hasMaxValue(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<int> > {lvalue})'''
    ...
    def hasMinValue (self, *args, **kwargs):
      '''
hasMinValue( (V2iPlug)arg1) -> bool :

    C++ signature :
        bool hasMinValue(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<int> > {lvalue})'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def interpretation (self, *args, **kwargs):
      '''
interpretation( (V2iPlug)arg1) -> Interpretation :

    C++ signature :
        IECore::GeometricData::Interpretation interpretation(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<int> > {lvalue})'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isGanged (self, *args, **kwargs):
      '''
isGanged( (V2iPlug)arg1) -> bool :

    C++ signature :
        bool isGanged(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<int> > {lvalue})'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (V2iPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<int> > {lvalue},IECore::TypeId)

isInstanceOf( (V2iPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<int> > {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def maxValue (self, *args, **kwargs):
      '''
maxValue( (V2iPlug)arg1) -> V2i :

    C++ signature :
        Imath_3_1::Vec2<int> maxValue(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<int> > {lvalue})'''
    ...
    def minValue (self, *args, **kwargs):
      '''
minValue( (V2iPlug)arg1) -> V2i :

    C++ signature :
        Imath_3_1::Vec2<int> minValue(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<int> > {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (V2iPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<int> > {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def setValue (self, *args, **kwargs):
      '''
setValue( (V2iPlug)arg1, (V2i)arg2) -> None :

    C++ signature :
        void setValue(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<int> >*,Imath_3_1::Vec2<int>)'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (V2iPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<int> > {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (V2iPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<int> > {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def ungang (self, *args, **kwargs):
      '''
ungang( (V2iPlug)arg1) -> None :

    C++ signature :
        void ungang(Gaffer::CompoundNumericPlug<Imath_3_1::Vec2<int> >*)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def V2iVectorDataPlug (*args):
      '''
__init__(boost::python::api::object, char const* name='V2iVectorDataPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, boost::intrusive_ptr<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec2<int>, std::allocator<Imath_3_1::Vec2<int> > > > > defaultValue, unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class V2iVectorDataPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ValueType (self, *args, **kwargs):
      '''V2i-type vector class derived from Data class.
This class behaves like the native python lists, except that it only accepts V2i values.
The copy constructor accepts another instance of this class or a python list containing V2i
or any other python built-in type that is convertible into it.
It accepts slicing, negative indexing and special functions like extend, insert, etc.
'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (V2iVectorDataPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec2<int>, std::allocator<Imath_3_1::Vec2<int> > > > >,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (V2iVectorDataPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec2<int>, std::allocator<Imath_3_1::Vec2<int> > > > >,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (V2iVectorDataPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec2<int>, std::allocator<Imath_3_1::Vec2<int> > > > >,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (V2iVectorDataPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec2<int>, std::allocator<Imath_3_1::Vec2<int> > > > > {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def defaultValue (self, *args, **kwargs):
      '''
defaultValue( (object)arg1 [, (bool)_copy=True]) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec2<int>, std::allocator<Imath_3_1::Vec2<int> > > > > defaultValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec2<int>, std::allocator<Imath_3_1::Vec2<int> > > > > > [,bool=True])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getValue (self, *args, **kwargs):
      '''
getValue( (object)arg1 [, (MurmurHash)_precomputedHash=None [, (bool)_copy=True]]) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::Object> getValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec2<int>, std::allocator<Imath_3_1::Vec2<int> > > > > > [,IECore::MurmurHash const*=None [,bool=True]])'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (V2iVectorDataPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec2<int>, std::allocator<Imath_3_1::Vec2<int> > > > > {lvalue},IECore::TypeId)

isInstanceOf( (V2iVectorDataPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec2<int>, std::allocator<Imath_3_1::Vec2<int> > > > > {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (V2iVectorDataPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec2<int>, std::allocator<Imath_3_1::Vec2<int> > > > > {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def setValue (self, *args, **kwargs):
      '''
setValue( (object)arg1, (object)value [, (bool)_copy=True]) -> None :

    C++ signature :
        void setValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec2<int>, std::allocator<Imath_3_1::Vec2<int> > > > > >,boost::intrusive_ptr<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec2<int>, std::allocator<Imath_3_1::Vec2<int> > > > > [,bool=True])'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (V2iVectorDataPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec2<int>, std::allocator<Imath_3_1::Vec2<int> > > > > {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (V2iVectorDataPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec2<int>, std::allocator<Imath_3_1::Vec2<int> > > > > {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def V3fPlug (*args):
      '''
__init__(_object*, char const* name='V3fPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, Imath_3_1::Vec3<float> defaultValue=V3f(0, 0, 0), Imath_3_1::Vec3<float> minValue=V3f(-3.40282347e+38, -3.40282347e+38, -3.40282347e+38), Imath_3_1::Vec3<float> maxValue=V3f(3.40282347e+38, 3.40282347e+38, 3.40282347e+38), unsigned int flags=Gaffer._Gaffer.Flags.Default, IECore::GeometricData::Interpretation interpretation=IECore._IECore.Interpretation.Numeric)

'''      
    ...

class V3fPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ValueType (self, *args, **kwargs):
      '''V3f'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (V3fPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<float> >,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (V3fPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<float> >,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (V3fPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<float> >,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def canGang (self, *args, **kwargs):
      '''
canGang( (V3fPlug)arg1) -> bool :

    C++ signature :
        bool canGang(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<float> > {lvalue})'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (V3fPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<float> > {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def defaultValue (self, *args, **kwargs):
      '''
defaultValue( (V3fPlug)arg1) -> V3f :

    C++ signature :
        Imath_3_1::Vec3<float> defaultValue(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<float> > {lvalue})'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def gang (self, *args, **kwargs):
      '''
gang( (V3fPlug)arg1) -> None :

    C++ signature :
        void gang(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<float> >*)'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getValue (self, *args, **kwargs):
      '''
getValue( (V3fPlug)arg1) -> V3f :

    C++ signature :
        Imath_3_1::Vec3<float> getValue(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<float> > const*)'''
    ...
    def hasMaxValue (self, *args, **kwargs):
      '''
hasMaxValue( (V3fPlug)arg1) -> bool :

    C++ signature :
        bool hasMaxValue(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<float> > {lvalue})'''
    ...
    def hasMinValue (self, *args, **kwargs):
      '''
hasMinValue( (V3fPlug)arg1) -> bool :

    C++ signature :
        bool hasMinValue(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<float> > {lvalue})'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def interpretation (self, *args, **kwargs):
      '''
interpretation( (V3fPlug)arg1) -> Interpretation :

    C++ signature :
        IECore::GeometricData::Interpretation interpretation(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<float> > {lvalue})'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isGanged (self, *args, **kwargs):
      '''
isGanged( (V3fPlug)arg1) -> bool :

    C++ signature :
        bool isGanged(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<float> > {lvalue})'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (V3fPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<float> > {lvalue},IECore::TypeId)

isInstanceOf( (V3fPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<float> > {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def maxValue (self, *args, **kwargs):
      '''
maxValue( (V3fPlug)arg1) -> V3f :

    C++ signature :
        Imath_3_1::Vec3<float> maxValue(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<float> > {lvalue})'''
    ...
    def minValue (self, *args, **kwargs):
      '''
minValue( (V3fPlug)arg1) -> V3f :

    C++ signature :
        Imath_3_1::Vec3<float> minValue(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<float> > {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (V3fPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<float> > {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def setValue (self, *args, **kwargs):
      '''
setValue( (V3fPlug)arg1, (V3f)arg2) -> None :

    C++ signature :
        void setValue(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<float> >*,Imath_3_1::Vec3<float>)'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (V3fPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<float> > {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (V3fPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<float> > {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def ungang (self, *args, **kwargs):
      '''
ungang( (V3fPlug)arg1) -> None :

    C++ signature :
        void ungang(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<float> >*)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def V3fVectorDataPlug (*args):
      '''
__init__(boost::python::api::object, char const* name='V3fVectorDataPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, boost::intrusive_ptr<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec3<float>, std::allocator<Imath_3_1::Vec3<float> > > > > defaultValue, unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class V3fVectorDataPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ValueType (self, *args, **kwargs):
      '''V3f-type vector class derived from Data class.
This class behaves like the native python lists, except that it only accepts V3f values.
The copy constructor accepts another instance of this class or a python list containing V3f
or any other python built-in type that is convertible into it.
It accepts slicing, negative indexing and special functions like extend, insert, etc.
'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (V3fVectorDataPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec3<float>, std::allocator<Imath_3_1::Vec3<float> > > > >,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (V3fVectorDataPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec3<float>, std::allocator<Imath_3_1::Vec3<float> > > > >,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (V3fVectorDataPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec3<float>, std::allocator<Imath_3_1::Vec3<float> > > > >,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (V3fVectorDataPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec3<float>, std::allocator<Imath_3_1::Vec3<float> > > > > {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def defaultValue (self, *args, **kwargs):
      '''
defaultValue( (object)arg1 [, (bool)_copy=True]) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec3<float>, std::allocator<Imath_3_1::Vec3<float> > > > > defaultValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec3<float>, std::allocator<Imath_3_1::Vec3<float> > > > > > [,bool=True])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getValue (self, *args, **kwargs):
      '''
getValue( (object)arg1 [, (MurmurHash)_precomputedHash=None [, (bool)_copy=True]]) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::Object> getValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec3<float>, std::allocator<Imath_3_1::Vec3<float> > > > > > [,IECore::MurmurHash const*=None [,bool=True]])'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (V3fVectorDataPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec3<float>, std::allocator<Imath_3_1::Vec3<float> > > > > {lvalue},IECore::TypeId)

isInstanceOf( (V3fVectorDataPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec3<float>, std::allocator<Imath_3_1::Vec3<float> > > > > {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (V3fVectorDataPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec3<float>, std::allocator<Imath_3_1::Vec3<float> > > > > {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def setValue (self, *args, **kwargs):
      '''
setValue( (object)arg1, (object)value [, (bool)_copy=True]) -> None :

    C++ signature :
        void setValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec3<float>, std::allocator<Imath_3_1::Vec3<float> > > > > >,boost::intrusive_ptr<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec3<float>, std::allocator<Imath_3_1::Vec3<float> > > > > [,bool=True])'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (V3fVectorDataPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec3<float>, std::allocator<Imath_3_1::Vec3<float> > > > > {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (V3fVectorDataPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec3<float>, std::allocator<Imath_3_1::Vec3<float> > > > > {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def V3iPlug (*args):
      '''
__init__(_object*, char const* name='V3iPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, Imath_3_1::Vec3<int> defaultValue=V3i(0, 0, 0), Imath_3_1::Vec3<int> minValue=V3i(-2147483648, -2147483648, -2147483648), Imath_3_1::Vec3<int> maxValue=V3i(2147483647, 2147483647, 2147483647), unsigned int flags=Gaffer._Gaffer.Flags.Default, IECore::GeometricData::Interpretation interpretation=IECore._IECore.Interpretation.Numeric)

'''      
    ...

class V3iPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ValueType (self, *args, **kwargs):
      '''V3i'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (V3iPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<int> >,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (V3iPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<int> >,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (V3iPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<int> >,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def canGang (self, *args, **kwargs):
      '''
canGang( (V3iPlug)arg1) -> bool :

    C++ signature :
        bool canGang(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<int> > {lvalue})'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (V3iPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<int> > {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def defaultValue (self, *args, **kwargs):
      '''
defaultValue( (V3iPlug)arg1) -> V3i :

    C++ signature :
        Imath_3_1::Vec3<int> defaultValue(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<int> > {lvalue})'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def gang (self, *args, **kwargs):
      '''
gang( (V3iPlug)arg1) -> None :

    C++ signature :
        void gang(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<int> >*)'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getValue (self, *args, **kwargs):
      '''
getValue( (V3iPlug)arg1) -> V3i :

    C++ signature :
        Imath_3_1::Vec3<int> getValue(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<int> > const*)'''
    ...
    def hasMaxValue (self, *args, **kwargs):
      '''
hasMaxValue( (V3iPlug)arg1) -> bool :

    C++ signature :
        bool hasMaxValue(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<int> > {lvalue})'''
    ...
    def hasMinValue (self, *args, **kwargs):
      '''
hasMinValue( (V3iPlug)arg1) -> bool :

    C++ signature :
        bool hasMinValue(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<int> > {lvalue})'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def interpretation (self, *args, **kwargs):
      '''
interpretation( (V3iPlug)arg1) -> Interpretation :

    C++ signature :
        IECore::GeometricData::Interpretation interpretation(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<int> > {lvalue})'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isGanged (self, *args, **kwargs):
      '''
isGanged( (V3iPlug)arg1) -> bool :

    C++ signature :
        bool isGanged(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<int> > {lvalue})'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (V3iPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<int> > {lvalue},IECore::TypeId)

isInstanceOf( (V3iPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<int> > {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def maxValue (self, *args, **kwargs):
      '''
maxValue( (V3iPlug)arg1) -> V3i :

    C++ signature :
        Imath_3_1::Vec3<int> maxValue(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<int> > {lvalue})'''
    ...
    def minValue (self, *args, **kwargs):
      '''
minValue( (V3iPlug)arg1) -> V3i :

    C++ signature :
        Imath_3_1::Vec3<int> minValue(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<int> > {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (V3iPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<int> > {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def setValue (self, *args, **kwargs):
      '''
setValue( (V3iPlug)arg1, (V3i)arg2) -> None :

    C++ signature :
        void setValue(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<int> >*,Imath_3_1::Vec3<int>)'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (V3iPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<int> > {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (V3iPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<int> > {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def ungang (self, *args, **kwargs):
      '''
ungang( (V3iPlug)arg1) -> None :

    C++ signature :
        void ungang(Gaffer::CompoundNumericPlug<Imath_3_1::Vec3<int> >*)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def V3iVectorDataPlug (*args):
      '''
__init__(boost::python::api::object, char const* name='V3iVectorDataPlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, boost::intrusive_ptr<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec3<int>, std::allocator<Imath_3_1::Vec3<int> > > > > defaultValue, unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class V3iVectorDataPlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def ValueType (self, *args, **kwargs):
      '''V3i-type vector class derived from Data class.
This class behaves like the native python lists, except that it only accepts V3i values.
The copy constructor accepts another instance of this class or a python list containing V3i
or any other python built-in type that is convertible into it.
It accepts slicing, negative indexing and special functions like extend, insert, etc.
'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (V3iVectorDataPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec3<int>, std::allocator<Imath_3_1::Vec3<int> > > > >,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (V3iVectorDataPlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec3<int>, std::allocator<Imath_3_1::Vec3<int> > > > >,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (V3iVectorDataPlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec3<int>, std::allocator<Imath_3_1::Vec3<int> > > > >,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (V3iVectorDataPlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec3<int>, std::allocator<Imath_3_1::Vec3<int> > > > > {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def defaultValue (self, *args, **kwargs):
      '''
defaultValue( (object)arg1 [, (bool)_copy=True]) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec3<int>, std::allocator<Imath_3_1::Vec3<int> > > > > defaultValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec3<int>, std::allocator<Imath_3_1::Vec3<int> > > > > > [,bool=True])'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def getValue (self, *args, **kwargs):
      '''
getValue( (object)arg1 [, (MurmurHash)_precomputedHash=None [, (bool)_copy=True]]) -> object :

    C++ signature :
        boost::intrusive_ptr<IECore::Object> getValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec3<int>, std::allocator<Imath_3_1::Vec3<int> > > > > > [,IECore::MurmurHash const*=None [,bool=True]])'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (V3iVectorDataPlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec3<int>, std::allocator<Imath_3_1::Vec3<int> > > > > {lvalue},IECore::TypeId)

isInstanceOf( (V3iVectorDataPlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec3<int>, std::allocator<Imath_3_1::Vec3<int> > > > > {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (V3iVectorDataPlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec3<int>, std::allocator<Imath_3_1::Vec3<int> > > > > {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def setValue (self, *args, **kwargs):
      '''
setValue( (object)arg1, (object)value [, (bool)_copy=True]) -> None :

    C++ signature :
        void setValue(boost::intrusive_ptr<Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec3<int>, std::allocator<Imath_3_1::Vec3<int> > > > > >,boost::intrusive_ptr<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec3<int>, std::allocator<Imath_3_1::Vec3<int> > > > > [,bool=True])'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (V3iVectorDataPlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec3<int>, std::allocator<Imath_3_1::Vec3<int> > > > > {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (V3iVectorDataPlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::TypedObjectPlug<IECore::GeometricTypedData<std::vector<Imath_3_1::Vec3<int>, std::allocator<Imath_3_1::Vec3<int> > > > > {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def ValuePlug (*args):
      '''
__init__(_object*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > name='ValuePlug', Gaffer::Plug::Direction direction=Gaffer._Gaffer.Direction.In, unsigned int flags=Gaffer._Gaffer.Flags.Default)

'''      
    ...

class ValuePlug:
    def BinarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def CachePolicy (self, *args, **kwargs):
      '''None'''
    ...
    def Direction (self, *args, **kwargs):
      '''None'''
    ...
    def Flags (self, *args, **kwargs):
      '''None'''
    ...
    def HashCacheMode (self, *args, **kwargs):
      '''None'''
    ...
    def InputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def NameChangedSignal (self, *args, **kwargs):
      '''None'''
    ...
    def OutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def Range (parent):
      '''None'''
    ...
    def RecursiveInputRange (parent, *, direction=Gaffer._Gaffer.Direction.In):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveOutputRange (parent, *, direction=Gaffer._Gaffer.Direction.Out):
      '''partial(func, *args, **keywords) - new function with partial application
    of the given arguments and keywords.
'''
    ...
    def RecursiveRange (parent, direction=None):
      '''None'''
    ...
    def UnarySignal (self, *args, **kwargs):
      '''None'''
    ...
    def acceptsChild (self, *args, **kwargs):
      '''
acceptsChild( (ValuePlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsChild(Gaffer::ValuePlug,Gaffer::GraphComponent const*)'''
    ...
    def acceptsInput (self, *args, **kwargs):
      '''
acceptsInput( (ValuePlug)arg1, (Plug)arg2) -> bool :

    C++ signature :
        bool acceptsInput(Gaffer::ValuePlug,Gaffer::Plug const*)'''
    ...
    def acceptsParent (self, *args, **kwargs):
      '''
acceptsParent( (ValuePlug)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool acceptsParent(Gaffer::ValuePlug,Gaffer::GraphComponent const*)'''
    ...
    def addChild (self, *args, **kwargs):
      '''
addChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void addChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def ancestor (self, *args, **kwargs):
      '''
ancestor( (GraphComponent)arg1, (TypeId)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> ancestor(Gaffer::GraphComponent {lvalue},IECore::TypeId)'''
    ...
    def baseTypeId (self, *args, **kwargs):
      '''
baseTypeId([  (TypeId)arg1]) -> TypeId :

    C++ signature :
        IECore::TypeId baseTypeId([ IECore::TypeId])'''
    ...
    def baseTypeIds (self, *args, **kwargs):
      '''
baseTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list baseTypeIds(IECore::TypeId)'''
    ...
    def baseTypeName (self, *args, **kwargs):
      '''
baseTypeName() -> str :

    C++ signature :
        char const* baseTypeName()'''
    ...
    def cacheMemoryUsage (self, *args, **kwargs):
      '''
cacheMemoryUsage() -> int :

    C++ signature :
        unsigned long cacheMemoryUsage()'''
    ...
    def childAddedSignal (self, *args, **kwargs):
      '''
childAddedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childAddedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def childRemovedSignal (self, *args, **kwargs):
      '''
childRemovedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childRemovedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def children (self, *args, **kwargs):
      '''
children( (GraphComponent)self [, (TypeId)typeId=IECore._IECore.TypeId(110000)]) -> tuple :

    C++ signature :
        boost::python::tuple children(Gaffer::GraphComponent {lvalue} [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def childrenReorderedSignal (self, *args, **kwargs):
      '''
childrenReorderedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, std::vector<unsigned long, std::allocator<unsigned long> > const&), Gaffer::Signals::CatchingCombiner<void> > {lvalue} childrenReorderedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearCache (self, *args, **kwargs):
      '''
clearCache() -> None :

    C++ signature :
        void clearCache()'''
    ...
    def clearChildren (self, *args, **kwargs):
      '''
clearChildren( (GraphComponent)arg1) -> None :

    C++ signature :
        void clearChildren(Gaffer::GraphComponent {lvalue})'''
    ...
    def clearHashCache (self, *args, **kwargs):
      '''
clearHashCache([  (bool)now=False]) -> None :

    C++ signature :
        void clearHashCache([ bool=False])'''
    ...
    def collectGarbage (self, *args, **kwargs):
      '''
collectGarbage() -> None :

    C++ signature :
        void collectGarbage()'''
    ...
    def commonAncestor (self, *args, **kwargs):
      '''
commonAncestor( (GraphComponent)self, (GraphComponent)other [, (TypeId)ancestorType=IECore._IECore.TypeId(110000)]) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> commonAncestor(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const* [,IECore::TypeId=IECore._IECore.TypeId(110000)])'''
    ...
    def createCounterpart (self, *args, **kwargs):
      '''
createCounterpart( (ValuePlug)arg1, (object)arg2, (Direction)arg3) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> createCounterpart(Gaffer::ValuePlug {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >,Gaffer::Plug::Direction)'''
    ...
    def defaultHash (self, *args, **kwargs):
      '''
defaultHash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash defaultHash(Gaffer::ValuePlug {lvalue})'''
    ...
    def derivedTypeIds (self, *args, **kwargs):
      '''
derivedTypeIds( (TypeId)arg1) -> list :

    C++ signature :
        boost::python::list derivedTypeIds(IECore::TypeId)'''
    ...
    def descendant (self, *args, **kwargs):
      '''
descendant( (GraphComponent)arg1, (object)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> descendant(Gaffer::GraphComponent {lvalue},std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)'''
    ...
    def direction (self, *args, **kwargs):
      '''
direction( (Plug)arg1) -> Direction :

    C++ signature :
        Gaffer::Plug::Direction direction(Gaffer::Plug {lvalue})'''
    ...
    def dirtyCount (self, *args, **kwargs):
      '''
dirtyCount( (ValuePlug)arg1) -> int :

    C++ signature :
        unsigned long dirtyCount(Gaffer::ValuePlug {lvalue})'''
    ...
    def fullName (self, *args, **kwargs):
      '''
fullName( (GraphComponent)arg1) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > fullName(Gaffer::GraphComponent {lvalue})'''
    ...
    def garbageCollectionThreshold (self, *args, **kwargs):
      '''int([x]) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4'''
    ...
    def getCacheMemoryLimit (self, *args, **kwargs):
      '''
getCacheMemoryLimit() -> int :

    C++ signature :
        unsigned long getCacheMemoryLimit()'''
    ...
    def getChild (self, *args, **kwargs):
      '''
getChild( (GraphComponent)arg1, (InternedString)arg2) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> getChild(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def getFlags (self, *args, **kwargs):
      '''
getFlags( (Plug)arg1) -> int :

    C++ signature :
        unsigned int getFlags(Gaffer::Plug {lvalue})

getFlags( (Plug)arg1, (int)arg2) -> bool :

    C++ signature :
        bool getFlags(Gaffer::Plug {lvalue},unsigned int)'''
    ...
    def getHashCacheMode (self, *args, **kwargs):
      '''
getHashCacheMode() -> HashCacheMode :

    C++ signature :
        Gaffer::ValuePlug::HashCacheMode getHashCacheMode()'''
    ...
    def getHashCacheSizeLimit (self, *args, **kwargs):
      '''
getHashCacheSizeLimit() -> int :

    C++ signature :
        unsigned long getHashCacheSizeLimit()'''
    ...
    def getInput (self, *args, **kwargs):
      '''
getInput( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> getInput(Gaffer::Plug {lvalue})'''
    ...
    def getName (self, *args, **kwargs):
      '''
getName( (GraphComponent)arg1) -> str :

    C++ signature :
        char const* getName(Gaffer::GraphComponent {lvalue})'''
    ...
    def hash (self, *args, **kwargs):
      '''
hash( (ValuePlug)arg1) -> MurmurHash :

    C++ signature :
        IECore::MurmurHash hash(Gaffer::ValuePlug*)

hash( (ValuePlug)arg1, (MurmurHash)arg2) -> None :

    C++ signature :
        void hash(Gaffer::ValuePlug*,IECore::MurmurHash {lvalue})'''
    ...
    def hashCacheTotalUsage (self, *args, **kwargs):
      '''
hashCacheTotalUsage() -> int :

    C++ signature :
        unsigned long hashCacheTotalUsage()'''
    ...
    def inheritsFrom (self, *args, **kwargs):
      '''
inheritsFrom( (str)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(char const*)

inheritsFrom( (TypeId)arg1) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId)

inheritsFrom( (str)arg1, (str)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(char const*,char const*)

inheritsFrom( (TypeId)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool inheritsFrom(IECore::TypeId,IECore::TypeId)'''
    ...
    def isAncestorOf (self, *args, **kwargs):
      '''
isAncestorOf( (GraphComponent)arg1, (GraphComponent)arg2) -> bool :

    C++ signature :
        bool isAncestorOf(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def isInstanceOf (self, *args, **kwargs):
      '''
isInstanceOf( (ValuePlug)arg1, (TypeId)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::ValuePlug {lvalue},IECore::TypeId)

isInstanceOf( (ValuePlug)arg1, (str)arg2) -> bool :

    C++ signature :
        bool isInstanceOf(Gaffer::ValuePlug {lvalue},char const*)'''
    ...
    def isSame (self, *args, **kwargs):
      '''
isSame( (RefCounted)arg1, (RefCounted)arg2) -> bool :

    C++ signature :
        bool isSame(IECore::RefCounted const*,IECore::RefCounted const*)'''
    ...
    def isSetToDefault (self, *args, **kwargs):
      '''
isSetToDefault( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool isSetToDefault(Gaffer::ValuePlug*)'''
    ...
    def items (self, *args, **kwargs):
      '''
items( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list items(Gaffer::GraphComponent {lvalue})'''
    ...
    def keys (self, *args, **kwargs):
      '''
keys( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list keys(Gaffer::GraphComponent {lvalue})'''
    ...
    def nameChangedSignal (self, *args, **kwargs):
      '''
nameChangedSignal( (GraphComponent)arg1) -> NameChangedSignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, IECore::InternedString), Gaffer::Signals::CatchingCombiner<void> > {lvalue} nameChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def node (self, *args, **kwargs):
      '''
node( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Node> node(Gaffer::Plug {lvalue})'''
    ...
    def numWrappedInstances (self, *args, **kwargs):
      '''
numWrappedInstances() -> int :

    C++ signature :
        unsigned long numWrappedInstances()'''
    ...
    def outputs (self, *args, **kwargs):
      '''
outputs( (Plug)arg1) -> tuple :

    C++ signature :
        boost::python::tuple outputs(Gaffer::Plug {lvalue})'''
    ...
    def parent (self, *args, **kwargs):
      '''
parent( (GraphComponent)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::GraphComponent> parent(Gaffer::GraphComponent {lvalue})'''
    ...
    def parentChangedSignal (self, *args, **kwargs):
      '''
parentChangedSignal( (GraphComponent)arg1) -> BinarySignal :

    C++ signature :
        Gaffer::Signals::Signal<void (Gaffer::GraphComponent*, Gaffer::GraphComponent*), Gaffer::Signals::CatchingCombiner<void> > {lvalue} parentChangedSignal(Gaffer::GraphComponent {lvalue})'''
    ...
    def refCount (self, *args, **kwargs):
      '''
refCount( (RefCounted)arg1) -> int :

    C++ signature :
        unsigned long refCount(IECore::RefCounted {lvalue})'''
    ...
    def registerType (self, *args, **kwargs):
      '''
registerType( (TypeId)arg1, (str)arg2, (TypeId)arg3) -> None :

    C++ signature :
        void registerType(IECore::TypeId,char const*,IECore::TypeId)'''
    ...
    def relativeName (self, *args, **kwargs):
      '''
relativeName( (GraphComponent)arg1, (GraphComponent)arg2) -> str :

    C++ signature :
        std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > relativeName(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent const*)'''
    ...
    def removeChild (self, *args, **kwargs):
      '''
removeChild( (GraphComponent)arg1, (GraphComponent)arg2) -> None :

    C++ signature :
        void removeChild(Gaffer::GraphComponent {lvalue},Gaffer::GraphComponent {lvalue})'''
    ...
    def removeOutputs (self, *args, **kwargs):
      '''
removeOutputs( (Plug)arg1) -> None :

    C++ signature :
        void removeOutputs(Gaffer::Plug {lvalue})'''
    ...
    def reorderChildren (self, *args, **kwargs):
      '''
reorderChildren( (GraphComponent)arg1, (object)arg2) -> None :

    C++ signature :
        void reorderChildren(Gaffer::GraphComponent {lvalue},boost::python::api::object)'''
    ...
    def resetDefault (self, *args, **kwargs):
      '''
resetDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void resetDefault(Gaffer::ValuePlug*)'''
    ...
    def setCacheMemoryLimit (self, *args, **kwargs):
      '''
setCacheMemoryLimit( (int)arg1) -> None :

    C++ signature :
        void setCacheMemoryLimit(unsigned long)'''
    ...
    def setChild (self, *args, **kwargs):
      '''
setChild( (GraphComponent)arg1, (InternedString)arg2, (GraphComponent)arg3) -> None :

    C++ signature :
        void setChild(Gaffer::GraphComponent {lvalue},IECore::InternedString,Gaffer::GraphComponent {lvalue})'''
    ...
    def setFlags (self, *args, **kwargs):
      '''
setFlags( (Plug)arg1, (int)arg2) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int)

setFlags( (Plug)arg1, (int)arg2, (bool)arg3) -> None :

    C++ signature :
        void setFlags(Gaffer::Plug {lvalue},unsigned int,bool)'''
    ...
    def setFrom (self, *args, **kwargs):
      '''
setFrom( (ValuePlug)arg1, (ValuePlug)arg2) -> None :

    C++ signature :
        void setFrom(Gaffer::ValuePlug {lvalue},Gaffer::ValuePlug)'''
    ...
    def setHashCacheMode (self, *args, **kwargs):
      '''
setHashCacheMode( (HashCacheMode)arg1) -> None :

    C++ signature :
        void setHashCacheMode(Gaffer::ValuePlug::HashCacheMode)'''
    ...
    def setHashCacheSizeLimit (self, *args, **kwargs):
      '''
setHashCacheSizeLimit( (int)arg1) -> None :

    C++ signature :
        void setHashCacheSizeLimit(unsigned long)'''
    ...
    def setInput (self, *args, **kwargs):
      '''
setInput( (ValuePlug)arg1, (object)arg2) -> None :

    C++ signature :
        void setInput(Gaffer::ValuePlug {lvalue},boost::intrusive_ptr<Gaffer::Plug>)'''
    ...
    def setName (self, *args, **kwargs):
      '''
setName( (GraphComponent)arg1, (InternedString)arg2) -> str :

    C++ signature :
        char const* setName(Gaffer::GraphComponent {lvalue},IECore::InternedString)'''
    ...
    def setToDefault (self, *args, **kwargs):
      '''
setToDefault( (ValuePlug)arg1) -> None :

    C++ signature :
        void setToDefault(Gaffer::ValuePlug {lvalue})'''
    ...
    def settable (self, *args, **kwargs):
      '''
settable( (ValuePlug)arg1) -> bool :

    C++ signature :
        bool settable(Gaffer::ValuePlug {lvalue})'''
    ...
    def source (self, *args, **kwargs):
      '''
source( (Plug)arg1) -> object :

    C++ signature :
        boost::intrusive_ptr<Gaffer::Plug> source(Gaffer::Plug {lvalue})'''
    ...
    def staticTypeId (self, *args, **kwargs):
      '''
staticTypeId() -> TypeId :

    C++ signature :
        IECore::TypeId staticTypeId()'''
    ...
    def staticTypeName (self, *args, **kwargs):
      '''
staticTypeName() -> str :

    C++ signature :
        char const* staticTypeName()'''
    ...
    def typeId (self, *args, **kwargs):
      '''
typeId( (ValuePlug)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeId(Gaffer::ValuePlug {lvalue})'''
    ...
    def typeIdFromTypeName (self, *args, **kwargs):
      '''
typeIdFromTypeName( (str)arg1) -> TypeId :

    C++ signature :
        IECore::TypeId typeIdFromTypeName(char const*)'''
    ...
    def typeName (self, *args, **kwargs):
      '''
typeName( (ValuePlug)arg1) -> str :

    C++ signature :
        char const* typeName(Gaffer::ValuePlug {lvalue})'''
    ...
    def typeNameFromTypeId (self, *args, **kwargs):
      '''
typeNameFromTypeId( (TypeId)arg1) -> str :

    C++ signature :
        char const* typeNameFromTypeId(IECore::TypeId)'''
    ...
    def values (self, *args, **kwargs):
      '''
values( (GraphComponent)arg1) -> list :

    C++ signature :
        boost::python::list values(Gaffer::GraphComponent {lvalue})'''
    ...

def WeakMethod (*args):
      '''

'''      
    ...

class WeakMethod:
    def instance (self):
      '''None'''
    ...
    def method (self):
      '''None'''
    ...

def _BlockedConnection (*args):
      '''

'''      
    ...

def _Gaffer (*args):
      '''

'''      
    ...

def _Range (*args):
      '''

'''      
    ...

def __builtins__ (*args):
      '''

'''      
    ...

def __cached__ (*args):
      '''

'''      
    ...

def __doc__ (*args):
      '''

'''      
    ...

def __file__ (*args):
      '''

'''      
    ...

def __loader__ (*args):
      '''

'''      
    ...

def __name__ (*args):
      '''

'''      
    ...

def __package__ (*args):
      '''

'''      
    ...

def __path__ (*args):
      '''

'''      
    ...

def __spec__ (*args):
      '''

'''      
    ...

def executablePath (*args):
      '''

'''      
    ...

def isDebug (*args):
      '''

'''      
    ...

def os (*args):
      '''

'''      
    ...

def pathlib (*args):
      '''

'''      
    ...

def rootPath (*args):
      '''

'''      
    ...
